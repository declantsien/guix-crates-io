(define-module (crates-io id en identity_account_storage) #:use-module (crates-io))

(define-public crate-identity_account_storage-0.6.0 (c (n "identity_account_storage") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "function_name") (r "^0.2") (o #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "identity_core") (r "=0.6.0") (k 0)) (d (n "identity_did") (r "=0.6.0") (k 0)) (d (n "identity_iota_core") (r "=0.6.0") (k 0)) (d (n "iota-crypto") (r ">=0.7, <0.10") (f (quote ("hmac" "pbkdf" "sha" "std" "aes" "aes-kw"))) (k 0)) (d (n "iota_stronghold") (r "^0.5.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.7") (f (quote ("std"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("std" "std_rng"))) (o #t) (k 0)) (d (n "rusty-fork") (r "^0.3") (d #t) (k 2)) (d (n "seahash") (r "^4.1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "strum") (r "^0.24.0") (f (quote ("std" "derive"))) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("sync" "fs"))) (o #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("macros" "rt" "rt-multi-thread" "sync"))) (k 2)) (d (n "zeroize") (r "^1.4") (d #t) (k 0)))) (h "1bdwb3a967fxhyipg3pdxfzy6y3m075q9ccp1yqyfpmciw0gzlbj") (f (quote (("stronghold" "iota_stronghold" "tokio" "futures" "once_cell" "rand") ("storage-test-suite" "anyhow" "function_name" "rand") ("send-sync-storage") ("encryption") ("default" "stronghold" "send-sync-storage" "storage-test-suite" "encryption"))))))

(define-public crate-identity_account_storage-0.6.1 (c (n "identity_account_storage") (v "0.6.1") (d (list (d (n "anyhow") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "function_name") (r "^0.2") (o #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "identity_core") (r "=0.6.1") (k 0)) (d (n "identity_did") (r "=0.6.1") (k 0)) (d (n "identity_iota_core") (r "=0.6.1") (k 0)) (d (n "iota-crypto") (r ">=0.7, <0.10") (f (quote ("hmac" "pbkdf" "sha" "std" "aes" "aes-kw"))) (k 0)) (d (n "iota_stronghold") (r "^0.6.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.7") (f (quote ("std"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("std" "std_rng"))) (o #t) (k 0)) (d (n "rusty-fork") (r "^0.3") (d #t) (k 2)) (d (n "seahash") (r "^4.1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "strum") (r "^0.24.0") (f (quote ("std" "derive"))) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("sync" "fs"))) (o #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("macros" "rt" "rt-multi-thread" "sync"))) (k 2)) (d (n "zeroize") (r "^1.4") (d #t) (k 0)))) (h "077yaxcrrjaamrmyl17hyajvvk2s6v3sh8wq105r3pgm520cp8hw") (f (quote (("stronghold" "iota_stronghold" "tokio" "futures" "once_cell" "rand") ("storage-test-suite" "anyhow" "function_name" "rand") ("send-sync-storage") ("encryption") ("default" "stronghold" "send-sync-storage" "storage-test-suite" "encryption"))))))

(define-public crate-identity_account_storage-0.6.2 (c (n "identity_account_storage") (v "0.6.2") (d (list (d (n "anyhow") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "function_name") (r "^0.2") (o #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "identity_core") (r "=0.6.2") (k 0)) (d (n "identity_did") (r "=0.6.2") (k 0)) (d (n "identity_iota_core") (r "=0.6.2") (k 0)) (d (n "iota-crypto") (r ">=0.7, <0.10") (f (quote ("hmac" "pbkdf" "sha" "std" "aes" "aes-kw"))) (k 0)) (d (n "iota_stronghold") (r "^0.6.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.7") (f (quote ("std"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("std" "std_rng"))) (o #t) (k 0)) (d (n "rusty-fork") (r "^0.3") (d #t) (k 2)) (d (n "seahash") (r "^4.1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "strum") (r "^0.24.0") (f (quote ("std" "derive"))) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("sync" "fs"))) (o #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("macros" "rt" "rt-multi-thread" "sync"))) (k 2)) (d (n "zeroize") (r "^1.4") (d #t) (k 0)))) (h "0fpzc3ipdbk9dpl09h7mzkg5gdqkhwnhjdvjb257hb7s3pxlr6by") (f (quote (("stronghold" "iota_stronghold" "tokio" "futures" "once_cell" "rand") ("storage-test-suite" "anyhow" "function_name" "rand") ("send-sync-storage") ("encryption") ("default" "stronghold" "send-sync-storage" "storage-test-suite" "encryption"))))))

(define-public crate-identity_account_storage-0.6.3-rc.1 (c (n "identity_account_storage") (v "0.6.3-rc.1") (d (list (d (n "anyhow") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "function_name") (r "^0.2") (o #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "identity_core") (r "=0.6.3-rc.1") (k 0)) (d (n "identity_did") (r "=0.6.3-rc.1") (k 0)) (d (n "identity_iota_core") (r "=0.6.3-rc.1") (k 0)) (d (n "iota-crypto") (r ">=0.7, <0.10") (f (quote ("hmac" "pbkdf" "sha" "std" "aes" "aes-kw"))) (k 0)) (d (n "iota_stronghold") (r "^2.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.7") (f (quote ("std"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("std" "std_rng"))) (o #t) (k 0)) (d (n "rusty-fork") (r "^0.3") (d #t) (k 2)) (d (n "seahash") (r "^4.1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "strum") (r "^0.24.0") (f (quote ("std" "derive"))) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("sync" "fs"))) (o #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("macros" "rt" "rt-multi-thread" "sync"))) (k 2)) (d (n "zeroize") (r "^1.5.7") (d #t) (k 0)))) (h "1w32764bsa328byrnn4nfx43pvipgjl8rnkw3l6rmr75m4i67z8n") (f (quote (("stronghold" "iota_stronghold" "tokio" "futures" "once_cell" "rand") ("storage-test-suite" "anyhow" "function_name" "rand") ("send-sync-storage") ("encryption") ("default" "stronghold" "send-sync-storage" "storage-test-suite" "encryption"))))))

(define-public crate-identity_account_storage-0.6.3 (c (n "identity_account_storage") (v "0.6.3") (d (list (d (n "anyhow") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "function_name") (r "^0.2") (o #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "identity_core") (r "=0.6.3") (k 0)) (d (n "identity_did") (r "=0.6.3") (k 0)) (d (n "identity_iota_core") (r "=0.6.3") (k 0)) (d (n "iota-crypto") (r ">=0.7, <0.10") (f (quote ("hmac" "pbkdf" "sha" "std" "aes" "aes-kw"))) (k 0)) (d (n "iota_stronghold") (r "^2.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.7") (f (quote ("std"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("std" "std_rng"))) (o #t) (k 0)) (d (n "rusty-fork") (r "^0.3") (d #t) (k 2)) (d (n "seahash") (r "^4.1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "strum") (r "^0.24.0") (f (quote ("std" "derive"))) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("sync" "fs"))) (o #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("macros" "rt" "rt-multi-thread" "sync"))) (k 2)) (d (n "zeroize") (r "^1.5.7") (d #t) (k 0)))) (h "0x87l0ikyi95bgk3a8f4igzrpvfyhrfsn63862rbm48ajvyv3hkk") (f (quote (("stronghold" "iota_stronghold" "tokio" "futures" "once_cell" "rand") ("storage-test-suite" "anyhow" "function_name" "rand") ("send-sync-storage") ("encryption") ("default" "stronghold" "send-sync-storage" "storage-test-suite" "encryption"))))))

