(define-module (crates-io pl ug plugx-config) #:use-module (crates-io))

(define-public crate-plugx-config-0.0.1 (c (n "plugx-config") (v "0.0.1") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "dotenv-parser") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "log") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "plugx-input") (r "^0.0.1") (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_qs") (r "^0.12.0") (o #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "toml") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (o #t) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("json"))) (d #t) (k 2)) (d (n "url") (r "^2.4.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "0q24r1i55jr7925mgc744m8r73gxhbbxdgqh2pkv4jwvpxx0wvwm") (f (quote (("fs") ("env-loader") ("env" "env-loader" "env-parser") ("default" "logging" "env")))) (s 2) (e (quote (("yaml" "dep:serde_yaml") ("tracing" "dep:tracing" "plugx-input/tracing") ("toml" "dep:toml") ("qs" "dep:serde_qs") ("logging" "dep:log" "plugx-input/logging") ("json" "dep:serde_json") ("env-parser" "dep:dotenv-parser" "dep:serde_json"))))))

(define-public crate-plugx-config-0.1.0 (c (n "plugx-config") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "deser-hjson") (r "^2.2.0") (d #t) (k 2)) (d (n "dotenv-parser") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "log") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "plugx-input") (r "^0.0.1") (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_qs") (r "^0.12.0") (o #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "toml") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (o #t) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("json"))) (d #t) (k 2)) (d (n "url") (r "^2.4.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "10k409n8j75pdpy0xzkghaqbhzkcwyj29328abgksjvc94hwhacw") (f (quote (("fs" "qs") ("default" "logging" "env")))) (s 2) (e (quote (("yaml" "dep:serde_yaml") ("tracing" "dep:tracing" "plugx-input/tracing") ("toml" "dep:toml") ("qs" "dep:serde_qs") ("logging" "dep:log" "plugx-input/logging") ("json" "dep:serde_json") ("env" "dep:dotenv-parser" "dep:serde_json" "qs"))))))

(define-public crate-plugx-config-0.1.1 (c (n "plugx-config") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "deser-hjson") (r "^2.2.0") (d #t) (k 2)) (d (n "dotenv-parser") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "log") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "plugx-input") (r "^0.0.1") (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_qs") (r "^0.12.0") (o #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "toml") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (o #t) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("json"))) (d #t) (k 2)) (d (n "url") (r "^2.4.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "1bwclx1csg6zifskf7n13l98pgc2mpfkm29lgg8cw6zmr5kqwz8z") (f (quote (("fs" "qs") ("default" "logging" "env")))) (s 2) (e (quote (("yaml" "dep:serde_yaml") ("tracing" "dep:tracing" "plugx-input/tracing") ("toml" "dep:toml") ("qs" "dep:serde_qs") ("logging" "dep:log" "plugx-input/logging") ("json" "dep:serde_json") ("env" "dep:dotenv-parser" "dep:serde_json" "qs"))))))

(define-public crate-plugx-config-0.1.2 (c (n "plugx-config") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "deser-hjson") (r "^2.2.0") (d #t) (k 2)) (d (n "dotenv-parser") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "log") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "plugx-input") (r "^0.0.1") (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_qs") (r "^0.12.0") (o #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "toml") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (o #t) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("json"))) (d #t) (k 2)) (d (n "url") (r "^2.4.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "0iwkxva4abpasig57qivvh50j8z7pgkm844s4b7zlkrnn441vgqm") (f (quote (("fs" "qs") ("default" "logging" "env")))) (s 2) (e (quote (("yaml" "dep:serde_yaml") ("tracing" "dep:tracing" "plugx-input/tracing") ("toml" "dep:toml") ("qs" "dep:serde_qs") ("logging" "dep:log" "plugx-input/logging") ("json" "dep:serde_json") ("env" "dep:dotenv-parser" "dep:serde_json" "qs"))))))

(define-public crate-plugx-config-0.1.3 (c (n "plugx-config") (v "0.1.3") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^4.4.2") (f (quote ("std" "derive"))) (o #t) (k 0)) (d (n "deser-hjson") (r "^2.2.0") (d #t) (k 2)) (d (n "dotenv-parser") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "log") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "plugx-input") (r "^0.1.1") (f (quote ("validation"))) (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_qs") (r "^0.12.0") (o #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "toml") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (o #t) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("json"))) (d #t) (k 2)) (d (n "url") (r "^2.4.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "14453kwdgn6pm6vxdjy9qw36rj07k6l1kmxcjgxfy5sw8y7wn6fy") (f (quote (("fs" "qs") ("default" "logging" "env")))) (s 2) (e (quote (("yaml" "dep:serde_yaml") ("tracing" "dep:tracing" "plugx-input/tracing") ("toml" "dep:toml") ("qs" "dep:serde_qs") ("logging" "dep:log" "plugx-input/logging") ("json" "dep:serde_json") ("env" "dep:dotenv-parser" "dep:serde_json" "qs") ("clap" "dep:clap"))))))

(define-public crate-plugx-config-0.2.0 (c (n "plugx-config") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.79") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "deser-hjson") (r "^2.2.4") (d #t) (k 2)) (d (n "dirs") (r "^5.0.1") (d #t) (k 2)) (d (n "dotenv-parser") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.1") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (k 0)) (d (n "plugx-input") (r "^0.3.1") (f (quote ("schema"))) (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.111") (o #t) (d #t) (k 0)) (d (n "serde_qs") (r "^0.12.0") (o #t) (k 0)) (d (n "serde_yaml") (r "^0.9.30") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "toml") (r "^0.8.8") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("json"))) (d #t) (k 2)) (d (n "url") (r "^2.5.0") (f (quote ("serde"))) (d #t) (k 0)))) (h "1zi72g6ag869vlchgz22x72626757d9nmnm8hqnrj91ycmc3720v") (f (quote (("fs" "qs") ("default" "logging" "env")))) (s 2) (e (quote (("yaml" "dep:serde_yaml") ("tracing" "dep:tracing" "plugx-input/tracing") ("toml" "dep:toml") ("qs" "dep:serde_qs") ("logging" "dep:log" "plugx-input/logging") ("json" "dep:serde_json") ("env" "dep:dotenv-parser" "dep:serde_json" "qs"))))))

