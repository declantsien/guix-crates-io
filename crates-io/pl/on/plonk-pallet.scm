(define-module (crates-io pl on plonk-pallet) #:use-module (crates-io))

(define-public crate-plonk-pallet-0.1.0 (c (n "plonk-pallet") (v "0.1.0") (d (list (d (n "ark-std") (r "^0.3") (f (quote ("print-trace"))) (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dusk-jubjub") (r "^0.1") (k 0) (p "plonk-jubjub")) (d (n "dusk-plonk") (r "^0.1") (d #t) (k 0) (p "parity-plonk")) (d (n "frame-support") (r "^3.0") (k 0)) (d (n "frame-system") (r "^3.0") (k 0)) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sp-core") (r "^3.0") (d #t) (k 2)) (d (n "sp-io") (r "^3.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^3.0") (k 0)) (d (n "sp-std") (r "^3.0") (k 0)))) (h "0qbx4007wbr45hg55dazjsfiyh7pbx75d6hay2hd9wf3d7jqw9f5") (f (quote (("std" "rand_core/std" "parity-scale-codec/std" "sp-std/std" "sp-runtime/std" "frame-support/std" "frame-system/std") ("default" "std"))))))

(define-public crate-plonk-pallet-0.1.2 (c (n "plonk-pallet") (v "0.1.2") (d (list (d (n "ark-std") (r "^0.3") (f (quote ("print-trace"))) (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dusk-jubjub") (r "^0.1") (k 0) (p "plonk-jubjub")) (d (n "dusk-plonk") (r "^0.1") (d #t) (k 0) (p "parity-plonk")) (d (n "frame-support") (r "^3.0") (k 0)) (d (n "frame-system") (r "^3.0") (k 0)) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sp-core") (r "^3.0") (d #t) (k 2)) (d (n "sp-io") (r "^3.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^3.0") (k 0)) (d (n "sp-std") (r "^3.0") (k 0)))) (h "1qjwbqv1gsm6pimz3fj4vyj4d4km7sf638lq9ppjl9gy5xjc798k") (f (quote (("std" "rand_core/std" "parity-scale-codec/std" "sp-std/std" "sp-runtime/std" "frame-support/std" "frame-system/std") ("default" "std"))))))

(define-public crate-plonk-pallet-0.1.3 (c (n "plonk-pallet") (v "0.1.3") (d (list (d (n "ark-std") (r "^0.3") (f (quote ("print-trace"))) (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dusk-jubjub") (r "^0.1") (k 0) (p "plonk-jubjub")) (d (n "dusk-plonk") (r "^0.1") (d #t) (k 0) (p "parity-plonk")) (d (n "frame-support") (r "^3.0") (k 0)) (d (n "frame-system") (r "^3.0") (k 0)) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sp-core") (r "^3.0") (d #t) (k 2)) (d (n "sp-io") (r "^3.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^3.0") (k 0)) (d (n "sp-std") (r "^3.0") (k 0)))) (h "0xn95myibcinafq3y737as2k6qm7fdzwr61cdjhl83f2jzklgw0f") (f (quote (("std" "rand_core/std" "parity-scale-codec/std" "sp-std/std" "sp-runtime/std" "frame-support/std" "frame-system/std") ("default" "std"))))))

(define-public crate-plonk-pallet-0.2.0 (c (n "plonk-pallet") (v "0.2.0") (d (list (d (n "frame-benchmarking") (r "^3.1.0") (o #t) (k 0)) (d (n "frame-support") (r "^3.0.0") (k 0)) (d (n "frame-system") (r "^3.0.0") (k 0)) (d (n "parity-plonk") (r "^0.2") (k 0)) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (k 0)) (d (n "parity_rand_xorshift") (r "^0.1") (k 0)) (d (n "plonk-jubjub") (r "^0.2") (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (k 0)) (d (n "sp-core") (r "^3.0.0") (k 2)) (d (n "sp-io") (r "^3.0.0") (k 2)) (d (n "sp-runtime") (r "^3.0.0") (k 2)) (d (n "sp-std") (r "^3.0.0") (k 0)))) (h "10s9j4h627jkziy0pia466y6csmf5wf0khv5hjd9hajvq2q2h76m") (f (quote (("std" "parity-scale-codec/std" "frame-support/std" "frame-system/std" "frame-benchmarking/std" "sp-std/std") ("runtime-benchmarks" "frame-benchmarking" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks") ("default" "std"))))))

(define-public crate-plonk-pallet-0.2.1 (c (n "plonk-pallet") (v "0.2.1") (d (list (d (n "frame-support") (r "^3.0.0") (k 0)) (d (n "frame-system") (r "^3.0.0") (k 0)) (d (n "parity-plonk") (r "^0.2") (k 0)) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (k 0)) (d (n "parity_rand_xorshift") (r "^0.1") (k 0)) (d (n "plonk-jubjub") (r "^0.2") (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (k 0)) (d (n "sp-core") (r "^3.0.0") (k 2)) (d (n "sp-io") (r "^3.0.0") (k 2)) (d (n "sp-runtime") (r "^3.0.0") (k 2)) (d (n "sp-std") (r "^3.0.0") (k 0)))) (h "0n55jba9chapjj06q224ydbd26ggh22iy7sr0hpi5c2qvafdynkb") (f (quote (("std" "parity-scale-codec/std" "frame-support/std" "frame-system/std" "sp-std/std") ("default" "std"))))))

(define-public crate-plonk-pallet-0.2.2 (c (n "plonk-pallet") (v "0.2.2") (d (list (d (n "frame-support") (r "^3.0.0") (k 0)) (d (n "frame-system") (r "^3.0.0") (k 0)) (d (n "fullcodec-jubjub") (r "^0.2") (k 0)) (d (n "fullcodec-plonk") (r "^0.2") (k 0)) (d (n "fullcodec_rand_xorshift") (r "^0.2") (k 0)) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (k 0)) (d (n "sp-core") (r "^3.0.0") (k 2)) (d (n "sp-io") (r "^3.0.0") (k 2)) (d (n "sp-runtime") (r "^3.0.0") (k 2)) (d (n "sp-std") (r "^3.0.0") (k 0)))) (h "02zzz1mqyhglg0n36m274mrrry9088hqaqyr6m8qn9ckmfj3iihh") (f (quote (("std" "parity-scale-codec/std" "frame-support/std" "frame-system/std" "sp-std/std") ("default" "std"))))))

