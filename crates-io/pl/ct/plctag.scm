(define-module (crates-io pl ct plctag) #:use-module (crates-io))

(define-public crate-plctag-0.1.0 (c (n "plctag") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (f (quote ("async_futures" "async_tokio" "cargo_bench_support"))) (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "plctag-async") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "plctag-core") (r "^0.1") (d #t) (k 0)) (d (n "plctag-derive") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "plctag-log") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (d #t) (k 2)))) (h "0d6a191ih9gi1i9qqda203hnwjz9sza7a7lvsf9jvy2m1p8ikmj6") (f (quote (("log" "plctag-log") ("full" "derive" "async" "log") ("derive" "plctag-derive") ("default" "full") ("async" "plctag-async"))))))

(define-public crate-plctag-0.2.0 (c (n "plctag") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (f (quote ("async_futures" "async_tokio" "cargo_bench_support"))) (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "plctag-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "plctag-core") (r "^0.2") (d #t) (k 0)) (d (n "plctag-derive") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "plctag-log") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (d #t) (k 2)))) (h "1ql8c5lqnsngfxdiaqj64j1334rs50j579va5b1x5cblfdb8qxja") (f (quote (("log" "plctag-log") ("full" "derive" "async" "log") ("derive" "plctag-derive") ("default" "full") ("async" "plctag-async"))))))

(define-public crate-plctag-0.2.1 (c (n "plctag") (v "0.2.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (f (quote ("async_futures" "async_tokio" "cargo_bench_support"))) (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "plctag-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "plctag-core") (r "^0.2") (d #t) (k 0)) (d (n "plctag-derive") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "plctag-log") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (d #t) (k 2)))) (h "1ldrcp817ywn7ncm14823z34qbzfq2820033rq7lz8v9arsli8kh") (f (quote (("log" "plctag-log") ("full" "derive" "async" "log") ("derive" "plctag-derive") ("default" "full") ("async" "plctag-async"))))))

(define-public crate-plctag-0.3.0 (c (n "plctag") (v "0.3.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (f (quote ("async_futures" "async_tokio" "cargo_bench_support"))) (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "plctag-async") (r "^0.3") (o #t) (k 0)) (d (n "plctag-core") (r "^0.3") (k 0)) (d (n "plctag-derive") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "plctag-log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "time" "sync" "macros"))) (k 2)))) (h "01fsa356i7fw6s5hifi8pwsm5lz238a45snyf9w3nk35fss9l2yz") (f (quote (("value" "plctag-core/value" "plctag-async/value") ("log" "plctag-log") ("full" "derive" "async" "value" "log" "builder") ("derive" "plctag-derive" "plctag-core/value") ("default" "full") ("builder" "plctag-core/builder") ("async" "plctag-async"))))))

(define-public crate-plctag-0.2.2 (c (n "plctag") (v "0.2.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (f (quote ("async_futures" "async_tokio" "cargo_bench_support"))) (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "plctag-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "plctag-core") (r "^0.2") (d #t) (k 0)) (d (n "plctag-derive") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "plctag-log") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (d #t) (k 2)))) (h "1fak3v5cqnm3s77ax3hzal0c1pv0ak8qxcbg2rd8lyd44fp86i5r") (f (quote (("log" "plctag-log") ("full" "derive" "async" "log") ("derive" "plctag-derive") ("default" "full") ("async" "plctag-async"))))))

(define-public crate-plctag-0.4.0 (c (n "plctag") (v "0.4.0") (d (list (d (n "plctag-async") (r "^0.4") (o #t) (k 0)) (d (n "plctag-core") (r "^0.4") (k 0)) (d (n "plctag-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "plctag-log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (f (quote ("async_futures" "async_tokio" "cargo_bench_support"))) (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "time" "sync" "macros"))) (k 2)))) (h "0ra31nkx1xbmk1m5ywwaf3nvbg46pywrscyjhpkdax3070wr5g64") (f (quote (("value" "plctag-core/value" "plctag-async/value") ("log" "plctag-log") ("full" "derive" "async" "value" "log" "builder") ("derive" "plctag-derive" "plctag-core/value") ("default" "full") ("builder" "plctag-core/builder") ("async" "plctag-async"))))))

