(define-module (crates-io gs ea gsearch) #:use-module (crates-io))

(define-public crate-gsearch-0.0.12 (c (n "gsearch") (v "0.0.12") (d (list (d (n "annembed") (r "^0.0.8") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.58") (d #t) (k 0)) (d (n "clap") (r "^3.2") (d #t) (k 0)) (d (n "cpu-time") (r "^1.0") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 0)) (d (n "hnsw_rs") (r "^0.1.16") (d #t) (k 0)) (d (n "kmerutils") (r "^0.0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "needletail") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "probminhash") (r "^0.1.6") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "1wf3z9cj1g5mfxi81sv6547br5w4g3l129zacr86jv0cgj54mgk0") (f (quote (("withzmq" "kmerutils/withzmq") ("default") ("annembed_openblas-system" "annembed/openblas-system") ("annembed_openblas-static" "annembed/openblas-static") ("annembed_intel-mkl" "annembed/intel-mkl-static"))))))

(define-public crate-gsearch-0.1.0 (c (n "gsearch") (v "0.1.0") (d (list (d (n "annembed") (r "^0.0.8") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.58") (d #t) (k 0)) (d (n "clap") (r "^3.2") (d #t) (k 0)) (d (n "cpu-time") (r "^1.0") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 0)) (d (n "hnsw_rs") (r "^0.1.16") (d #t) (k 0)) (d (n "kmerutils") (r "^0.0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "needletail") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "probminhash") (r "^0.1.6") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "11639vvhz91x6nx24hn90sinjnr78z0bh2x1q962f8ygfv3p3ips") (f (quote (("withzmq" "kmerutils/withzmq") ("default") ("annembed_openblas-system" "annembed/openblas-system") ("annembed_openblas-static" "annembed/openblas-static") ("annembed_intel-mkl" "annembed/intel-mkl-static")))) (y #t)))

(define-public crate-gsearch-0.1.1 (c (n "gsearch") (v "0.1.1") (d (list (d (n "annembed") (r "^0.0.8") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.58") (d #t) (k 0)) (d (n "clap") (r "^3.2") (d #t) (k 0)) (d (n "cpu-time") (r "^1.0") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 0)) (d (n "hnsw_rs") (r "^0.1.16") (d #t) (k 0)) (d (n "kmerutils") (r "^0.0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "needletail") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "probminhash") (r "^0.1.6") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "10vj1bmya13k9ncdmdd3f1yi24v7wqz06jkzmrqmlcnlzdz7xlrr") (f (quote (("withzmq" "kmerutils/withzmq") ("default") ("annembed_openblas-system" "annembed/openblas-system") ("annembed_openblas-static" "annembed/openblas-static") ("annembed_intel-mkl" "annembed/intel-mkl-static")))) (y #t)))

(define-public crate-gsearch-0.1.2 (c (n "gsearch") (v "0.1.2") (d (list (d (n "annembed") (r "^0.0.10") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.58") (d #t) (k 0)) (d (n "clap") (r "^4.1") (d #t) (k 0)) (d (n "cpu-time") (r "^1.0") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hnsw_rs") (r "^0.1.19") (d #t) (k 0)) (d (n "kmerutils") (r "^0.0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "needletail") (r "^0.5") (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "probminhash") (r "^0.1.8") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "12a0fjzlgaqki0w98bbz9djaa7alqxgsazib1wlny0gigd0az1rg") (f (quote (("withzmq" "kmerutils/withzmq") ("simdeez_f" "hnsw_rs/simdeez_f" "kmerutils/simdeez_f") ("default") ("annembed_openblas-system" "annembed/openblas-system") ("annembed_openblas-static" "annembed/openblas-static") ("annembed_intel-mkl" "annembed/intel-mkl-static"))))))

(define-public crate-gsearch-0.1.3 (c (n "gsearch") (v "0.1.3") (d (list (d (n "annembed") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.58") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^4.5") (d #t) (k 0)) (d (n "concurrent-queue") (r "^2.5") (d #t) (k 0)) (d (n "cpu-time") (r "^1.0") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hnsw_rs") (r "^0.3") (d #t) (k 0)) (d (n "kmerutils") (r "^0.0.11") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memory-stats") (r "^1.1") (f (quote ("always_use_statm"))) (d #t) (k 0)) (d (n "needletail") (r "^0.5") (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "probminhash") (r "^0.1.11") (d #t) (k 0)) (d (n "rayon") (r "^1.10") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "11d200i4d5a3lsrdnkl2byvwbz5f68982lsh0y2c4pniik466q24") (f (quote (("withzmq" "kmerutils/withzmq") ("simdeez_f" "hnsw_rs/simdeez_f" "kmerutils/simdeez_f") ("default" "annembed_openblas-system") ("annembed_openblas-system" "annembed/openblas-system") ("annembed_openblas-static" "annembed/openblas-static") ("annembed_intel-mkl" "annembed/intel-mkl-static"))))))

