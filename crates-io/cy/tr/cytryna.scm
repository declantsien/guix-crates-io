(define-module (crates-io cy tr cytryna) #:use-module (crates-io))

(define-public crate-cytryna-0.1.0 (c (n "cytryna") (v "0.1.0") (d (list (d (n "aes") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bmp") (r "^0.5") (d #t) (k 0)) (d (n "cbc") (r "^0.1") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ctr") (r "^0.9") (f (quote ("std"))) (d #t) (k 0)) (d (n "derivative") (r "^2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 0)) (d (n "image") (r "^0.24") (k 0)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "modular-bitfield") (r "^0.11") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1g8dnvh5q3sg1r9k72wjfhy2lf1779vm87qf4vmlzh0bfp2b9b04")))

(define-public crate-cytryna-0.1.1 (c (n "cytryna") (v "0.1.1") (d (list (d (n "aes") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bmp") (r "^0.5") (d #t) (k 0)) (d (n "cbc") (r "^0.1") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ctr") (r "^0.9") (f (quote ("std"))) (d #t) (k 0)) (d (n "derivative") (r "^2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 0)) (d (n "image") (r "^0.24") (k 0)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "modular-bitfield") (r "^0.11") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "00l029fqpd9v8vs24w6r9h7lf4435l2cdqf1k2930inzph9wplx5")))

(define-public crate-cytryna-0.1.3 (c (n "cytryna") (v "0.1.3") (d (list (d (n "aes") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bmp") (r "^0.5") (d #t) (k 0)) (d (n "cbc") (r "^0.1") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ctr") (r "^0.9") (f (quote ("std"))) (d #t) (k 0)) (d (n "derivative") (r "^2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 0)) (d (n "image") (r "^0.24") (k 0)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "modular-bitfield") (r "^0.11") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "02z8g497zy3cd7ix2j28xdchhbqm5x4lirmwxcs4ja3a44cx765g")))

