(define-module (crates-io lu mi luminol) #:use-module (crates-io))

(define-public crate-luminol-0.2.0 (c (n "luminol") (v "0.2.0") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "eframe") (r "^0.19.0") (f (quote ("persistence" "wgpu"))) (d #t) (k 0)) (d (n "egui") (r "^0.19.0") (d #t) (k 0)) (d (n "egui-notify") (r "^0.4.0") (d #t) (k 0)) (d (n "egui_dock") (r "^0.2.1") (d #t) (k 0)) (d (n "egui_extras") (r "^0.19.0") (f (quote ("svg" "image"))) (d #t) (k 0)) (d (n "image") (r "^0.24") (f (quote ("jpeg" "png"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.59") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rfd") (r "^0.10.0") (d #t) (k 0)) (d (n "rodio") (r "^0.16.0") (f (quote ("symphonia-all"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rodio") (r "^0.16.0") (f (quote ("wasm-bindgen" "symphonia-all"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 0)) (d (n "ruby-marshal") (r "^0.0.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "strum") (r "^0.24.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing-wasm") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.82") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.59") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgpu") (r "^0.13.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu") (r "^0.13.1") (f (quote ("webgl"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "054lr0g9gnn129dh05hg4wrg9x1kxlk2nq10pr3y5bsyc4025i5q") (r "1.62")))

