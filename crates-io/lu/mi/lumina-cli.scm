(define-module (crates-io lu mi lumina-cli) #:use-module (crates-io))

(define-public crate-lumina-cli-0.1.0 (c (n "lumina-cli") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 1)) (d (n "axum") (r "^0.6.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "celestia-rpc") (r "^0.1.0") (f (quote ("p2p"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "celestia-types") (r "^0.1.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4.4.4") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "envy") (r "^0.4") (d #t) (k 1)) (d (n "libp2p") (r "^0.53.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "lumina-node") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "mime_guess") (r "^2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rust-embed") (r "^8.0.0") (f (quote ("interpolate-folder-path"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.189") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_repr") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.29.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing-appender") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "10pxncvn10qpgzl71sfzb2md58l80y0sz08p43jn4zsvmgbdfys1") (f (quote (("browser-node"))))))

(define-public crate-lumina-cli-0.2.0 (c (n "lumina-cli") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 1)) (d (n "axum") (r "^0.6.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "celestia-rpc") (r "^0.2.0") (f (quote ("p2p"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "celestia-types") (r "^0.2.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4.4.4") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "envy") (r "^0.4") (d #t) (k 1)) (d (n "libp2p") (r "^0.53.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "lumina-node") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "mime_guess") (r "^2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "redb") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rust-embed") (r "^8.0.0") (f (quote ("interpolate-folder-path"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.189") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_repr") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.29.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing-appender") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1zmcdsrxahi66hk3niq6xyni75sachlyb4xnlppil2x9zzk6gxxk") (f (quote (("browser-node"))))))

