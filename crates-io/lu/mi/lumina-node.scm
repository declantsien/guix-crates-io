(define-module (crates-io lu mi lumina-node) #:use-module (crates-io))

(define-public crate-lumina-node-0.1.0 (c (n "lumina-node") (v "0.1.0") (d (list (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (f (quote ("tokio"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "backoff") (r "^0.4.0") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "bytes") (r "^1.4.0") (d #t) (k 2)) (d (n "celestia-proto") (r "^0.1.0") (d #t) (k 0)) (d (n "celestia-rpc") (r "^0.1.0") (f (quote ("p2p"))) (k 2)) (d (n "celestia-tendermint-proto") (r "^0.32.0") (d #t) (k 0)) (d (n "celestia-types") (r "^0.1.0") (k 0)) (d (n "celestia-types") (r "^0.1.0") (f (quote ("wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "celestia-types") (r "^0.1.0") (f (quote ("test-utils"))) (k 2)) (d (n "dashmap") (r "^5.5.3") (d #t) (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 2)) (d (n "function_name") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.10") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gloo-timers") (r "^0.3.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "instant") (r "^0.1.12") (d #t) (k 0)) (d (n "libp2p") (r "^0.53.1") (f (quote ("autonat" "ping" "gossipsub" "identify" "macros" "request-response" "kad"))) (d #t) (k 0)) (d (n "libp2p") (r "^0.53.1") (f (quote ("noise" "dns" "tcp" "tokio" "yamux" "quic"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libp2p") (r "^0.53.1") (f (quote ("wasm-bindgen" "webtransport-websys"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "pin-project") (r "^1.1.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "prost") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rexie") (r "^0.5.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "sled") (r "^0.34.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "smallvec") (r "^1.11.1") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("macros" "sync"))) (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("rt-multi-thread" "time"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.9") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.88") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0y7byb8w546l7df4i58qb4s9c627rh9psf1hj3gz7z7w7yihvgcx") (f (quote (("test-utils" "celestia-types/test-utils"))))))

(define-public crate-lumina-node-0.1.1 (c (n "lumina-node") (v "0.1.1") (d (list (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (f (quote ("tokio"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "backoff") (r "^0.4.0") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "bytes") (r "^1.4.0") (d #t) (k 2)) (d (n "celestia-proto") (r "^0.1.0") (d #t) (k 0)) (d (n "celestia-rpc") (r "^0.1.0") (f (quote ("p2p"))) (k 2)) (d (n "celestia-tendermint-proto") (r "^0.32.1") (d #t) (k 0)) (d (n "celestia-types") (r "^0.1.0") (k 0)) (d (n "celestia-types") (r "^0.1.0") (f (quote ("wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "celestia-types") (r "^0.1.0") (f (quote ("test-utils"))) (k 2)) (d (n "dashmap") (r "^5.5.3") (d #t) (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 2)) (d (n "function_name") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.10") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gloo-timers") (r "^0.3.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "instant") (r "^0.1.12") (d #t) (k 0)) (d (n "libp2p") (r "^0.53.1") (f (quote ("autonat" "ping" "gossipsub" "identify" "macros" "request-response" "kad"))) (d #t) (k 0)) (d (n "libp2p") (r "^0.53.1") (f (quote ("noise" "dns" "tcp" "tokio" "yamux" "quic"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libp2p") (r "^0.53.1") (f (quote ("wasm-bindgen" "webtransport-websys"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "pin-project") (r "^1.1.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "prost") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rexie") (r "^0.5.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "sled") (r "^0.34.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "smallvec") (r "^1.11.1") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("macros" "sync"))) (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("rt-multi-thread" "time"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.9") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.88") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "03cjwsl6dw9vknd3wk4082pa7wygqsyid5xsmnqaggq6winblvf7") (f (quote (("test-utils" "celestia-types/test-utils"))))))

(define-public crate-lumina-node-0.2.0 (c (n "lumina-node") (v "0.2.0") (d (list (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (f (quote ("tokio"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "backoff") (r "^0.4.0") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "beetswap") (r "^0.1") (d #t) (k 0)) (d (n "beetswap") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "blockstore") (r "^0.5") (f (quote ("redb"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "blockstore") (r "^0.5") (f (quote ("indexeddb"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "bytes") (r "^1.4.0") (d #t) (k 2)) (d (n "celestia-proto") (r "^0.2.0") (d #t) (k 0)) (d (n "celestia-rpc") (r "^0.2.0") (f (quote ("p2p"))) (k 2)) (d (n "celestia-tendermint-proto") (r "^0.32.1") (d #t) (k 0)) (d (n "celestia-types") (r "^0.2.0") (k 0)) (d (n "celestia-types") (r "^0.2.0") (f (quote ("wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "celestia-types") (r "^0.2.0") (f (quote ("test-utils"))) (k 2)) (d (n "cid") (r "^0.11.0") (f (quote ("serde-codec"))) (d #t) (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 2)) (d (n "function_name") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.10") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gloo-timers") (r "^0.3.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "instant") (r "^0.1.12") (d #t) (k 0)) (d (n "libp2p") (r "^0.53.2") (f (quote ("autonat" "ping" "gossipsub" "identify" "macros" "request-response" "kad"))) (d #t) (k 0)) (d (n "libp2p") (r "^0.53.2") (f (quote ("noise" "dns" "tcp" "tokio" "yamux" "quic"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libp2p") (r "^0.53.2") (f (quote ("wasm-bindgen" "webtransport-websys"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "pin-project") (r "^1.1.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "prost") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "redb") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rexie") (r "^0.5.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "rstest") (r "^0.18.2") (d #t) (k 2)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.1") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.9.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("macros" "sync"))) (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("rt-multi-thread" "time"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.9") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.88") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "194pd6z1j8y1ip698yww3pkz81yz1pdddb7sszpjxigzxhhjzdyx") (f (quote (("test-utils" "celestia-types/test-utils"))))))

