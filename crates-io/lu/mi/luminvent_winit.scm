(define-module (crates-io lu mi luminvent_winit) #:use-module (crates-io))

(define-public crate-luminvent_winit-0.26.1 (c (n "luminvent_winit") (v "0.26.1") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.4") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "getrandom") (r "^0.2.6") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "image") (r "^0.23.12") (d #t) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.5") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.5") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.2.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.11.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.4.3") (d #t) (k 0) (p "luminvent-raw-window-handle")) (d (n "sctk") (r "^0.15.1") (f (quote ("calloop"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1.9") (d #t) (k 2)) (d (n "uuid") (r "^1.0.0") (f (quote ("v4"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29") (f (quote ("use_system_lib"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.29") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.9") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "imm" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser" "mmsystem" "timeapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1mc5ncnanr8db0lik26ka1669v9czjp0a7kjyf01xigc05fkqps7") (f (quote (("x11" "x11-dl" "mio" "percent-encoding" "parking_lot") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland" "wayland-client" "wayland-protocols" "sctk") ("default" "x11" "wayland" "wayland-dlopen"))))))

(define-public crate-luminvent_winit-0.27.6-alpha (c (n "luminvent_winit") (v "0.27.6-alpha") (d (list (d (n "android-activity") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.56") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "=0.3.0-beta.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "raw_window_handle_04") (r "^0.4.3") (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.5.1") (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.4") (f (quote ("use_system_lib"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.29.4") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web_sys") (r "^0.3.56") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.42") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "109nydwrg2sr5nhqavf0ad67f4cqpkqnapyqjl267qybq4n1213n") (f (quote (("x11" "x11-dl" "mio" "percent-encoding") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-protocols" "sctk") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("css-size" "js-sys" "web_sys/ResizeObserver" "web_sys/ResizeObserverBoxOptions" "web_sys/ResizeObserverEntry" "web_sys/ResizeObserverOptions" "web_sys/ResizeObserverSize") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (r "1.60.0")))

