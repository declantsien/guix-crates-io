(define-module (crates-io ic em icemelter) #:use-module (crates-io))

(define-public crate-icemelter-0.1.0 (c (n "icemelter") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-rust") (r "^0.20") (d #t) (k 0)) (d (n "treereduce") (r "^0.2") (d #t) (k 0)))) (h "0dx8q8s94jyvd7mys18abgpcgxaij73b6nqlrp7jiwi4rw991v8n")))

(define-public crate-icemelter-0.2.0 (c (n "icemelter") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-rust") (r "^0.20") (d #t) (k 0)) (d (n "treereduce") (r "^0.2") (d #t) (k 0)))) (h "10iaivv57hq67dwschgxzk2bqn697x5gyrid9ilz8zdgkx38l5y0")))

(define-public crate-icemelter-0.3.0 (c (n "icemelter") (v "0.3.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-rust") (r "^0.20") (d #t) (k 0)) (d (n "treereduce") (r "^0.2") (d #t) (k 0)))) (h "12cws02yfcj5vzky551npk08axxd4853mvi6rhpzkg7va3iq3i5p") (s 2) (e (quote (("fetch" "dep:reqwest" "dep:serde"))))))

(define-public crate-icemelter-0.3.1-rc.1 (c (n "icemelter") (v "0.3.1-rc.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-rust") (r "^0.20") (d #t) (k 0)) (d (n "treereduce") (r "^0.2") (d #t) (k 0)))) (h "0b03n4k4wg9wa5d0mngl1crpdzmy72bvjnlz4qk5wpa5rjn12zv7") (s 2) (e (quote (("fetch" "dep:reqwest" "dep:serde"))))))

(define-public crate-icemelter-0.3.1 (c (n "icemelter") (v "0.3.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-rust") (r "^0.20") (d #t) (k 0)) (d (n "treereduce") (r "^0.2") (d #t) (k 0)))) (h "1bmg25shvjxh3xp7g7d53lwk5w7z2vhszqgs23lh6j94b408x37g") (s 2) (e (quote (("fetch" "dep:reqwest" "dep:serde"))))))

(define-public crate-icemelter-0.3.2 (c (n "icemelter") (v "0.3.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.48") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-rust") (r "^0.20") (d #t) (k 0)) (d (n "treereduce") (r "^0.3") (d #t) (k 0)))) (h "0lv001qq7vy3dc04w67zfhdiriflhfcys861v5xrydf7r724zw19") (s 2) (e (quote (("fetch" "dep:reqwest" "dep:serde"))))))

