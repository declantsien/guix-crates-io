(define-module (crates-io de br debruijn) #:use-module (crates-io))

(define-public crate-debruijn-0.3.2 (c (n "debruijn") (v "0.3.2") (d (list (d (n "bit-set") (r "^0.5.1") (d #t) (k 0)) (d (n "boomphf") (r "^0.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r ">=0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num") (r ">=0.2, ^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rand") (r "^0.5") (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0ls8nxfrhgj5dw56mnm28s87scvj0sjdhsfhhs57g4703l2j8s3f")))

(define-public crate-debruijn-0.3.3 (c (n "debruijn") (v "0.3.3") (d (list (d (n "bit-set") (r "^0.5.1") (d #t) (k 0)) (d (n "boomphf") (r "^0.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r ">=0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num") (r ">=0.2, <0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rand") (r "^0.5") (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0ags1n3pybf609gwhb57kfs824dggrhn4p89ni1wzi5i53s3cvw2")))

(define-public crate-debruijn-0.3.4 (c (n "debruijn") (v "0.3.4") (d (list (d (n "bit-set") (r "^0.5.1") (d #t) (k 0)) (d (n "boomphf") (r "^0.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r ">=0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r ">=0.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rand") (r "^0.5") (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1m9r8jk9fn2rxp06r3mnhrbfyrapwl9sb0khh513c2r78pzjjv9l")))

