(define-module (crates-io de no deno_webgpu) #:use-module (crates-io))

(define-public crate-deno_webgpu-0.1.0 (c (n "deno_webgpu") (v "0.1.0") (d (list (d (n "deno_core") (r "^0.80.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.1.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.7.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.7.0") (d #t) (k 0)))) (h "1pdscpaa01hs1qcssxavmx4szx0kqkxqgg5b5qv7r62jisjwjsgb")))

(define-public crate-deno_webgpu-0.1.1 (c (n "deno_webgpu") (v "0.1.1") (d (list (d (n "deno_core") (r "^0.80.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.1.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.7.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.7.0") (d #t) (k 0)))) (h "0w7zqp3j2i5bj3xc4x39qf6avyqynxys0m0p71d06n33hpry8zgp")))

(define-public crate-deno_webgpu-0.2.0 (c (n "deno_webgpu") (v "0.2.0") (d (list (d (n "deno_core") (r "^0.81.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.1.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.7.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.7.0") (d #t) (k 0)))) (h "0bsr5fwgdish4b361ip9d9xj83ndbqbxfg0n2hg1dv851jfn5c8b")))

(define-public crate-deno_webgpu-0.3.0 (c (n "deno_webgpu") (v "0.3.0") (d (list (d (n "deno_core") (r "^0.82.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.4.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.7.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.7.0") (d #t) (k 0)))) (h "1k3351pn6bcq4yb540hlngmmvqyr9xrh9fqdj24yphy2x02ncdk1")))

(define-public crate-deno_webgpu-0.3.1 (c (n "deno_webgpu") (v "0.3.1") (d (list (d (n "deno_core") (r "^0.83.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.4.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.7.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.7.0") (d #t) (k 0)))) (h "1mma6y6z04lhpi8b4pix8yb3dlv3dhazw5wdc7cajjycfd1q76c5")))

(define-public crate-deno_webgpu-0.4.0 (c (n "deno_webgpu") (v "0.4.0") (d (list (d (n "deno_core") (r "^0.84.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.4.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.7.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.7.0") (d #t) (k 0)))) (h "00bwqv1k70zjga4r1gd8a52r62a9fr543yxpajgb6j5bc1yz83zp")))

(define-public crate-deno_webgpu-0.5.0 (c (n "deno_webgpu") (v "0.5.0") (d (list (d (n "deno_core") (r "^0.85.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.4.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.7.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.7.0") (d #t) (k 0)))) (h "0dwc6yxlngzaay9iv2r4p4z14d2rxw5bpac081dz8w955za9fcdn")))

(define-public crate-deno_webgpu-0.6.0 (c (n "deno_webgpu") (v "0.6.0") (d (list (d (n "deno_core") (r "^0.86.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.4.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.7.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.7.0") (d #t) (k 0)))) (h "1y0prfmlrlxp4j4ps0k8vy3zd4rfcgnmi24bkqpppwizxmj3f4aj")))

(define-public crate-deno_webgpu-0.7.0 (c (n "deno_webgpu") (v "0.7.0") (d (list (d (n "deno_core") (r "^0.87.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.4.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.8.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.8.0") (d #t) (k 0)))) (h "121253glrnbdhwajsnrwwi1csx2bhpv8rrlpwxvxzjxyx75zymzr")))

(define-public crate-deno_webgpu-0.8.0 (c (n "deno_webgpu") (v "0.8.0") (d (list (d (n "deno_core") (r "^0.88.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.6.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.8.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.8.0") (d #t) (k 0)))) (h "1lr152sdv1zjkwlbq44q0iz12ra8i8dkflrkq3qyd9f625m7fzmq")))

(define-public crate-deno_webgpu-0.8.1 (c (n "deno_webgpu") (v "0.8.1") (d (list (d (n "deno_core") (r "^0.88.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.8.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.8.0") (d #t) (k 0)))) (h "0njwi4c9741hvmw0j3wj9y3pj22c39wcdkhck959jfr0flw7cihi")))

(define-public crate-deno_webgpu-0.9.0 (c (n "deno_webgpu") (v "0.9.0") (d (list (d (n "deno_core") (r "^0.89.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.8.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.8.0") (d #t) (k 0)))) (h "1flxmb9k232iinrv7k3raz6nirjrl8wdyigxpd2sdw6d5lwhjhj2")))

(define-public crate-deno_webgpu-0.10.0 (c (n "deno_webgpu") (v "0.10.0") (d (list (d (n "deno_core") (r "^0.90.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.8.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.8.0") (d #t) (k 0)))) (h "14yazl7pfqcr95z8igyysgq69wlyvikp0lrjyfg80bq7vy2zgndw")))

(define-public crate-deno_webgpu-0.11.0 (c (n "deno_webgpu") (v "0.11.0") (d (list (d (n "deno_core") (r "^0.91.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.7.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.8.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.8.0") (d #t) (k 0)))) (h "0qh2ni7jxs9amxrn7dj2j73i6zb2qdagq9hm1d6r1svilnjpr9hk")))

(define-public crate-deno_webgpu-0.11.1 (c (n "deno_webgpu") (v "0.11.1") (d (list (d (n "deno_core") (r "^0.91.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.125") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.7.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.8.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.8.0") (d #t) (k 0)))) (h "0mn9v3wibj7n0nrnwrpxzkyw0vnl78zj22923d58im4pd3ldfv15")))

(define-public crate-deno_webgpu-0.12.0 (c (n "deno_webgpu") (v "0.12.0") (d (list (d (n "deno_core") (r "^0.93.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.9.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.9.0") (d #t) (k 0)))) (h "12fqfic92hydp0vw5jahbydrjhszcqww379kvky7piyqdv421brp")))

(define-public crate-deno_webgpu-0.13.0 (c (n "deno_webgpu") (v "0.13.0") (d (list (d (n "deno_core") (r "^0.94.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.9.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.9.0") (d #t) (k 0)))) (h "0xpc3slv7awgn0hdlkz272hdl8m4xp084qih6xk9akklf6pfrwqd")))

(define-public crate-deno_webgpu-0.14.0 (c (n "deno_webgpu") (v "0.14.0") (d (list (d (n "deno_core") (r "^0.95.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.9.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.9.0") (d #t) (k 0)))) (h "0lwyr81ivf0fvh501sllsz77asxva6b06d1grggfqfqcwgnl0cpn")))

(define-public crate-deno_webgpu-0.15.0 (c (n "deno_webgpu") (v "0.15.0") (d (list (d (n "deno_core") (r "^0.96.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.9.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.9.0") (d #t) (k 0)))) (h "1clwvhinyjd57sj2hy89v6v80kfghynhfpva0c9ia0h5x1j1z2fk")))

(define-public crate-deno_webgpu-0.16.0 (c (n "deno_webgpu") (v "0.16.0") (d (list (d (n "deno_core") (r "^0.97.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.9.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.9.0") (d #t) (k 0)))) (h "1wbna016mpyrj51k67khph5216c18x47axpm9d2qdczwz663p1wf")))

(define-public crate-deno_webgpu-0.17.0 (c (n "deno_webgpu") (v "0.17.0") (d (list (d (n "deno_core") (r "^0.98.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.9.0") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.9.0") (d #t) (k 0)))) (h "0vfwzqfxnb6l6l2lxgp2vi5a6cnva9bdvz49499y4hdh8bh3n8ng")))

(define-public crate-deno_webgpu-0.18.0 (c (n "deno_webgpu") (v "0.18.0") (d (list (d (n "deno_core") (r "^0.99.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "0p03riyhz9fc9kcr3rpnl1idy101lkbp8f4fswjywyns6h8lr4mf")))

(define-public crate-deno_webgpu-0.19.0 (c (n "deno_webgpu") (v "0.19.0") (d (list (d (n "deno_core") (r "^0.100.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "1s5f1fs2bqchjj8jcmsfkdz7kvqhwclv1y2lbqd15mwr49jn49dn")))

(define-public crate-deno_webgpu-0.20.0 (c (n "deno_webgpu") (v "0.20.0") (d (list (d (n "deno_core") (r "^0.101.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "0yf5wqqjlcwh4pdcax77flaivzzzfpvyscg0s5ksn58w3l39dfy4")))

(define-public crate-deno_webgpu-0.21.0 (c (n "deno_webgpu") (v "0.21.0") (d (list (d (n "deno_core") (r "^0.102.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "08k6d6qb5nj0rnj9b4n8pw7cj3lrzxcpdpp9aj034m844nv7mmnw")))

(define-public crate-deno_webgpu-0.22.0 (c (n "deno_webgpu") (v "0.22.0") (d (list (d (n "deno_core") (r "^0.103.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "1wfbrlmql0333p8v0kj75q748a8fc4482ja3za6n7p5zf88drvnb")))

(define-public crate-deno_webgpu-0.23.0 (c (n "deno_webgpu") (v "0.23.0") (d (list (d (n "deno_core") (r "^0.104.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "1l8bvzklpyr8c4l9fvdjlrsm9mn0pn9cpm42vbiv27qvki46hjrl")))

(define-public crate-deno_webgpu-0.24.0 (c (n "deno_webgpu") (v "0.24.0") (d (list (d (n "deno_core") (r "^0.105.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "0f63n1zj4yckrswajpsh7wh8ks8cbg2q8d0xhwrap5zsqx86xwjw")))

(define-public crate-deno_webgpu-0.25.0 (c (n "deno_webgpu") (v "0.25.0") (d (list (d (n "deno_core") (r "^0.106.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "05jq1z8njki0af35fvkbxnixxnqdlb37spgkxwz1nidrgz393qrg")))

(define-public crate-deno_webgpu-0.26.0 (c (n "deno_webgpu") (v "0.26.0") (d (list (d (n "deno_core") (r "^0.107.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "0xrzxsv13av75zbbcg4xbmiz41ix8dkbb1r4zhwb7nh6gnldilzf")))

(define-public crate-deno_webgpu-0.27.0 (c (n "deno_webgpu") (v "0.27.0") (d (list (d (n "deno_core") (r "^0.108.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "1ys1mj55givcswc51zkf1k1nznh4sasf3xbii3nbgixsw70zjw7a")))

(define-public crate-deno_webgpu-0.28.0 (c (n "deno_webgpu") (v "0.28.0") (d (list (d (n "deno_core") (r "^0.109.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "1yhs7n33nkml5f9k0q1f78pfn3q958bxhjcg6qc7mlnki9yc5xgz")))

(define-public crate-deno_webgpu-0.29.0 (c (n "deno_webgpu") (v "0.29.0") (d (list (d (n "deno_core") (r "^0.110.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "1ni7rp5r4vbk1l7a184nggjsv2yalizv3q6m3637rdw4ifbyi8qi")))

(define-public crate-deno_webgpu-0.30.0 (c (n "deno_webgpu") (v "0.30.0") (d (list (d (n "deno_core") (r "^0.111.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "1k2si3h75z3mya48vadg74024d1n7hvi7nyrmhwqqhc750c6pxzp")))

(define-public crate-deno_webgpu-0.31.0 (c (n "deno_webgpu") (v "0.31.0") (d (list (d (n "deno_core") (r "^0.112.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "07pfyhsw4y96s09l1rjsjnabsd5i0hyixnni52jmnc8bj0pkqvcl")))

(define-public crate-deno_webgpu-0.32.0 (c (n "deno_webgpu") (v "0.32.0") (d (list (d (n "deno_core") (r "^0.113.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "1r5hy4siva3bq9brh9rh387k125n42ia0p150xv13za6m4nyil2l")))

(define-public crate-deno_webgpu-0.33.0 (c (n "deno_webgpu") (v "0.33.0") (d (list (d (n "deno_core") (r "^0.114.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "14r8m662501pzbhj8mj925v7c8nb74z32z5ccvrw0krdwpqqrxid")))

(define-public crate-deno_webgpu-0.35.0 (c (n "deno_webgpu") (v "0.35.0") (d (list (d (n "deno_core") (r "^0.116.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.129") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.10.1") (f (quote ("trace"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.10.0") (d #t) (k 0)))) (h "179gmv0rg4rigskb1z7nibq0vyfl2vqbggd7srwxixm5ii14vwy5")))

(define-public crate-deno_webgpu-0.36.0 (c (n "deno_webgpu") (v "0.36.0") (d (list (d (n "deno_core") (r "^0.117.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1qhdpqar7bk5kwncryw16bj3d14dphirxnk2qqbsv0hjrffjrll1")))

(define-public crate-deno_webgpu-0.37.0 (c (n "deno_webgpu") (v "0.37.0") (d (list (d (n "deno_core") (r "^0.118.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1f4yfsh3zwiz0yddn4raahvs9dhavvjqbgr4wwwccfb321bdlskc")))

(define-public crate-deno_webgpu-0.38.0 (c (n "deno_webgpu") (v "0.38.0") (d (list (d (n "deno_core") (r "^0.119.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "03j2bpc4g7l2sg1jnkn5c30jvsbsk91kz8p710j15q5za3rcyffm")))

(define-public crate-deno_webgpu-0.39.0 (c (n "deno_webgpu") (v "0.39.0") (d (list (d (n "deno_core") (r "^0.120.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "19ynbbqxrd3s6f77nzbxq90fpyvjkz9jjbcqps0chjw9mlk6x428")))

(define-public crate-deno_webgpu-0.40.0 (c (n "deno_webgpu") (v "0.40.0") (d (list (d (n "deno_core") (r "^0.121.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "00fb284d193y37hl1rd4q9cmj9rdw3lzk6xsgkbbwzb04hnkz2wp")))

(define-public crate-deno_webgpu-0.41.0 (c (n "deno_webgpu") (v "0.41.0") (d (list (d (n "deno_core") (r "^0.122.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "002azsna8p4kp0sygzb1cj3mfs1i5r90qn7izq5dj983ssaqshfs")))

(define-public crate-deno_webgpu-0.42.0 (c (n "deno_webgpu") (v "0.42.0") (d (list (d (n "deno_core") (r "^0.123.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0vkqk1pms6yhkj2f25iwa449drbhq0c4g6g7rafbah09nr2h5a16")))

(define-public crate-deno_webgpu-0.43.0 (c (n "deno_webgpu") (v "0.43.0") (d (list (d (n "deno_core") (r "^0.124.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "12hqb59d6p6v4h1ddk28mxgrpaad73g5r3jqqsa0h5d6dac6qfy2")))

(define-public crate-deno_webgpu-0.44.0 (c (n "deno_webgpu") (v "0.44.0") (d (list (d (n "deno_core") (r "^0.125.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1rwhjymd9isp1f2hdhwijifl20gancsz5ajq1fy86lfmym8lczwf")))

(define-public crate-deno_webgpu-0.45.0 (c (n "deno_webgpu") (v "0.45.0") (d (list (d (n "deno_core") (r "^0.126.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0w49w9c7if12dccdwxjymg3ipan838mzv612cz6k4z837kid5yyz")))

(define-public crate-deno_webgpu-0.46.0 (c (n "deno_webgpu") (v "0.46.0") (d (list (d (n "deno_core") (r "^0.127.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "11g33180gs2ysdc4j7zgh4axd6bm4w4qvgss8rmm60xdy7b3sb9j")))

(define-public crate-deno_webgpu-0.47.0 (c (n "deno_webgpu") (v "0.47.0") (d (list (d (n "deno_core") (r "^0.128.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0wy4k5j0g97vdr2pgdhrvr7f1a8r6rgjg7qw0adf88hc5cjygsf9")))

(define-public crate-deno_webgpu-0.48.0 (c (n "deno_webgpu") (v "0.48.0") (d (list (d (n "deno_core") (r "^0.129.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "04plksn3jpmjmv809fnk2aa9990ffbj6l4hz951hynahn530fciw")))

(define-public crate-deno_webgpu-0.49.0 (c (n "deno_webgpu") (v "0.49.0") (d (list (d (n "deno_core") (r "^0.130.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0y5ml01apy6f1n62g3z996sy25ffxih71w8ybn2lzzwkpnikdg66")))

(define-public crate-deno_webgpu-0.50.0 (c (n "deno_webgpu") (v "0.50.0") (d (list (d (n "deno_core") (r "^0.131.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1rbv0d3vj93x8q0b4h8fi44dn5fmdc9w8m1m1d10zwv2gbk1s86z")))

(define-public crate-deno_webgpu-0.51.0 (c (n "deno_webgpu") (v "0.51.0") (d (list (d (n "deno_core") (r "^0.132.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1q7m4rwsm22nd5fica00444zhs2qs34qa55x5p4lphv44ps4h4gs")))

(define-public crate-deno_webgpu-0.52.0 (c (n "deno_webgpu") (v "0.52.0") (d (list (d (n "deno_core") (r "^0.133.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "12ciqcwy89gcaicv2lmi5f6d9w12gb62ysjwqflf035808m4dcdw")))

(define-public crate-deno_webgpu-0.53.0 (c (n "deno_webgpu") (v "0.53.0") (d (list (d (n "deno_core") (r "^0.134.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "16gikc5h56m10rn6hn5nf5z3vl7v1c4p6c2cb7mngwfafj2kaby9")))

(define-public crate-deno_webgpu-0.54.0 (c (n "deno_webgpu") (v "0.54.0") (d (list (d (n "deno_core") (r "^0.135.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1lsi8pdixli3zj4gpv150rixqqvi68fnhmm1qfliij83f4305kkj")))

(define-public crate-deno_webgpu-0.55.0 (c (n "deno_webgpu") (v "0.55.0") (d (list (d (n "deno_core") (r "^0.136.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "14al2yjm7cg50s4qjy8r8xn9w630krgkmd36mm338nmhfnj6zxsm")))

(define-public crate-deno_webgpu-0.56.0 (c (n "deno_webgpu") (v "0.56.0") (d (list (d (n "deno_core") (r "^0.137.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0ih85phv1k6xinxamvr6gbcrf9ay7ilkxvv7iz2jagsqbzxvw7iw")))

(define-public crate-deno_webgpu-0.57.0 (c (n "deno_webgpu") (v "0.57.0") (d (list (d (n "deno_core") (r "^0.138.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0nzrsclh2fnyd808w5jaykgzmky4zkya3kn1ys64281rkx3m99bj")))

(define-public crate-deno_webgpu-0.58.0 (c (n "deno_webgpu") (v "0.58.0") (d (list (d (n "deno_core") (r "^0.139.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0m8a9jnjlriif613gf6n02ilq8kkycdpi43b02rdffdrv6y23zxk")))

(define-public crate-deno_webgpu-0.59.0 (c (n "deno_webgpu") (v "0.59.0") (d (list (d (n "deno_core") (r "^0.140.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "11rni7pccm8gbwca9qdjvizw6bfy2w3zp9yas3wdbn5g9d15dk2n")))

(define-public crate-deno_webgpu-0.60.0 (c (n "deno_webgpu") (v "0.60.0") (d (list (d (n "deno_core") (r "^0.141.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0lr986cvxrjd8s15vxp58ad4mgvwbvva72llx72zyhrhf0dsaddy")))

(define-public crate-deno_webgpu-0.61.0 (c (n "deno_webgpu") (v "0.61.0") (d (list (d (n "deno_core") (r "^0.142.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "03pvk0yld5c27yp9yswh6xiw3zlp5qvdz9gl920zg4965jkigxyg")))

(define-public crate-deno_webgpu-0.62.0 (c (n "deno_webgpu") (v "0.62.0") (d (list (d (n "deno_core") (r "^0.143.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.12") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1pakvw1ghspz6p5f35yi9r4g9hn8k1c4n2dv1qwp3zhf9n4zii6h")))

(define-public crate-deno_webgpu-0.63.0 (c (n "deno_webgpu") (v "0.63.0") (d (list (d (n "deno_core") (r "^0.144.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1f0n04bv5njpnckkys88bw6cwvvh166q008hckhcb3zygqpzyhbz")))

(define-public crate-deno_webgpu-0.64.0 (c (n "deno_webgpu") (v "0.64.0") (d (list (d (n "deno_core") (r "^0.145.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1mr3izsmjg1fsn09i2axxyllhsp2bllnizzdvqdwmfigjd74y1yg")))

(define-public crate-deno_webgpu-0.65.0 (c (n "deno_webgpu") (v "0.65.0") (d (list (d (n "deno_core") (r "^0.146.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0ms63qz0xnrz1af7w32zhha9jq1xm7inyjvfqah8fdx9lzgmfw4m")))

(define-public crate-deno_webgpu-0.66.0 (c (n "deno_webgpu") (v "0.66.0") (d (list (d (n "deno_core") (r "^0.147.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1lmff8wj2pqlfq45x7fpk8nr6jimd7bbc0hzbzwjznwsm4z3yfnp")))

(define-public crate-deno_webgpu-0.67.0 (c (n "deno_webgpu") (v "0.67.0") (d (list (d (n "deno_core") (r "^0.148.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0w4dgp7w1v7j8b7ncc1f3n06xj2p3z49njmafggwsn8l5wbk28al")))

(define-public crate-deno_webgpu-0.68.0 (c (n "deno_webgpu") (v "0.68.0") (d (list (d (n "deno_core") (r "^0.149.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "09d0sxyamvkpd07c47l4v1f1l68x4nbmyjjpqs7ni87qy07i1gbp")))

(define-public crate-deno_webgpu-0.69.0 (c (n "deno_webgpu") (v "0.69.0") (d (list (d (n "deno_core") (r "^0.150.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0kyrhrj9qs43yq9mz6n0yb8ah97k6xxx57qk5cv3jy73mw35b5d2")))

(define-public crate-deno_webgpu-0.70.0 (c (n "deno_webgpu") (v "0.70.0") (d (list (d (n "deno_core") (r "^0.151.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.17") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0pvi0lxwqn71zdgvx5by1r46rgk81djihgw8hqk56bsp3bfmmf2i")))

(define-public crate-deno_webgpu-0.71.0 (c (n "deno_webgpu") (v "0.71.0") (d (list (d (n "deno_core") (r "^0.152.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0j61nkpl376a3d5d274xc67z4kx2javhrzfiyf78p70zvqasi0z4")))

(define-public crate-deno_webgpu-0.72.0 (c (n "deno_webgpu") (v "0.72.0") (d (list (d (n "deno_core") (r "^0.153.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0dd703zyawwqylvii5f71bq9c27p1mf5947mck2r05vky5xk76ra")))

(define-public crate-deno_webgpu-0.73.0 (c (n "deno_webgpu") (v "0.73.0") (d (list (d (n "deno_core") (r "^0.154.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0k6ghvvibxvj9r5rq2asf71lhc7lm92i7x5v5b34ngdigh3xqgrv")))

(define-public crate-deno_webgpu-0.74.0 (c (n "deno_webgpu") (v "0.74.0") (d (list (d (n "deno_core") (r "^0.155.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0yvc27kwdvz54lq7ql64q47yx3zxyndkkl2qgf944azmjfjnim4b")))

(define-public crate-deno_webgpu-0.75.0 (c (n "deno_webgpu") (v "0.75.0") (d (list (d (n "deno_core") (r "^0.156.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1s4y7x845kpqkj2vplqw3rn96qvhzm5lb70f97jz60cm62c0pncp")))

(define-public crate-deno_webgpu-0.76.0 (c (n "deno_webgpu") (v "0.76.0") (d (list (d (n "deno_core") (r "^0.157.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0a5qgglj1glczxlccmknj51nhhp5swwk2lqmank0jv82zn60dywb")))

(define-public crate-deno_webgpu-0.77.0 (c (n "deno_webgpu") (v "0.77.0") (d (list (d (n "deno_core") (r "^0.158.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1rxkxclsdznjbmis8dwd8hwm3grzq7jdkl3d3hf0wgjafl2m0769")))

(define-public crate-deno_webgpu-0.78.0 (c (n "deno_webgpu") (v "0.78.0") (d (list (d (n "deno_core") (r "^0.159.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0323rsb3whkp7nd4g19jjhz8vwazpy2h8sqh2jvvf7asr833q592")))

(define-public crate-deno_webgpu-0.79.0 (c (n "deno_webgpu") (v "0.79.0") (d (list (d (n "deno_core") (r "^0.160.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0kc5l2vakf9padawgx2adc4c2pscj5fy2nc8gfwrd65w1y95qbgd")))

(define-public crate-deno_webgpu-0.80.0 (c (n "deno_webgpu") (v "0.80.0") (d (list (d (n "deno_core") (r "^0.161.0") (d #t) (k 0)) (d (n "serde") (r "=1.0.144") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.21.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0xlgdddqwv4pdjywsgwaq117as60dc4mvfs35ahzfi1a49ms8lrx")))

(define-public crate-deno_webgpu-0.81.0 (c (n "deno_webgpu") (v "0.81.0") (d (list (d (n "deno_core") (r "^0.162.0") (d #t) (k 0)) (d (n "serde") (r "=1.0.144") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.21.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0lkdpq140a8x6g3h37lcjnv1f7cxwfbg9ha37bhpy4mhl36nn4lw")))

(define-public crate-deno_webgpu-0.82.0 (c (n "deno_webgpu") (v "0.82.0") (d (list (d (n "deno_core") (r "^0.163.0") (d #t) (k 0)) (d (n "serde") (r "=1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.21.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1jyj0kz6b0vwb2f6x0hc65zi2dnbx3dhy0zb6hf7kgwdf15zsky8")))

(define-public crate-deno_webgpu-0.83.0 (c (n "deno_webgpu") (v "0.83.0") (d (list (d (n "deno_core") (r "^0.164.0") (d #t) (k 0)) (d (n "serde") (r "=1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.21.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1hlqmf9m7llwldxj87x01wfd7npxnx1aipzj3ymg5hd4c40a2c1d")))

(define-public crate-deno_webgpu-0.84.0 (c (n "deno_webgpu") (v "0.84.0") (d (list (d (n "deno_core") (r "^0.165.0") (d #t) (k 0)) (d (n "serde") (r "=1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.21.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0h5akvm5lzank40lisvv8pdxxv2dy8x5lxwr10bxk2z55z279g5s")))

(define-public crate-deno_webgpu-0.85.0 (c (n "deno_webgpu") (v "0.85.0") (d (list (d (n "deno_core") (r "^0.166.0") (d #t) (k 0)) (d (n "serde") (r "=1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1219240p0hm6sr1acnxw7sz4hxybfq3a9gprvcqywsclc8yxbfi2")))

(define-public crate-deno_webgpu-0.86.0 (c (n "deno_webgpu") (v "0.86.0") (d (list (d (n "deno_core") (r "^0.167.0") (d #t) (k 0)) (d (n "serde") (r "=1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0h6860pm31iccxbjxkj7v8cbgkj3r2hib2siivhfpdqhjn4pmkqx")))

(define-public crate-deno_webgpu-0.87.0 (c (n "deno_webgpu") (v "0.87.0") (d (list (d (n "deno_core") (r "^0.168.0") (d #t) (k 0)) (d (n "serde") (r "=1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1rqmgzaxxid06d9mr6cm667bq85mnrjl9bsl4ijfnyrm06jx770b")))

(define-public crate-deno_webgpu-0.88.0 (c (n "deno_webgpu") (v "0.88.0") (d (list (d (n "deno_core") (r "^0.169.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0jp38101b04j80iwr8i8vjc3r9wvlmdk0h1yfxmg2f23jxrfg7k4") (s 2) (e (quote (("surface" "wgpu-core/raw-window-handle" "dep:raw-window-handle"))))))

(define-public crate-deno_webgpu-0.89.0 (c (n "deno_webgpu") (v "0.89.0") (d (list (d (n "deno_core") (r "^0.170.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1xv3m18l3ah7m52c679rl5af3w9kr61bdi58rd9h55izfpr185m6") (s 2) (e (quote (("surface" "wgpu-core/raw-window-handle" "dep:raw-window-handle"))))))

(define-public crate-deno_webgpu-0.90.0 (c (n "deno_webgpu") (v "0.90.0") (d (list (d (n "deno_core") (r "^0.171.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0byg1cki76dl9l9q1hddddr5a4wk5midq24d0npyv9nwp9q0qhrv") (s 2) (e (quote (("surface" "wgpu-core/raw-window-handle" "dep:raw-window-handle"))))))

(define-public crate-deno_webgpu-0.91.0 (c (n "deno_webgpu") (v "0.91.0") (d (list (d (n "deno_core") (r "^0.172.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.25.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "1fmvdwq3acnm1c5953dfib579067nk88slvh2162n19rd3zlhi21") (s 2) (e (quote (("surface" "wgpu-core/raw-window-handle" "dep:raw-window-handle"))))))

(define-public crate-deno_webgpu-0.92.0 (c (n "deno_webgpu") (v "0.92.0") (d (list (d (n "deno_core") (r "^0.173.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.25.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0b1imnf83agi6vph28qhb9222b93w7rfv9xf3v7x65amd47nw1lk") (s 2) (e (quote (("surface" "wgpu-core/raw-window-handle" "dep:raw-window-handle"))))))

(define-public crate-deno_webgpu-0.93.0 (c (n "deno_webgpu") (v "0.93.0") (d (list (d (n "deno_core") (r "^0.174.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.25.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "147vw3hin1dlnhyinpvbrdlf0shzxdgzijxyg01654bz4rkqgzyy") (s 2) (e (quote (("surface" "wgpu-core/raw-window-handle" "dep:raw-window-handle"))))))

(define-public crate-deno_webgpu-0.94.0 (c (n "deno_webgpu") (v "0.94.0") (d (list (d (n "deno_core") (r "^0.175.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.25.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "16i7zscwgdkfdd34mhqb895gb1zm7w9srprj393p6xi02vbxf0pw") (s 2) (e (quote (("surface" "wgpu-core/raw-window-handle" "dep:raw-window-handle"))))))

(define-public crate-deno_webgpu-0.95.0 (c (n "deno_webgpu") (v "0.95.0") (d (list (d (n "deno_core") (r "^0.238.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0v38khzmywirc2jwc6sjbxlyq36nvhpmdkb34n5gzrx01wdw0jgz") (s 2) (e (quote (("surface" "wgpu-core/raw-window-handle" "dep:raw-window-handle"))))))

(define-public crate-deno_webgpu-0.96.0 (c (n "deno_webgpu") (v "0.96.0") (d (list (d (n "deno_core") (r "^0.238.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1kas6c1jnclkl4fkzhcf2r7cwhskxa6c7nsywnpkkqw42bklvd2c") (s 2) (e (quote (("surface" "wgpu-core/raw-window-handle" "dep:raw-window-handle"))))))

(define-public crate-deno_webgpu-0.97.0 (c (n "deno_webgpu") (v "0.97.0") (d (list (d (n "deno_core") (r "^0.243.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1riswjf4sq66g8zczqsgfy0mbdr771y8ggg0fpy2406zbb4hbf26") (s 2) (e (quote (("surface" "wgpu-core/raw-window-handle" "dep:raw-window-handle"))))))

(define-public crate-deno_webgpu-0.98.0 (c (n "deno_webgpu") (v "0.98.0") (d (list (d (n "deno_core") (r "^0.245.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "130zds27zkb2gsy9h7jf39nmhkr6f7g2m7b4s3mlz98sr1pg8cai")))

(define-public crate-deno_webgpu-0.99.0 (c (n "deno_webgpu") (v "0.99.0") (d (list (d (n "deno_core") (r "^0.245.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0axi9aw3y58ab8ycamhxalgjz302y56vxlx073qfvclbg9z6li7i")))

(define-public crate-deno_webgpu-0.100.0 (c (n "deno_webgpu") (v "0.100.0") (d (list (d (n "deno_core") (r "^0.249.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1fgp83vzh0l8snahq49z2ln1a2294zzmcvk18z8m4085fqfrsv5g")))

(define-public crate-deno_webgpu-0.101.0 (c (n "deno_webgpu") (v "0.101.0") (d (list (d (n "deno_core") (r "^0.249.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "065vwpifpnh384kbvps7g4dblppmf8dg5w9gl2rpr83ig2a2h6lw")))

(define-public crate-deno_webgpu-0.102.0 (c (n "deno_webgpu") (v "0.102.0") (d (list (d (n "deno_core") (r "^0.254.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1nizwifc9qjxi342lkk93pns85yssb7nsjk5xk3bgb6w28z5a3vk")))

(define-public crate-deno_webgpu-0.103.0 (c (n "deno_webgpu") (v "0.103.0") (d (list (d (n "deno_core") (r "^0.256.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "10qj7l84rj2gc3zj6prqy0lknp7v6947hhs5jgkc7qi4pkl73w8f")))

(define-public crate-deno_webgpu-0.104.0 (c (n "deno_webgpu") (v "0.104.0") (d (list (d (n "deno_core") (r "^0.260.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "12vi93px24jc0yc4dp33nwf8zka8a6x7z0h50i2azab451wbrl9n")))

(define-public crate-deno_webgpu-0.105.0 (c (n "deno_webgpu") (v "0.105.0") (d (list (d (n "deno_core") (r "^0.262.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "041755mn8bgmgfl606gzl6qs0pvgd395hg02mbrhhc9wmbahznbd")))

(define-public crate-deno_webgpu-0.106.0 (c (n "deno_webgpu") (v "0.106.0") (d (list (d (n "deno_core") (r "^0.264.0") (f (quote ("snapshot_data_bincode"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "08kzkmdvinsl4xbv1vs5lbqk8js04s71gi9sc4yj538vj8f7q3am")))

(define-public crate-deno_webgpu-0.107.0 (c (n "deno_webgpu") (v "0.107.0") (d (list (d (n "deno_core") (r "^0.265.0") (f (quote ("snapshot_data_bincode"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1mf3bz5y0j78cmivg92nikz1a4ns17g6naayznzq3052g01n1b9w")))

(define-public crate-deno_webgpu-0.108.0 (c (n "deno_webgpu") (v "0.108.0") (d (list (d (n "deno_core") (r "^0.269.0") (f (quote ("lazy_eval_snapshot"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0b1dc6q1vrwmn8r38xd7225v1lkhcyjp8cpqlacfgfjbj71aq6z0")))

(define-public crate-deno_webgpu-0.109.0 (c (n "deno_webgpu") (v "0.109.0") (d (list (d (n "deno_core") (r "^0.270.0") (f (quote ("lazy_eval_snapshot"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1bryp6l4rmfm9q1bqjb8h8p3nbwn0mgqgg5ncb4rb6jqi9knnwiq")))

(define-public crate-deno_webgpu-0.110.0 (c (n "deno_webgpu") (v "0.110.0") (d (list (d (n "deno_core") (r "^0.272.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0kfx23963ahqsn9709d4jjfrfrz9w72c0fkswyg4nn4hiaskfk3r")))

(define-public crate-deno_webgpu-0.111.0 (c (n "deno_webgpu") (v "0.111.0") (d (list (d (n "deno_core") (r "^0.272.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0cqnggpyjqq6xmbbyszvs2zr28l69dbplgzv40n5vw05sy6ldh14")))

(define-public crate-deno_webgpu-0.112.0 (c (n "deno_webgpu") (v "0.112.0") (d (list (d (n "deno_core") (r "^0.272.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1m3r3pwdlshj97xmv1z18n4n2g5cx3ksn9vrqaq0401qakqp2dzl")))

(define-public crate-deno_webgpu-0.113.0 (c (n "deno_webgpu") (v "0.113.0") (d (list (d (n "deno_core") (r "^0.272.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1jb5r8if71gppkcfaa1yr3sg5036wxmlql28vbv77p06b2k38gb6")))

(define-public crate-deno_webgpu-0.114.0 (c (n "deno_webgpu") (v "0.114.0") (d (list (d (n "deno_core") (r "^0.275.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0qlb9lbcd531f77f6r35rzi9gx8yfinyyr3zwlglcqpq5i4fiqqg")))

(define-public crate-deno_webgpu-0.115.0 (c (n "deno_webgpu") (v "0.115.0") (d (list (d (n "deno_core") (r "^0.278.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1qs2md3c2k35r583v3nij6njr3caw1wx0101aq6jvck83h90df8c") (y #t)))

(define-public crate-deno_webgpu-0.116.0 (c (n "deno_webgpu") (v "0.116.0") (d (list (d (n "deno_core") (r "^0.278.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "=0.18") (f (quote ("raw-window-handle" "dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "=0.18") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "=0.18") (f (quote ("trace" "replay" "serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "06mwj4k5d2yrm650lg9pd7136q5gdn9q7yscm8wkxmaj1c89m6pa")))

(define-public crate-deno_webgpu-0.117.0 (c (n "deno_webgpu") (v "0.117.0") (d (list (d (n "deno_core") (r "^0.279.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "^0.20") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.20") (f (quote ("serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0zjr94iv941agzvy44hfisffdqww756rjnz17nmnxqrarnw56p8i")))

(define-public crate-deno_webgpu-0.118.0 (c (n "deno_webgpu") (v "0.118.0") (d (list (d (n "deno_core") (r "^0.280.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-hal") (r "^0.20") (f (quote ("windows_rs"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.20") (f (quote ("serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1qr2rr3kp7sic6vsl6ns24im5b1a0j225a307qsxrg2k69s5xakn")))

(define-public crate-deno_webgpu-0.119.0 (c (n "deno_webgpu") (v "0.119.0") (d (list (d (n "deno_core") (r "^0.280.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.20") (f (quote ("serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "035wmpa6f19hkmpfvzyhvm60d3qnr5x31mh07is1jfwwyvpngs5g")))

(define-public crate-deno_webgpu-0.120.0 (c (n "deno_webgpu") (v "0.120.0") (d (list (d (n "deno_core") (r "^0.280.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.20") (f (quote ("serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0saw4r644r4cv6pdrhp81x5sibw6c43ijr176l3gzxfrpb6hgj55")))

(define-public crate-deno_webgpu-0.121.0 (c (n "deno_webgpu") (v "0.121.0") (d (list (d (n "deno_core") (r "^0.283.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.20") (f (quote ("serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1ban0h1m9ai4sn9ip3128v1wak3ca37z6bbkp2czmfkrccmwq0id")))

(define-public crate-deno_webgpu-0.122.0 (c (n "deno_webgpu") (v "0.122.0") (d (list (d (n "deno_core") (r "^0.284.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "raw-window-handle") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive" "derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full" "full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("raw-window-handle" "trace" "replay" "serde" "strict_asserts" "wgsl" "gles"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wgpu-core") (r "^0.20") (f (quote ("dx12"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "wgpu-types") (r "^0.20") (f (quote ("serde"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0y3ydb8zymkvw5a74h86s7yzaw6wjnzrc0hdsn4vd7mdg3cynvzh")))

