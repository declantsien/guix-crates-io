(define-module (crates-io de no denox_webgpu) #:use-module (crates-io))

(define-public crate-denox_webgpu-0.1.0 (c (n "denox_webgpu") (v "0.1.0") (d (list (d (n "deno_core") (r "^0.168.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "=1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.13") (f (quote ("trace" "replay" "serde" "raw-window-handle"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.13") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)))) (h "0f5g7adbvjml1l3vdf7rff9d7s1j4v9jzi4kynrp3lgzgkw89cvg")))

(define-public crate-denox_webgpu-0.2.0 (c (n "denox_webgpu") (v "0.2.0") (d (list (d (n "deno_core") (r "^0.168.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (k 0)) (d (n "serde") (r "=1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles" "raw-window-handle"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)))) (h "1s3mxpa0jh674860cncfh6iszz85gmprdpng845x8hzwbpcmasmh")))

(define-public crate-denox_webgpu-0.2.1 (c (n "denox_webgpu") (v "0.2.1") (d (list (d (n "deno_core") (r "^0.168.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (k 0)) (d (n "serde") (r "=1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles" "raw-window-handle"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)))) (h "19lmagpi8msc59dq35rv83brq46ar9iml7czg0a07vnswg3cbsdz")))

(define-public crate-denox_webgpu-0.3.0 (c (n "denox_webgpu") (v "0.3.0") (d (list (d (n "deno_core") (r "^0.170.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles" "raw-window-handle"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)))) (h "1c9kl91iagh8s3iidnz2z59226nsmqi5j7a93hln2zjhmk86j0ai")))

(define-public crate-denox_webgpu-0.3.1 (c (n "denox_webgpu") (v "0.3.1") (d (list (d (n "deno_core") (r "^0.170.0") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.149") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "=1.24.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("trace" "replay" "serde" "strict_asserts" "wgsl" "gles" "raw-window-handle"))) (d #t) (k 0)) (d (n "wgpu-types") (r "^0.15") (f (quote ("trace" "replay" "serde"))) (d #t) (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"))))") (k 0)) (d (n "wgpu-core") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0)))) (h "1hgmyg0bm34qmcnyvg3s580l5a8n32zz5681y9j0fgq2vg89ylhm")))

