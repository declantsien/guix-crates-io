(define-module (crates-io de nd dendrite_lib) #:use-module (crates-io))

(define-public crate-dendrite_lib-0.7.0 (c (n "dendrite_lib") (v "0.7.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-lock") (r "^2.3") (d #t) (k 0)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru") (r "^0.6") (d #t) (k 0)) (d (n "prost") (r "^0.7") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("macros" "time"))) (d #t) (k 0)) (d (n "tonic") (r "^0.4") (d #t) (k 0)) (d (n "tonic-build") (r "^0.4") (d #t) (k 1)) (d (n "uuid") (r "^0.8.2") (f (quote ("v4"))) (d #t) (k 0)))) (h "1v8rwc4bs39w0jgkaz5b36gr7r7kfb01vkywm9746m09g7il3jnr")))

(define-public crate-dendrite_lib-0.8.0 (c (n "dendrite_lib") (v "0.8.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-lock") (r "^2.3") (d #t) (k 0)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru") (r "^0.6") (d #t) (k 0)) (d (n "prost") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("macros" "time"))) (d #t) (k 0)) (d (n "tonic") (r "^0.4") (d #t) (k 0)) (d (n "tonic-build") (r "^0.4") (d #t) (k 1)) (d (n "uuid") (r "^0.8.2") (f (quote ("v4"))) (d #t) (k 0)))) (h "08c4fdybbjmb1ar7izl8kkdsj9pb3sp26vvi048s0dsr3993d50z")))

(define-public crate-dendrite_lib-0.9.0 (c (n "dendrite_lib") (v "0.9.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-lock") (r "^2.3") (d #t) (k 0)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru") (r "^0.6") (d #t) (k 0)) (d (n "prost") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "~1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("macros" "time"))) (d #t) (k 0)) (d (n "tonic") (r "^0.4") (d #t) (k 0)) (d (n "tonic-build") (r "^0.4") (d #t) (k 1)) (d (n "uuid") (r "^0.8.2") (f (quote ("v4"))) (d #t) (k 0)))) (h "00l8sb2ill2z3r81amkpr40g4kbwhp1qfij9qzznq16bp4sd7vc3")))

(define-public crate-dendrite_lib-0.10.1 (c (n "dendrite_lib") (v "0.10.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-lock") (r "^2.3") (d #t) (k 0)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru") (r "^0.6") (d #t) (k 0)) (d (n "prost") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "~1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("macros" "time"))) (d #t) (k 0)) (d (n "tonic") (r "^0.4") (d #t) (k 0)) (d (n "tonic-build") (r "^0.4") (d #t) (k 1)) (d (n "uuid") (r "^0.8.2") (f (quote ("v4"))) (d #t) (k 0)))) (h "0his1lr84sg5add49rjnbvfmnpkppcwp07xyhncsxcycc7a38zja")))

(define-public crate-dendrite_lib-0.11.0 (c (n "dendrite_lib") (v "0.11.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-lock") (r "^2.3") (d #t) (k 0)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru") (r "^0.8") (d #t) (k 0)) (d (n "mockall") (r "^0.11") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "~1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("macros" "time"))) (d #t) (k 0)) (d (n "tonic") (r "^0.8") (d #t) (k 0)) (d (n "tonic-build") (r "^0.8") (d #t) (k 1)) (d (n "tower") (r "^0.4") (d #t) (k 0)) (d (n "uuid") (r "^1.2") (f (quote ("v4"))) (d #t) (k 0)))) (h "02bjhdg0j2jr0mvvifchslafmzyhl8wm37db209rdw2css5x0250")))

(define-public crate-dendrite_lib-0.12.0 (c (n "dendrite_lib") (v "0.12.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-channel") (r "^1.7") (d #t) (k 0)) (d (n "async-lock") (r "^2.3") (d #t) (k 0)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru") (r "^0.8") (d #t) (k 0)) (d (n "mockall") (r "^0.11") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "~1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("macros" "time" "signal"))) (d #t) (k 0)) (d (n "tonic") (r "^0.8") (d #t) (k 0)) (d (n "tonic-build") (r "^0.8") (d #t) (k 1)) (d (n "tower") (r "^0.4") (d #t) (k 0)) (d (n "uuid") (r "^1.2") (f (quote ("v4"))) (d #t) (k 0)))) (h "0k84ngl1wk5763c9gcb2rax6l36slsc70ma5navqs7mlqxf8sda5")))

(define-public crate-dendrite_lib-0.13.0 (c (n "dendrite_lib") (v "0.13.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-channel") (r "^1.7") (d #t) (k 0)) (d (n "async-lock") (r "^2.3") (d #t) (k 0)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru") (r "^0.8") (d #t) (k 0)) (d (n "mockall") (r "^0.11") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "~1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("macros" "time" "signal"))) (d #t) (k 0)) (d (n "tonic") (r "^0.8") (d #t) (k 0)) (d (n "tonic-build") (r "^0.8") (d #t) (k 1)) (d (n "tower") (r "^0.4") (d #t) (k 0)) (d (n "uuid") (r "^1.2") (f (quote ("v4"))) (d #t) (k 0)))) (h "0fc457255wwdc4rkbfzqphs8a8mf0mii3q3x6j337iqnpzb0z8y7")))

(define-public crate-dendrite_lib-0.14.0 (c (n "dendrite_lib") (v "0.14.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-channel") (r "^2.1") (d #t) (k 0)) (d (n "async-lock") (r "^3.0") (d #t) (k 0)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru") (r "^0.12") (d #t) (k 0)) (d (n "mockall") (r "^0.12") (d #t) (k 0)) (d (n "prost") (r "^0.12") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "~1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("macros" "time" "signal"))) (d #t) (k 0)) (d (n "tonic") (r "^0.10") (d #t) (k 0)) (d (n "tonic-build") (r "^0.10") (d #t) (k 1)) (d (n "tower") (r "^0.4") (d #t) (k 0)) (d (n "uuid") (r "^1.2") (f (quote ("v4"))) (d #t) (k 0)))) (h "1rf07ckh93n333zwi2kyh6lq1sr4fgy5l5z83fw4034370xzkfr8")))

(define-public crate-dendrite_lib-0.14.1 (c (n "dendrite_lib") (v "0.14.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-channel") (r "^2.1") (d #t) (k 0)) (d (n "async-lock") (r "^3.0") (d #t) (k 0)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru") (r "^0.12") (d #t) (k 0)) (d (n "mockall") (r "^0.12") (d #t) (k 0)) (d (n "prost") (r "^0.12") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "~1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("macros" "time" "signal"))) (d #t) (k 0)) (d (n "tonic") (r "^0.10") (d #t) (k 0)) (d (n "tonic-build") (r "^0.10") (d #t) (k 1)) (d (n "tower") (r "^0.4") (d #t) (k 0)) (d (n "uuid") (r "^1.2") (f (quote ("v4"))) (d #t) (k 0)))) (h "145v33syj123q624iq9kplmzakrv1yzqrk9vnfly15gi2b2zsi2s")))

