(define-module (crates-io de ve devela_depend) #:use-module (crates-io))

(define-public crate-devela_depend-0.1.0 (c (n "devela_depend") (v "0.1.0") (d (list (d (n "atomic") (r "^0.6.0") (f (quote ("fallback"))) (o #t) (k 0)) (d (n "az") (r "^1.2.1") (o #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (k 0)) (d (n "const-str") (r "^0.5.6") (o #t) (k 0)) (d (n "devela_macros") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.4.3") (f (quote ("fallback" "float"))) (o #t) (k 0)) (d (n "unicode-segmentation") (r "^1.10.1") (o #t) (k 0)))) (h "0jmk0k3yhpd0v64lfx2fg4iydkd6xjkwyk0s7d2z3lvx709z2423") (f (quote (("unsafest" "unsafe") ("unsafe") ("safest" "safe") ("safe") ("no_std") ("nightly_docs" "nightly" "full" "std" "unsafe") ("nightly") ("full" "atomic" "az" "bytemuck" "devela_macros" "portable-atomic" "const-str" "unicode-segmentation")))) (s 2) (e (quote (("std" "alloc" "atomic?/std" "bytemuck?/extern_crate_std") ("alloc" "bytemuck?/extern_crate_alloc")))) (r "1.72.1")))

(define-public crate-devela_depend-0.1.1 (c (n "devela_depend") (v "0.1.1") (d (list (d (n "atomic") (r "^0.6.0") (f (quote ("fallback"))) (o #t) (k 0)) (d (n "az") (r "^1.2.1") (o #t) (k 0)) (d (n "bytemuck") (r "^1.14.0") (f (quote ("align_offset" "min_const_generics" "must_cast" "zeroable_maybe_uninit"))) (o #t) (k 0)) (d (n "const-str") (r "^0.5.6") (o #t) (k 0)) (d (n "devela_macros") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.14.1") (f (quote ("ahash" "inline-more"))) (o #t) (k 0)) (d (n "portable-atomic") (r "^1.4.3") (f (quote ("fallback" "float"))) (o #t) (k 0)) (d (n "unicode-segmentation") (r "^1.10.1") (o #t) (k 0)))) (h "0pnx4fz3q9px8qyz30kiyg95qfhn4jbqklk88yimd7lyh8pk4sij") (f (quote (("unsafest" "unsafe") ("unsafe") ("safest" "safe") ("safe") ("no_std") ("nightly_docs" "nightly" "full" "std" "unsafe") ("nightly") ("full" "atomic" "az" "bytemuck" "devela_macros" "hashbrown" "portable-atomic" "const-str" "unicode-segmentation")))) (s 2) (e (quote (("std" "alloc" "atomic?/std" "bytemuck?/extern_crate_std") ("alloc" "bytemuck?/extern_crate_alloc")))) (r "1.72.1")))

(define-public crate-devela_depend-0.1.2 (c (n "devela_depend") (v "0.1.2") (d (list (d (n "atomic") (r "^0.6.0") (f (quote ("fallback"))) (o #t) (k 0)) (d (n "az") (r "^1.2.1") (o #t) (k 0)) (d (n "bytemuck") (r "^1.14.0") (f (quote ("align_offset" "min_const_generics" "must_cast" "zeroable_maybe_uninit"))) (o #t) (k 0)) (d (n "const-str") (r "^0.5.6") (o #t) (k 0)) (d (n "devela_macros") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.14.1") (f (quote ("ahash" "inline-more"))) (o #t) (k 0)) (d (n "libm") (r "^0.2.8") (o #t) (k 0)) (d (n "portable-atomic") (r "^1.4.3") (f (quote ("fallback" "float"))) (o #t) (k 0)) (d (n "unicode-segmentation") (r "^1.10.1") (o #t) (k 0)))) (h "1820b1w0yvp1m5mh00zv0ksxh9y8bj533y2liakn8921274ms2hs") (f (quote (("unsafest" "unsafe") ("unsafe") ("safest" "safe") ("safe") ("no_std") ("nightly_docs" "nightly" "full" "std" "unsafe") ("nightly") ("full" "atomic" "az" "bytemuck" "const-str" "devela_macros" "hashbrown" "libm" "portable-atomic" "unicode-segmentation")))) (s 2) (e (quote (("std" "alloc" "atomic?/std" "bytemuck?/extern_crate_std") ("alloc" "bytemuck?/extern_crate_alloc")))) (r "1.72.1")))

(define-public crate-devela_depend-0.2.0 (c (n "devela_depend") (v "0.2.0") (d (list (d (n "atomic") (r "^0.6.0") (f (quote ("fallback"))) (o #t) (k 0)) (d (n "az") (r "^1.2.1") (o #t) (k 0)) (d (n "bytemuck") (r "^1.14.0") (f (quote ("align_offset" "min_const_generics" "must_cast" "zeroable_maybe_uninit"))) (o #t) (k 0)) (d (n "const-str") (r "^0.5.6") (o #t) (k 0)) (d (n "hashbrown") (r "^0.14.1") (f (quote ("ahash" "inline-more"))) (o #t) (k 0)) (d (n "libm") (r "^0.2.8") (o #t) (k 0)) (d (n "portable-atomic") (r "^1.4.3") (f (quote ("fallback" "float"))) (o #t) (k 0)) (d (n "unicode-segmentation") (r "^1.10.1") (o #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (o #t) (k 0)))) (h "0qph8vp00b1s03mchl7drm8s5zwlyapngrda50nchxcs736d7y5x") (f (quote (("unsafest" "unsafe") ("unsafe") ("safest" "safe") ("safe") ("no_std") ("nightly") ("full" "atomic" "az" "bytemuck" "const-str" "hashbrown" "libm" "portable-atomic" "unicode-segmentation" "unicode-width") ("docsrs" "nightly" "full" "std" "unsafe")))) (s 2) (e (quote (("std" "alloc" "atomic?/std" "bytemuck?/extern_crate_std") ("alloc" "bytemuck?/extern_crate_alloc")))) (r "1.72.1")))

(define-public crate-devela_depend-0.3.0 (c (n "devela_depend") (v "0.3.0") (d (list (d (n "atomic") (r "^0.6.0") (f (quote ("fallback"))) (o #t) (k 0)) (d (n "az") (r "^1.2.1") (o #t) (k 0)) (d (n "bytemuck") (r "^1.14.0") (f (quote ("align_offset" "min_const_generics" "must_cast" "zeroable_maybe_uninit"))) (o #t) (k 0)) (d (n "const-str") (r "^0.5.6") (o #t) (k 0)) (d (n "hashbrown") (r "^0.14.1") (f (quote ("ahash" "inline-more"))) (o #t) (k 0)) (d (n "libm") (r "^0.2.8") (o #t) (k 0)) (d (n "memchr") (r "^2.7.1") (o #t) (k 0)) (d (n "portable-atomic") (r "^1.4.3") (f (quote ("fallback" "float"))) (o #t) (k 0)) (d (n "unicode-segmentation") (r "^1.10.1") (o #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (o #t) (k 0)) (d (n "wide") (r "^0.7.15") (o #t) (k 0)))) (h "1mxv4j0nhfbwcbhp2n0b673f91298nk9f0ivbfmhk8n97f1adlih") (f (quote (("unsafe") ("safe") ("no_std") ("nightly") ("docsrs" "nightly" "all" "std" "unsafe") ("all" "atomic" "az" "bytemuck" "const-str" "hashbrown" "libm" "memchr" "portable-atomic" "unicode-segmentation" "unicode-width" "wide")))) (s 2) (e (quote (("std" "alloc" "atomic?/std" "bytemuck?/extern_crate_std") ("alloc" "bytemuck?/extern_crate_alloc")))) (r "1.72.1")))

(define-public crate-devela_depend-0.4.0 (c (n "devela_depend") (v "0.4.0") (d (list (d (n "atomic") (r "^0.6.0") (f (quote ("fallback"))) (o #t) (k 0)) (d (n "bytemuck") (r "^1.14.0") (f (quote ("align_offset" "min_const_generics" "must_cast" "zeroable_maybe_uninit"))) (o #t) (k 0)) (d (n "const-str") (r "^0.5.6") (o #t) (k 0)) (d (n "crossterm") (r "^0.27.0") (f (quote ("windows"))) (o #t) (k 0)) (d (n "hashbrown") (r "^0.14.1") (f (quote ("ahash" "inline-more"))) (o #t) (k 0)) (d (n "libm") (r "^0.2.8") (o #t) (k 0)) (d (n "memchr") (r "^2.7.1") (o #t) (k 0)) (d (n "miniquad") (r "^0.4.0-alpha.10") (o #t) (k 0)) (d (n "portable-atomic") (r "^1.4.3") (f (quote ("fallback" "float"))) (o #t) (k 0)) (d (n "unicode-segmentation") (r "^1.10.1") (o #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (o #t) (k 0)) (d (n "wide") (r "^0.7.15") (o #t) (k 0)))) (h "0kfkjnsb6qka86qh0vxf0021nhqcx6j2pnvfq4fgmzvh9c7dvsq3") (f (quote (("unsafe") ("safe") ("no_std") ("nightly") ("docsrs" "nightly" "all" "std" "unsafe") ("all" "atomic" "bytemuck" "const-str" "crossterm" "crossterm_events" "hashbrown" "libm" "memchr" "miniquad" "portable-atomic" "unicode-segmentation" "unicode-width" "wide")))) (s 2) (e (quote (("std" "alloc" "atomic?/std" "bytemuck?/extern_crate_std") ("crossterm_events" "crossterm?/events") ("alloc" "bytemuck?/extern_crate_alloc")))) (r "1.72.1")))

(define-public crate-devela_depend-0.4.1 (c (n "devela_depend") (v "0.4.1") (d (list (d (n "atomic") (r "^0.6.0") (f (quote ("fallback"))) (o #t) (k 0)) (d (n "bytemuck") (r "^1.14.0") (f (quote ("align_offset" "min_const_generics" "must_cast" "zeroable_maybe_uninit"))) (o #t) (k 0)) (d (n "const-str") (r "^0.5.6") (o #t) (k 0)) (d (n "crossterm") (r "^0.27.0") (f (quote ("windows"))) (o #t) (k 0)) (d (n "hashbrown") (r "^0.14.1") (f (quote ("ahash" "inline-more"))) (o #t) (k 0)) (d (n "libm") (r "^0.2.8") (o #t) (k 0)) (d (n "memchr") (r "^2.7.1") (o #t) (k 0)) (d (n "miniquad") (r "^0.4.0") (o #t) (k 0)) (d (n "portable-atomic") (r "^1.4.3") (f (quote ("fallback" "float"))) (o #t) (k 0)) (d (n "rand_core") (r "^0.6.4") (o #t) (k 0)) (d (n "unicode-segmentation") (r "^1.10.1") (o #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (o #t) (k 0)) (d (n "wide") (r "^0.7.15") (o #t) (k 0)))) (h "194d2v42f1l70y9la086dc7ann3yvr46frp00s9dc7cr64lsxl84") (f (quote (("unsafe") ("safe") ("no_std") ("nightly") ("docsrs" "nightly" "all" "std" "unsafe") ("all" "atomic" "bytemuck" "const-str" "crossterm" "crossterm_bracketed_paste" "crossterm_events" "hashbrown" "libm" "memchr" "miniquad" "portable-atomic" "rand_core" "rand_core_getrandom" "rand_core_serde" "unicode-segmentation" "unicode-width" "wide")))) (s 2) (e (quote (("std" "alloc" "atomic?/std" "bytemuck?/extern_crate_std" "memchr?/std" "rand_core?/std" "wide?/std") ("rand_core_serde" "rand_core?/serde") ("rand_core_getrandom" "rand_core?/getrandom") ("crossterm_events" "crossterm?/events") ("crossterm_bracketed_paste" "crossterm?/bracketed-paste") ("alloc" "bytemuck?/extern_crate_alloc" "memchr?/alloc" "rand_core?/alloc")))) (r "1.72.1")))

