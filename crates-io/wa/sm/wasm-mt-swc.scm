(define-module (crates-io wa sm wasm-mt-swc) #:use-module (crates-io))

(define-public crate-wasm-mt-swc-0.1.0 (c (n "wasm-mt-swc") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "base64") (r "^0.12.0") (d #t) (k 0)) (d (n "dashmap") (r "^3") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("release_max_level_info"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sourcemap") (r "^6") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.7") (f (quote ("sourcemap" "concurrent"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.36.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.31.0") (f (quote ("const-modules" "react"))) (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.22.0") (d #t) (k 0)) (d (n "swc_visit") (r "^0.2.2") (d #t) (k 0)))) (h "0qj5d4qmm9a94y05yhmil72mvw0p4hklzj9c8sv8bhiaiabk8ky1")))

(define-public crate-wasm-mt-swc-0.1.1 (c (n "wasm-mt-swc") (v "0.1.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "ast_node") (r "=0.7.0") (d #t) (k 0)) (d (n "base64") (r "^0.12.0") (d #t) (k 0)) (d (n "dashmap") (r "^3") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("release_max_level_info"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "=1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sourcemap") (r "^6") (d #t) (k 0)) (d (n "swc_atoms") (r "=0.2.5") (d #t) (k 0)) (d (n "swc_common") (r "=0.10.7") (f (quote ("sourcemap" "concurrent"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "=0.36.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "=0.42.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "=0.44.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "=0.31.0") (f (quote ("const-modules" "react"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_macros") (r "=0.1.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "=0.22.0") (d #t) (k 0)) (d (n "swc_visit") (r "=0.2.2") (d #t) (k 0)))) (h "0sb0rkif5vpq210pjddvr36yfmkzkmmlvi2mz1d21jprir82fhli")))

(define-public crate-wasm-mt-swc-0.1.2 (c (n "wasm-mt-swc") (v "0.1.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "ast_node") (r "=0.7.0") (d #t) (k 0)) (d (n "base64") (r "^0.12.0") (d #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("release_max_level_info"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "=1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sourcemap") (r "^6") (d #t) (k 0)) (d (n "swc_atoms") (r "=0.2.5") (d #t) (k 0)) (d (n "swc_common") (r "=0.10.7") (f (quote ("sourcemap" "concurrent"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "=0.36.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "=0.42.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "=0.44.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "=0.31.0") (k 0)) (d (n "swc_ecma_transforms_macros") (r "=0.1.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "=0.22.0") (d #t) (k 0)) (d (n "swc_visit") (r "=0.2.2") (d #t) (k 0)))) (h "1l12xy4n92jm7vf6qra3f5a4wj279svi3ync2l48dsp77cynkkrm")))

(define-public crate-wasm-mt-swc-0.1.3 (c (n "wasm-mt-swc") (v "0.1.3") (d (list (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "swc") (r "=0.233.2") (d #t) (k 0)) (d (n "swc_common") (r "=0.29.18") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "=0.95.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_module") (r "=0.154.2") (d #t) (k 0)))) (h "069jl2fwzvn3i5s55ydcfi74j3d9bci8qp6ma3k9gqw7jw6gynzv")))

