(define-module (crates-io wa sm wasmer) #:use-module (crates-io))

(define-public crate-wasmer-0.1.0 (c (n "wasmer") (v "0.1.0") (d (list (d (n "cranelift-codegen") (r "^0.22.0") (d #t) (k 0)) (d (n "cranelift-entity") (r "^0.22.0") (d #t) (k 0)) (d (n "cranelift-native") (r "^0.22.0") (d #t) (k 0)) (d (n "cranelift-wasm") (r "^0.22.0") (d #t) (k 0)) (d (n "docopt") (r "^1.0.0") (d #t) (k 0)) (d (n "error-chain") (r "^0.12.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4.5") (d #t) (k 0)) (d (n "memmap") (r "^0.6.2") (d #t) (k 0)) (d (n "region") (r "^0.3.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.55") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.55") (d #t) (k 0)) (d (n "spin") (r "^0.4.9") (d #t) (k 0)) (d (n "structopt") (r "^0.2.11") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.0.3") (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 0)) (d (n "wabt") (r "^0.6.0") (d #t) (k 0)) (d (n "wabt") (r "^0.6.0") (d #t) (k 1)) (d (n "wasmparser") (r "^0.20.0") (d #t) (k 0)))) (h "09pfzc2nh7i0bvzrvn9r411c249g5m5s9ydcp0y64vf44fyhq7nc") (f (quote (("debug"))))))

(define-public crate-wasmer-0.17.0 (c (n "wasmer") (v "0.17.0") (d (list (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "wasmer-clif-backend") (r "^0.17.0") (o #t) (d #t) (k 0)) (d (n "wasmer-llvm-backend") (r "^0.17.0") (o #t) (d #t) (k 0)) (d (n "wasmer-runtime-core") (r "^0.17.0") (d #t) (k 0)) (d (n "wasmer-singlepass-backend") (r "^0.17.0") (o #t) (d #t) (k 0)))) (h "19y0dlv29gqn5nmv5dfxpncwzch8pnhkw4lpgkvgh1x4xrz5bnjb") (f (quote (("singlepass" "wasmer-singlepass-backend") ("llvm" "wasmer-llvm-backend") ("deterministic-execution" "wasmer-singlepass-backend/deterministic-execution" "wasmer-runtime-core/deterministic-execution") ("default-backend-singlepass" "singlepass") ("default-backend-llvm" "llvm") ("default-backend-cranelift" "cranelift") ("default" "cranelift" "default-backend-cranelift") ("cranelift" "wasmer-clif-backend"))))))

(define-public crate-wasmer-0.17.1 (c (n "wasmer") (v "0.17.1") (d (list (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "wasmer-clif-backend") (r "^0.17.1") (o #t) (d #t) (k 0)) (d (n "wasmer-llvm-backend") (r "^0.17.1") (o #t) (d #t) (k 0)) (d (n "wasmer-runtime-core") (r "^0.17.1") (d #t) (k 0)) (d (n "wasmer-singlepass-backend") (r "^0.17.1") (o #t) (d #t) (k 0)))) (h "11z6lvvw83phc5l5cicpxdvhwgq9igz8dpbknhdxjnrnfxkwssn0") (f (quote (("singlepass" "wasmer-singlepass-backend") ("llvm" "wasmer-llvm-backend") ("deterministic-execution" "wasmer-singlepass-backend/deterministic-execution" "wasmer-runtime-core/deterministic-execution") ("default-backend-singlepass" "singlepass") ("default-backend-llvm" "llvm") ("default-backend-cranelift" "cranelift") ("default" "cranelift" "default-backend-cranelift") ("cranelift" "wasmer-clif-backend"))))))

(define-public crate-wasmer-1.0.0-alpha01.0 (c (n "wasmer") (v "1.0.0-alpha01.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.10") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.0-alpha01.0") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.0-alpha01.0") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.0-alpha01.0") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.0-alpha01.0") (o #t) (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.0-alpha01.0") (d #t) (k 0)) (d (n "wasmer-engine-dummy") (r "^1.0.0-alpha01.0") (d #t) (k 2)) (d (n "wasmer-engine-jit") (r "^1.0.0-alpha01.0") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.0-alpha01.0") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.0-alpha01.0") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.0-alpha01.0") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1dgdyq5h3d320nhy5139j4w5kr7vb74aw4d1k16bp0prhin1jfgi") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-1.0.0-alpha02.0 (c (n "wasmer") (v "1.0.0-alpha02.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.10") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.0-alpha02.0") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.0-alpha02.0") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.0-alpha02.0") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.0-alpha02.0") (o #t) (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.0-alpha02.0") (d #t) (k 0)) (d (n "wasmer-engine-jit") (r "^1.0.0-alpha02.0") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.0-alpha02.0") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.0-alpha02.0") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.0-alpha02.0") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1gf7b3qbz5ys82y3733q9shz8263v2xh2hq7xym5kr7hvwvzjv8h") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-1.0.0-alpha3 (c (n "wasmer") (v "1.0.0-alpha3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.10") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.0-alpha3") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.0-alpha3") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.0-alpha3") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.0-alpha3") (o #t) (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.0-alpha3") (d #t) (k 0)) (d (n "wasmer-engine-jit") (r "^1.0.0-alpha3") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.0-alpha3") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.0-alpha3") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.0-alpha3") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "01wc1r0ww2nx2zc73gfk13igx9h71za8gdsx0sybbdf0q4a0jxyc") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-1.0.0-alpha4 (c (n "wasmer") (v "1.0.0-alpha4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.10") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.0-alpha4") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.0-alpha4") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.0-alpha4") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.0-alpha4") (o #t) (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.0-alpha4") (d #t) (k 0)) (d (n "wasmer-engine-jit") (r "^1.0.0-alpha4") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.0-alpha4") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.0-alpha4") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.0-alpha4") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1il3dqywwxsai5hr7fg4lwb9jri7m9nr2c3wdr47vqfpgxb16qnr") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-1.0.0-alpha5 (c (n "wasmer") (v "1.0.0-alpha5") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.11") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.0-alpha5") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.0-alpha5") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.0-alpha5") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.0-alpha5") (o #t) (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.0-alpha5") (d #t) (k 0)) (d (n "wasmer-engine-jit") (r "^1.0.0-alpha5") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.0-alpha5") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.0-alpha5") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.0-alpha5") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0w9n3ll2qnfqjq3a7lsj038zwr51184w6pfjsyqlgwsmaz25wgdw") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-1.0.0-beta1 (c (n "wasmer") (v "1.0.0-beta1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.11") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.0-beta1") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.0-beta1") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.0-beta1") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.0-beta1") (o #t) (d #t) (k 0)) (d (n "wasmer-derive") (r "^1.0.0-beta1") (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.0-beta1") (d #t) (k 0)) (d (n "wasmer-engine-jit") (r "^1.0.0-beta1") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.0-beta1") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.0-beta1") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.0-beta1") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1p2wc6q9i3pqxw5n3a79512vvc8bjf9wmgd5mzcsy4cl3xdjb9bm") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("deprecated") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-1.0.0-beta2 (c (n "wasmer") (v "1.0.0-beta2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.11") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.0-beta2") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.0-beta2") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.0-beta2") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.0-beta2") (o #t) (d #t) (k 0)) (d (n "wasmer-derive") (r "^1.0.0-beta2") (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.0-beta2") (d #t) (k 0)) (d (n "wasmer-engine-jit") (r "^1.0.0-beta2") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.0-beta2") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.0-beta2") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.0-beta2") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "089fizxiadjbxvls0gwlq3csqsinwb1685r4pq3jy72d65zw3y2i") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("deprecated") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift-experimental-x64" "cranelift" "wasmer-compiler-cranelift/experimental-x64") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-1.0.0-rc1 (c (n "wasmer") (v "1.0.0-rc1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.11") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.0-rc1") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.0-rc1") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.0-rc1") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.0-rc1") (o #t) (d #t) (k 0)) (d (n "wasmer-derive") (r "^1.0.0-rc1") (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.0-rc1") (d #t) (k 0)) (d (n "wasmer-engine-jit") (r "^1.0.0-rc1") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.0-rc1") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.0-rc1") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.0-rc1") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0iqv5cqqlspgyfsjsc9x9il5sk2y24aj7ldyl2p25rf36j3zprzz") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("deprecated") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift-experimental-x64" "cranelift" "wasmer-compiler-cranelift/experimental-x64") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-1.0.0 (c (n "wasmer") (v "1.0.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.11") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.0") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "wasmer-derive") (r "^1.0.0") (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.0") (d #t) (k 0)) (d (n "wasmer-engine-jit") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.0") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.0") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1m4qj006scfj0sf82mgdnikxik1nms36cl4kmr2771clr3kyrccl") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("deprecated") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift-experimental-x64" "cranelift" "wasmer-compiler-cranelift/experimental-x64") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-1.0.1 (c (n "wasmer") (v "1.0.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.11") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.1") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "wasmer-derive") (r "^1.0.1") (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.1") (d #t) (k 0)) (d (n "wasmer-engine-jit") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.1") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.1") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1xi2na8rjd6jw632ghxvp8ybl9a4q1aqf29wlz84wzfh900lx90m") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("deprecated") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift-experimental-x64" "cranelift" "wasmer-compiler-cranelift/experimental-x64") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-1.0.2 (c (n "wasmer") (v "1.0.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.11") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.2") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^1.0.2") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^1.0.2") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^1.0.2") (o #t) (d #t) (k 0)) (d (n "wasmer-derive") (r "^1.0.2") (d #t) (k 0)) (d (n "wasmer-engine") (r "^1.0.2") (d #t) (k 0)) (d (n "wasmer-engine-jit") (r "^1.0.2") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-native") (r "^1.0.2") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^1.0.2") (d #t) (k 0)) (d (n "wasmer-vm") (r "^1.0.2") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0rk8kpmr7sn13540j1q8i9ffwlnngh7an5yaci6r13cqakjzl357") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("deprecated") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift-experimental-x64" "cranelift" "wasmer-compiler-cranelift/experimental-x64") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-2.0.0-rc1 (c (n "wasmer") (v "2.0.0-rc1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "loupe") (r "^0.1") (d #t) (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^2.0.0-rc1") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^2.0.0-rc1") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.0.0-rc1") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^2.0.0-rc1") (o #t) (d #t) (k 0)) (d (n "wasmer-derive") (r "^2.0.0-rc1") (d #t) (k 0)) (d (n "wasmer-engine") (r "^2.0.0-rc1") (d #t) (k 0)) (d (n "wasmer-engine-dylib") (r "^2.0.0-rc1") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-universal") (r "^2.0.0-rc1") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^2.0.0-rc1") (d #t) (k 0)) (d (n "wasmer-vm") (r "^2.0.0-rc1") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1c53kh652nq1rskqw2kswdgirmyks2hadd175pjmgjakr6flqq50") (f (quote (("universal" "wasmer-engine-universal" "engine") ("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "dylib") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "universal") ("experimental-reference-types-extern-ref" "wasmer-types/experimental-reference-types-extern-ref") ("engine") ("dylib" "wasmer-engine-dylib" "engine") ("default-universal" "universal" "default-engine") ("default-singlepass" "singlepass" "default-compiler") ("default-llvm" "llvm" "default-compiler") ("default-engine") ("default-dylib" "dylib" "default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-universal") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-2.0.0-rc2 (c (n "wasmer") (v "2.0.0-rc2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "loupe") (r "^0.1") (d #t) (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^2.0.0-rc2") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^2.0.0-rc2") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.0.0-rc2") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^2.0.0-rc2") (o #t) (d #t) (k 0)) (d (n "wasmer-derive") (r "^2.0.0-rc2") (d #t) (k 0)) (d (n "wasmer-engine") (r "^2.0.0-rc2") (d #t) (k 0)) (d (n "wasmer-engine-dylib") (r "^2.0.0-rc2") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-universal") (r "^2.0.0-rc2") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^2.0.0-rc2") (d #t) (k 0)) (d (n "wasmer-vm") (r "^2.0.0-rc2") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0rjnv8y12g4w0q71mh4gjs81fka47yk68m8mxk1n00zp8p5ladbg") (f (quote (("universal" "wasmer-engine-universal" "engine") ("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "dylib") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "universal") ("experimental-reference-types-extern-ref" "wasmer-types/experimental-reference-types-extern-ref") ("engine") ("dylib" "wasmer-engine-dylib" "engine") ("default-universal" "universal" "default-engine") ("default-singlepass" "singlepass" "default-compiler") ("default-llvm" "llvm" "default-compiler") ("default-engine") ("default-dylib" "dylib" "default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-universal") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-2.0.0 (c (n "wasmer") (v "2.0.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "loupe") (r "^0.1") (d #t) (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^2.0.0") (d #t) (k 0)) (d (n "wasmer-compiler-cranelift") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "wasmer-compiler-singlepass") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "wasmer-derive") (r "^2.0.0") (d #t) (k 0)) (d (n "wasmer-engine") (r "^2.0.0") (d #t) (k 0)) (d (n "wasmer-engine-dylib") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "wasmer-engine-universal") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "wasmer-types") (r "^2.0.0") (d #t) (k 0)) (d (n "wasmer-vm") (r "^2.0.0") (d #t) (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0xfd2yxpwsal801rcnrsj97cig8rnnlnpafpki1sq3qxl1ay8lkz") (f (quote (("universal" "wasmer-engine-universal" "engine") ("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "dylib") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "universal") ("experimental-reference-types-extern-ref" "wasmer-types/experimental-reference-types-extern-ref") ("engine") ("dylib" "wasmer-engine-dylib" "engine") ("default-universal" "universal" "default-engine") ("default-singlepass" "singlepass" "default-compiler") ("default-llvm" "llvm" "default-compiler") ("default-engine") ("default-dylib" "dylib" "default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-universal") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-2.1.0 (c (n "wasmer") (v "2.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "^2.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "^2.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "^2.1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-engine") (r "^2.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-dylib") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-types") (r "^2.1.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "^2.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "^2.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0pn20bzkjfcnvgh1wmyrysq9fhmy77n2iqcg5gc175i0pak97sh3") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-cranelift" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-2.1.1 (c (n "wasmer") (v "2.1.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "^2.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "^2.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "^2.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "^2.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "^2.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-engine") (r "^2.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-dylib") (r "^2.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "^2.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-types") (r "^2.1.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "^2.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "^2.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1xqlh50j8vg3ihp4b1z2cszfvm8w1d6q72vzpplps6zw4f61iw13") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-cranelift" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-2.2.0-rc1 (c (n "wasmer") (v "2.2.0-rc1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=2.2.0-rc1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=2.2.0-rc1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=2.2.0-rc1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.2.0-rc1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=2.2.0-rc1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=2.2.0-rc1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-engine") (r "=2.2.0-rc1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-dylib") (r "=2.2.0-rc1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "=2.2.0-rc1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-types") (r "=2.2.0-rc1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=2.2.0-rc1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=2.2.0-rc1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0fx59az9sc01pvvk49sr83zavqklrigwbixk734m60dqm2ykm0kw") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-cranelift" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-2.2.0-rc2 (c (n "wasmer") (v "2.2.0-rc2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=2.2.0-rc2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=2.2.0-rc2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=2.2.0-rc2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.2.0-rc2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=2.2.0-rc2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=2.2.0-rc2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-engine") (r "=2.2.0-rc2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-dylib") (r "=2.2.0-rc2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "=2.2.0-rc2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-types") (r "=2.2.0-rc2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=2.2.0-rc2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=2.2.0-rc2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1i15h0654mnghg013mwwakx8z9a233db2wzybmvsv1igbbq1ngyj") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-cranelift" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-2.2.0 (c (n "wasmer") (v "2.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=2.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=2.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=2.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=2.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=2.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-engine") (r "=2.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-dylib") (r "=2.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "=2.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-types") (r "=2.2.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=2.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=2.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0451xwfc1zpjdzxwg8ll3z7jkdzyzl4s1r0bxpw3hgyv8vwdzixz") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-cranelift" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-2.2.1 (c (n "wasmer") (v "2.2.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=2.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=2.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=2.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=2.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=2.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-engine") (r "=2.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-dylib") (r "=2.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "=2.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-types") (r "=2.2.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=2.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=2.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1spx9ax5nfq5v5kgcndl5y66lmvwnrqybbwfvf6l7xv1f6ga69zp") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-cranelift" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-2.3.0 (c (n "wasmer") (v "2.3.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-artifact") (r "=2.3.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "=2.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=2.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=2.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=2.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=2.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-engine") (r "=2.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-dylib") (r "=2.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "=2.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-types") (r "=2.3.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=2.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=2.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1pxyaynmh5kcvb7k0952j47zsbs9n7b7pplpfwyyl1nhr5hq73ga") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-cranelift" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-3.0.0-alpha (c (n "wasmer") (v "3.0.0-alpha") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0-alpha") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0-alpha") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0-alpha") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0-alpha") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-alpha") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-alpha") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-alpha") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-alpha") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0-alpha") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "03bkp3i0cp5v20kpwb9gdi0g78khcxchin7h6vc1y0smd0dgrn0p") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (y #t)))

(define-public crate-wasmer-3.0.0-alpha.2 (c (n "wasmer") (v "3.0.0-alpha.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0-alpha.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0-alpha.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0-alpha.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0-alpha.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-alpha.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-alpha.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-alpha.2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-alpha.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0-alpha.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0hghqkmqls99yv0h6q45x0g5a6z1apz6aiapifd28lzyy8z7qi1k") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (y #t)))

(define-public crate-wasmer-3.0.0-alpha.3 (c (n "wasmer") (v "3.0.0-alpha.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0-alpha.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0-alpha.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0-alpha.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0-alpha.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-alpha.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-alpha.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-alpha.3") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-alpha.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0-alpha.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0dw6h8zja29z79cw9krvj1pqpn7f9chpw81hdgxn6aaknq13s8wi") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.0-alpha.4 (c (n "wasmer") (v "3.0.0-alpha.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0-alpha.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0-alpha.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0-alpha.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0-alpha.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-alpha.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-alpha.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-alpha.4") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-alpha.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0-alpha.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "161bw2ffsqyy8r3qckya9hbq1w39nwcixq7ppqz2qza33z781ahz") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.0-beta (c (n "wasmer") (v "3.0.0-beta") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0-beta") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0-beta") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0-beta") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0-beta") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-beta") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-beta") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-beta") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-beta") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0-beta") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "18p0smwn46qvr8haigjb0f37xad68m0r42g7afbg47yv9pdn4xja") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.0-beta.2 (c (n "wasmer") (v "3.0.0-beta.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.0.0-beta.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0-beta.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0-beta.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0-beta.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-beta.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-beta.2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "00q98171zrc9p613ldr862pszddxkf02x01xk8x2pd7bsjllgz01") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.0-rc.1 (c (n "wasmer") (v "3.0.0-rc.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.0.0-rc.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.0.0-rc.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0-rc.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0-rc.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0-rc.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0-rc.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-rc.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-rc.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-rc.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-rc.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0-rc.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "13b31ggyr20xgv1a4lrd22chkkyc416qz3yvw49l6ywffs7ylvpf") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.0-rc.2 (c (n "wasmer") (v "3.0.0-rc.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.0.0-rc.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.0.0-rc.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0-rc.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0-rc.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0-rc.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0-rc.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-rc.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-rc.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-rc.2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-rc.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0-rc.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1h4wzk3rbnckwb7wj1gwxv6f5rn9f3n5ijgn9dl2q9wqnwg4gzdc") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.0-rc.3 (c (n "wasmer") (v "3.0.0-rc.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.0.0-rc.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.0.0-rc.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0-rc.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0-rc.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0-rc.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0-rc.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-rc.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-rc.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-rc.3") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-rc.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0-rc.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "10lm9zgr0hh9z7ysna8ymjaq47lkgwmdgdlw5818q5a666q9q9bn") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.0-rc.4 (c (n "wasmer") (v "3.0.0-rc.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.0.0-rc.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.0.0-rc.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0-rc.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0-rc.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0-rc.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0-rc.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-rc.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0-rc.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-rc.4") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0-rc.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0-rc.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "10nmk234a8jh666a8crb17s1dd3kayh227ywjv3wnh7myrca693a") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.0 (c (n "wasmer") (v "3.0.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.0.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1ii010mm7977jn3w846xjdnach3ns6jpb5dcrihqdbr9y24jp122") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.1 (c (n "wasmer") (v "3.0.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0ryhmbfp1jfi4dcy04gybndzgd1mf30kxj0xnwrwpxzlx8bs777w") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.2 (c (n "wasmer") (v "3.0.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1hsfqphig59d452nb0lp3ggsfljrskcsk7694fqs7f8pkxfzj9s9") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.1.0 (c (n "wasmer") (v "3.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.1.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "13q3m83ng52621nz8h9vjalyxy7pydbpd5qnsxb017ylwp4rc3vl") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.2.0-alpha.1 (c (n "wasmer") (v "3.2.0-alpha.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.2.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.2.0-alpha.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.2.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.2.0-alpha.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.2.0-alpha.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.2.0-alpha.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.2.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.2.0-alpha.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.2.0-alpha.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.2.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.2.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1rzmkdqc0yqihscyk81cmmzliv6fijwrjnp2ci4skj25bj2fww5k") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.0.3 (c (n "wasmer") (v "3.0.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.3") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "11lh7h4p746vv2bdjwrcy0x3ldbb8pn8dyv6syx2vv11awm94djy") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.1.1 (c (n "wasmer") (v "3.1.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.1.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "140gkya1vg7g3fj4hvv49ydrxf8w62ph2wnw0nw0q8h12z9gc2l4") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.2.0-beta.1 (c (n "wasmer") (v "3.2.0-beta.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.2.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.2.0-beta.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.2.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.2.0-beta.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.2.0-beta.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.2.0-beta.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.2.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.2.0-beta.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.2.0-beta.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.2.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.2.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "074ja19kjxydiri7j3rgals8dhx29vdz48sivqxjw9sykqgf9czy") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.2.0-beta.2 (c (n "wasmer") (v "3.2.0-beta.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.2.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.2.0-beta.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.2.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.2.0-beta.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.2.0-beta.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.2.0-beta.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.2.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.2.0-beta.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.2.0-beta.2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.2.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.2.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "07rf5q4vhpincvdx797m7hym5gf0d5rcqyyry1s5rxq8fy66c3xd") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.2.0 (c (n "wasmer") (v "3.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.2.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1i932q0swvyidxr1wc8f7h2r19asnq25k2amqbrqrg040k3iq8l5") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.2.1 (c (n "wasmer") (v "3.2.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.2.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1wzyp01hq4210y3i0yfri3m8zvdsdwdiws1m1bpjl1nmv1xq0wl4") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "js" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-3.3.0 (c (n "wasmer") (v "3.3.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^3.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^3.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=3.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=3.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=3.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=3.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=3.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.3.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=3.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=3.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0lnxxx296x8m7zwyccdhickksjj1d66vc0yari3yswfbv3nfvjkq") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-4.0.0-alpha.1 (c (n "wasmer") (v "4.0.0-alpha.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.0.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.0.0-alpha.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.0.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.0.0-alpha.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.0.0-alpha.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.0.0-alpha.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.0.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.0.0-alpha.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.0.0-alpha.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.0.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.0.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "02a6klgiyfzzbpfpg6k1r73xmkcs5lw5jn32vgf9w3sszklzpj63") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys"))))))

(define-public crate-wasmer-4.0.0-beta.1 (c (n "wasmer") (v "4.0.0-beta.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.0.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.0.0-beta.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.0.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.0.0-beta.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.0.0-beta.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.0.0-beta.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.0.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.0.0-beta.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.0.0-beta.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.0.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.0.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1m0134qjlqisaah6p1kia36va0x05a3bclswbxxiz44q0whr4491") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.67")))

(define-public crate-wasmer-4.0.0-beta.2 (c (n "wasmer") (v "4.0.0-beta.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.0.0-beta.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.0.0-beta.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.0.0-beta.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.0.0-beta.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.0.0-beta.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.0.0-beta.2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "12x1az9izfqmv3sxnhnfszdf5nrbf3jdr91975ycgp7vby0khh7y") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.67")))

(define-public crate-wasmer-4.0.0-beta.3 (c (n "wasmer") (v "4.0.0-beta.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.0.0-beta.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.0.0-beta.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.0.0-beta.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.0.0-beta.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.0.0-beta.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.0.0-beta.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.0.0-beta.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.0.0-beta.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.0.0-beta.3") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.0.0-beta.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.0.0-beta.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "05qx3yfgbv0by84zs0b4vhzyqqgxb34zfbjnn853pjhl3ng8496r") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.67")))

(define-public crate-wasmer-4.0.0 (c (n "wasmer") (v "4.0.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.0.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.0.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.0.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1gv7xb76b0blw527zwn9ziwb0qmck9lv8xfzblg9svjfzg6hnyga") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.67")))

(define-public crate-wasmer-4.1.0 (c (n "wasmer") (v "4.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.1.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "13v15ykacivcf8hnpnzbbnqg4nfjlvsgq1qasjd3cc9sq8g82j9q") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.67")))

(define-public crate-wasmer-4.1.1 (c (n "wasmer") (v "4.1.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.1.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0gxxhcsclf5jx8k00ck4siv9zzvd9l8612rm0r23hznan6gzn1xl") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.67")))

(define-public crate-wasmer-4.1.2 (c (n "wasmer") (v "4.1.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.1.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.1.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.1.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.1.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.1.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.1.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.1.2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.1.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.1.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1s4wzr4p4fjg7j73bmd7wp4y1izwfpx028zg1b687phyp7dl4wgw") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.67")))

(define-public crate-wasmer-4.2.0 (c (n "wasmer") (v "4.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1n23rwk0afbravch5haikyklk8n6bxwpvazvvm39pk5nvqxlz5dp") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.67")))

(define-public crate-wasmer-4.2.1 (c (n "wasmer") (v "4.2.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1nxajkhvvdinviip1svjbimvly2zzyyxydjh58kvzmhnp5mirkrr") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.70")))

(define-public crate-wasmer-4.2.2 (c (n "wasmer") (v "4.2.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.2.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.2.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.2.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.2.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1w307k1mnjcr1vsgq5vciqlawqlanmcqylmra9jhmaamhyanyqhf") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.70")))

(define-public crate-wasmer-4.2.3 (c (n "wasmer") (v "4.2.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.2.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.2.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-downcast") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.2.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.2.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.2.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.2.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.3") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.2.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "=1.0.71") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0yzls5yz6yx14cynryx5n3azgka324y58k1kryxizb3ajpi1mjsh") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.70")))

(define-public crate-wasmer-4.2.4 (c (n "wasmer") (v "4.2.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.2.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.2.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.2.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.2.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.2.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.2.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.4") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.2.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "=1.0.71") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0n3s5pb4daw1bd7ljhbxbv8ngm2s61i907q4dmd39jkpj40cqiff") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.70")))

(define-public crate-wasmer-4.2.5 (c (n "wasmer") (v "4.2.5") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.2.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.2.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1.4") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.2.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.2.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.2.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.2.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.5") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.2.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.83") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.95") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "=1.0.71") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0csz95m4a27rpqh003c1lmdpx8mykm8fl2srj5b4vq4v7yicfrsl") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.70")))

(define-public crate-wasmer-4.2.6 (c (n "wasmer") (v "4.2.6") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.2.6") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.2.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1.4") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.2.6") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.2.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.2.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.2.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.6") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.6") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.6") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.2.6") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "=1.0.71") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0rnfzaq52q6s8a6npb52brg6gqmd867fljikc9wya7jxq96p45aw") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.73")))

(define-public crate-wasmer-4.2.8 (c (n "wasmer") (v "4.2.8") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.2.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.2.8") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1.4") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.2.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.2.8") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.2.8") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.2.8") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.2.8") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.8") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.2.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.2.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "=1.0.71") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "10z9gky216y7mzld4yr0azyid0r63q1k1cly55c6h94a20zmf520") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.73")))

(define-public crate-wasmer-4.3.0-alpha.1 (c (n "wasmer") (v "4.3.0-alpha.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.3.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.3.0-alpha.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1.4") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.3.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.3.0-alpha.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.3.0-alpha.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.3.0-alpha.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.3.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.3.0-alpha.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.3.0-alpha.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.3.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.3.0-alpha.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "=1.0.71") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "17k480i4m0alngzar8p99qvk8lblks8lawayvrbn1mkkaa01acq6") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.73")))

(define-public crate-wasmer-4.3.0-beta.1 (c (n "wasmer") (v "4.3.0-beta.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.3.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.3.0-beta.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1.4") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.3.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.3.0-beta.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.3.0-beta.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.3.0-beta.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.3.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.3.0-beta.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.3.0-beta.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.3.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.3.0-beta.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "=1.0.71") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0wjf16lwxp7g5mp0fi9n4mgmsjpp05acd2kahv7p67l3569vfa7m") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.73")))

(define-public crate-wasmer-4.3.0 (c (n "wasmer") (v "4.3.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1.4") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.3.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "=1.0.71") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "00g72nkdvhk2scz3xv42lx3ngpkvcg3179lsw9pw5mbcqphflsvd") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.74")))

(define-public crate-wasmer-4.3.1 (c (n "wasmer") (v "4.3.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3.51") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "macro-wasmer-universal-test") (r "^4.3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "macro-wasmer-universal-test") (r "^4.3.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1") (d #t) (k 0)) (d (n "rusty_jsc") (r "^0.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "shared-buffer") (r "^0.1.4") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=4.3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-cranelift") (r "=4.3.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "=4.3.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=4.3.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-derive") (r "=4.3.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.3.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasmer-types") (r "=4.3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-vm") (r "=4.3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmparser") (r "^0.121.0") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "=1.0.71") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1g24c56xn6dw2xl9rph774ki1264lbpssdji6z4j3qbhlmks5r3c") (f (quote (("wasmer-artifact-load" "wasmer-compiler/wasmer-artifact-load") ("wasmer-artifact-create" "wasmer-compiler/wasmer-artifact-create") ("wasm-types-polyfill" "wasmparser") ("sys-default" "sys" "wat" "cranelift") ("sys" "wasmer-compiler/translator" "wasmer-compiler/compiler" "std") ("std") ("static-artifact-load" "wasmer-compiler/static-artifact-load") ("static-artifact-create" "wasmer-compiler/static-artifact-create") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("jsc" "rusty_jsc" "wasm-types-polyfill" "wasmparser") ("js-serializable-module") ("js-default" "js" "std" "wasm-types-polyfill") ("js" "wasm-bindgen" "js-sys") ("jit" "engine") ("engine" "sys") ("enable-serde" "wasmer-vm/enable-serde" "wasmer-compiler/enable-serde" "wasmer-types/enable-serde") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys")))) (r "1.74")))

