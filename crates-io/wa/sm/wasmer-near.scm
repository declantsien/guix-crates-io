(define-module (crates-io wa sm wasmer-near) #:use-module (crates-io))

(define-public crate-wasmer-near-1.0.1 (c (n "wasmer-near") (v "1.0.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 2)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.11") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "^1.0.1") (d #t) (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^1.0.1") (o #t) (d #t) (k 0) (p "wasmer-compiler-cranelift-near")) (d (n "wasmer-compiler-llvm") (r "^1.0.1") (o #t) (d #t) (k 0) (p "wasmer-compiler-llvm-near")) (d (n "wasmer-compiler-singlepass") (r "^1.0.1") (o #t) (d #t) (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "^1.0.1") (d #t) (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "^1.0.1") (d #t) (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-jit") (r "^1.0.1") (o #t) (d #t) (k 0) (p "wasmer-engine-jit-near")) (d (n "wasmer-engine-native") (r "^1.0.1") (o #t) (d #t) (k 0) (p "wasmer-engine-native-near")) (d (n "wasmer-types") (r "^1.0.1") (d #t) (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "^1.0.1") (d #t) (k 0) (p "wasmer-vm-near")) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1rijxi61f6iykfj6mvjmbqqyjnvli0kay7icgrwxqw5bisg6zild") (f (quote (("singlepass" "wasmer-compiler-singlepass" "compiler") ("native" "wasmer-engine-native" "engine") ("llvm" "wasmer-compiler-llvm" "compiler") ("jit" "wasmer-engine-jit" "engine") ("engine") ("deprecated") ("default-singlepass" "singlepass" "default-compiler") ("default-native" "native" "default-engine") ("default-llvm" "llvm" "default-compiler") ("default-jit" "jit" "default-engine") ("default-engine") ("default-cranelift" "cranelift" "default-compiler") ("default-compiler") ("default" "wat" "default-cranelift" "default-jit") ("cranelift-experimental-x64" "cranelift" "wasmer-compiler-cranelift/experimental-x64") ("cranelift" "wasmer-compiler-cranelift" "compiler") ("compiler" "wasmer-engine-jit/compiler" "wasmer-engine-native/compiler"))))))

(define-public crate-wasmer-near-2.0.0 (c (n "wasmer-near") (v "2.0.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "^2.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "^2.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-derive") (r "^2.0.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "^2.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-dylib") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "^2.0.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-types-near")) (d (n "wasmer-types") (r "^2.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "^2.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1ff2v8qvr1xxgzj7plfpdz22a4fsl62gh062hih91ns5h4cfwvf3") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-near-2.0.1 (c (n "wasmer-near") (v "2.0.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "^2.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "^2.0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "^2.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-derive") (r "^2.0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "^2.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-dylib") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "^2.0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "^2.0.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-types-near")) (d (n "wasmer-types") (r "^2.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "^2.0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0fbdc973rr2r05dbdr1s3bw51blgqkmwwhj3q5jda9xkvfadspar") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-near-2.0.2 (c (n "wasmer-near") (v "2.0.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "^2.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "^2.0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "^2.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-derive") (r "^2.0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "^2.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-dylib") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "^2.0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "^2.0.2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-types-near")) (d (n "wasmer-types") (r "^2.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "^2.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "03zjm994z04zplabzwvvjf4b0g8yj1vqw166bdl65shyq6vzz80m") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-near-2.0.3 (c (n "wasmer-near") (v "2.0.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "^2.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "^2.0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "^2.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-derive") (r "^2.0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "^2.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-dylib") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "^2.0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "^2.0.3") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-types-near")) (d (n "wasmer-types") (r "^2.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "^2.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1g8h9fyamyd7nff4ywggr12kv88lq4n1gwayd4cy7hiw12gq54ky") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-near-2.1.0 (c (n "wasmer-near") (v "2.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=2.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "=2.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-derive") (r "=2.1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "=2.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-dylib") (r "^2.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "=2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "=2.1.0") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-types-near")) (d (n "wasmer-types") (r "=2.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "=2.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "06zlw18vj6465mmcnhy18zk3inp2847mrqx0659kc2zndsfpvdpf") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-near-2.1.1 (c (n "wasmer-near") (v "2.1.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=2.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "=2.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-derive") (r "=2.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "=2.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-dylib") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "=2.1.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "=2.1.1") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-types-near")) (d (n "wasmer-types") (r "=2.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "=2.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "14ynkzrhhhnwg840g7gcp3kf1bnw28zfj9q2flvgya2rc42wbdv2") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-near-2.1.2 (c (n "wasmer-near") (v "2.1.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.51") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.74") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasmer-compiler") (r "=2.1.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.1.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "=2.1.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-derive") (r "=2.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "=2.1.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-dylib") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-engine-universal") (r "=2.1.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "=2.1.2") (f (quote ("std"))) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wasmer-types-near")) (d (n "wasmer-types") (r "=2.1.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "=2.1.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wasmparser") (r "^0.78") (o #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1511hxgwsaskrrklpfdnf4z7smcvyj44xixp10lzbzz6hy145cc9") (f (quote (("wasm-types-polyfill" "js" "wasmparser") ("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("native" "dylib") ("llvm" "compiler" "wasmer-compiler-llvm") ("js-default" "js" "std" "wasm-types-polyfill") ("js") ("jit" "universal") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("dylib" "engine" "wasmer-engine-dylib") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-dylib" "default-engine" "dylib") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core" "hashbrown") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler" "wasmer-engine-dylib/compiler"))))))

(define-public crate-wasmer-near-2.2.0 (c (n "wasmer-near") (v "2.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "=2.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "=2.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "=2.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-universal") (r "=2.2.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "=2.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "=2.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "13vfzdxxagx78in579fbximychdjnpgxgyanr2cs5z50dibc88lb") (f (quote (("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler"))))))

(define-public crate-wasmer-near-2.2.1 (c (n "wasmer-near") (v "2.2.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "=2.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "=2.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "=2.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-universal") (r "=2.2.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "=2.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "=2.2.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1x3rwyfyyxdn4krw74cx591wx7d4wfznx3la1xj434q6jr52iwq4") (f (quote (("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler"))))))

(define-public crate-wasmer-near-2.2.2 (c (n "wasmer-near") (v "2.2.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "=2.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.2.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "=2.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "=2.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-universal") (r "=2.2.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "=2.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "=2.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "13h7z8zjppszsknknbr8clxx8g69s4bh55ncks2m63rwdhni7qrn") (f (quote (("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler"))))))

(define-public crate-wasmer-near-2.3.0 (c (n "wasmer-near") (v "2.3.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "=2.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "=2.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "=2.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-universal") (r "=2.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "=2.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "=2.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1ybl5ga633xg858gn276y5p73ia13cs8fphckj36pifmymqihplr") (f (quote (("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler"))))))

(define-public crate-wasmer-near-2.2.3 (c (n "wasmer-near") (v "2.2.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "loupe") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "=2.2.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.2.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "=2.2.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "=2.2.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-universal") (r "=2.2.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "=2.2.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "=2.2.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "05nj74xrgykikjdy0gmynxwjwczgpfhpcb6gd97wm2sbjr8xbhi0") (f (quote (("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler"))))))

(define-public crate-wasmer-near-2.4.0 (c (n "wasmer-near") (v "2.4.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "=2.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.4.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "=2.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "=2.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-universal") (r "=2.4.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "=2.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "=2.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "0w6hvcwgff4mcm7qwpcrdx9l99irwp1d9y3rrxbsarwym1rykn5v") (f (quote (("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler"))))))

(define-public crate-wasmer-near-2.4.1 (c (n "wasmer-near") (v "2.4.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "more-asserts") (r "^0.2") (d #t) (k 0)) (d (n "target-lexicon") (r "^0.12.2") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasmer-compiler") (r "=2.4.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-near")) (d (n "wasmer-compiler-cranelift") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-llvm") (r "^2.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmer-compiler-singlepass") (r "=2.4.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-compiler-singlepass-near")) (d (n "wasmer-derive") (r "=2.4.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-derive-near")) (d (n "wasmer-engine") (r "=2.4.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-near")) (d (n "wasmer-engine-universal") (r "=2.4.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-engine-universal-near")) (d (n "wasmer-types") (r "=2.4.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-types-near")) (d (n "wasmer-vm") (r "=2.4.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wasmer-vm-near")) (d (n "wat") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "wat") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "winapi") (r "^0.3") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), target_os = \"windows\"))") (k 0)))) (h "1w05wrjxjs1c4d1wzi7bi7k9ndacngcszsg2b44w4062r2sfx1w4") (f (quote (("universal" "engine" "wasmer-engine-universal") ("sys-default" "sys" "wat" "default-singlepass" "default-universal") ("sys") ("std") ("singlepass" "compiler" "wasmer-compiler-singlepass") ("llvm" "compiler" "wasmer-compiler-llvm") ("experimental-reference-types-extern-ref" "sys" "wasmer-types/experimental-reference-types-extern-ref") ("engine" "sys") ("default-universal" "default-engine" "universal") ("default-singlepass" "default-compiler" "singlepass") ("default-llvm" "default-compiler" "llvm") ("default-engine") ("default-cranelift" "default-compiler" "cranelift") ("default-compiler") ("default" "sys-default") ("cranelift" "compiler" "wasmer-compiler-cranelift") ("core") ("compiler" "sys" "wasmer-compiler/translator" "wasmer-engine-universal/compiler"))))))

