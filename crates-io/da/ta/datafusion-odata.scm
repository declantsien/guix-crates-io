(define-module (crates-io da ta datafusion-odata) #:use-module (crates-io))

(define-public crate-datafusion-odata-0.1.0 (c (n "datafusion-odata") (v "0.1.0") (d (list (d (n "axum") (r "^0.6") (f (quote ("headers"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (k 0)) (d (n "datafusion") (r "^36") (k 0)) (d (n "datafusion") (r "^36") (f (quote ("parquet"))) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (k 2)) (d (n "tower") (r "^0.4") (d #t) (k 2)) (d (n "tower-http") (r "^0.4") (f (quote ("trace" "cors"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 2)) (d (n "tracing-bunyan-formatter") (r "^0.3") (d #t) (k 2)) (d (n "tracing-log") (r "^0.2") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt" "ansi" "env-filter"))) (k 2)))) (h "0zm3rfsfs5gar8s3bckrri2capii1dr9wqpyif82zbqyq8yhkyyv")))

(define-public crate-datafusion-odata-0.2.0 (c (n "datafusion-odata") (v "0.2.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "axum") (r "^0.6") (f (quote ("headers"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (k 0)) (d (n "datafusion") (r "^36") (k 0)) (d (n "datafusion") (r "^36") (f (quote ("parquet"))) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (k 2)) (d (n "tower") (r "^0.4") (d #t) (k 2)) (d (n "tower-http") (r "^0.4") (f (quote ("trace" "cors"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 2)) (d (n "tracing-bunyan-formatter") (r "^0.3") (d #t) (k 2)) (d (n "tracing-log") (r "^0.2") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt" "ansi" "env-filter"))) (k 2)))) (h "1g49gsw5mf6x0lbrzm2lpnpxbx3hwq32i25yfdgpc8065g2cmwr5")))

(define-public crate-datafusion-odata-0.3.0 (c (n "datafusion-odata") (v "0.3.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "axum") (r "^0.6") (f (quote ("headers"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (k 0)) (d (n "datafusion") (r "^36") (k 0)) (d (n "datafusion") (r "^36") (f (quote ("parquet"))) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (k 2)) (d (n "tower") (r "^0.4") (d #t) (k 2)) (d (n "tower-http") (r "^0.4") (f (quote ("trace" "cors"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 2)) (d (n "tracing-bunyan-formatter") (r "^0.3") (d #t) (k 2)) (d (n "tracing-log") (r "^0.2") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt" "ansi" "env-filter"))) (k 2)))) (h "1aj2lad9rq8x8c9jcp27184mp7dhmbndrrfv9h2ha1my1yzawcwj")))

(define-public crate-datafusion-odata-0.4.0 (c (n "datafusion-odata") (v "0.4.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "axum") (r "^0.6") (f (quote ("headers"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (k 0)) (d (n "datafusion") (r "^36") (k 0)) (d (n "datafusion") (r "^36") (f (quote ("parquet"))) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (k 2)) (d (n "tower") (r "^0.4") (d #t) (k 2)) (d (n "tower-http") (r "^0.4") (f (quote ("trace" "cors"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 2)) (d (n "tracing-bunyan-formatter") (r "^0.3") (d #t) (k 2)) (d (n "tracing-log") (r "^0.2") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt" "ansi" "env-filter"))) (k 2)))) (h "1xzazgz453a7ak10aqpgd74l2cnbq2sxvj4ngc85ci73mfyzd7i1")))

(define-public crate-datafusion-odata-37.0.0 (c (n "datafusion-odata") (v "37.0.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "axum") (r "^0.6") (f (quote ("headers"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (k 0)) (d (n "datafusion") (r "^37") (k 0)) (d (n "datafusion") (r "^37") (f (quote ("parquet"))) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (k 2)) (d (n "tower") (r "^0.4") (d #t) (k 2)) (d (n "tower-http") (r "^0.4") (f (quote ("trace" "cors"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 2)) (d (n "tracing-bunyan-formatter") (r "^0.3") (d #t) (k 2)) (d (n "tracing-log") (r "^0.2") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt" "ansi" "env-filter"))) (k 2)))) (h "0kqpba7fs55jxa4hmzdr7v7hpkibwawyz9lbygnhk8lna107xqk1")))

(define-public crate-datafusion-odata-37.1.0 (c (n "datafusion-odata") (v "37.1.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "axum") (r "^0.6") (f (quote ("headers"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (k 0)) (d (n "datafusion") (r "^37") (k 0)) (d (n "datafusion") (r "^37") (f (quote ("parquet"))) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "regex") (r "^1") (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (k 2)) (d (n "tower") (r "^0.4") (d #t) (k 2)) (d (n "tower-http") (r "^0.4") (f (quote ("trace" "cors"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 2)) (d (n "tracing-bunyan-formatter") (r "^0.3") (d #t) (k 2)) (d (n "tracing-log") (r "^0.2") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt" "ansi" "env-filter"))) (k 2)))) (h "06vpnv7ayf70gsjgwy57ha2mmj0gyrpkbyafzpjbabvzdgqvma1x")))

(define-public crate-datafusion-odata-36.0.0 (c (n "datafusion-odata") (v "36.0.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "axum") (r "^0.6") (f (quote ("headers"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (k 0)) (d (n "datafusion") (r "^36") (k 0)) (d (n "datafusion") (r "^36") (f (quote ("parquet"))) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "regex") (r "^1") (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (k 2)) (d (n "tower") (r "^0.4") (d #t) (k 2)) (d (n "tower-http") (r "^0.4") (f (quote ("trace" "cors"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 2)) (d (n "tracing-bunyan-formatter") (r "^0.3") (d #t) (k 2)) (d (n "tracing-log") (r "^0.2") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt" "ansi" "env-filter"))) (k 2)))) (h "0dr1qg37j50238y3c9fdfrl2f3pp8n5v2n6v241wgkv547rhzjcj")))

(define-public crate-datafusion-odata-36.1.0 (c (n "datafusion-odata") (v "36.1.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "axum") (r "^0.7") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (k 0)) (d (n "datafusion") (r "^36") (k 0)) (d (n "datafusion") (r "^36") (f (quote ("parquet"))) (k 2)) (d (n "http") (r "^1.1") (d #t) (k 0)) (d (n "hyper") (r "^1") (f (quote ("server"))) (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "regex") (r "^1") (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (k 2)) (d (n "tower") (r "^0.4") (d #t) (k 2)) (d (n "tower-http") (r "^0.5") (f (quote ("trace" "cors"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 2)) (d (n "tracing-bunyan-formatter") (r "^0.3") (d #t) (k 2)) (d (n "tracing-log") (r "^0.2") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt" "ansi" "env-filter"))) (k 2)))) (h "149paxwkp1ayap3m5s1g74jggydy947mrr6wnk96wz83pi3ihpw0")))

(define-public crate-datafusion-odata-37.2.0 (c (n "datafusion-odata") (v "37.2.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "axum") (r "^0.7") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (k 0)) (d (n "datafusion") (r "^37") (k 0)) (d (n "datafusion") (r "^37") (f (quote ("parquet"))) (k 2)) (d (n "http") (r "^1.1") (d #t) (k 0)) (d (n "hyper") (r "^1") (f (quote ("server"))) (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "regex") (r "^1") (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (k 2)) (d (n "tower") (r "^0.4") (d #t) (k 2)) (d (n "tower-http") (r "^0.5") (f (quote ("trace" "cors"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 2)) (d (n "tracing-bunyan-formatter") (r "^0.3") (d #t) (k 2)) (d (n "tracing-log") (r "^0.2") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt" "ansi" "env-filter"))) (k 2)))) (h "1yxmxq6c7vdx6l53h2k4mv92k2nr20zfgw9v6y9f6nmm8dcwgrgr")))

(define-public crate-datafusion-odata-38.0.0 (c (n "datafusion-odata") (v "38.0.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "axum") (r "^0.7") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (k 0)) (d (n "datafusion") (r "^38") (k 0)) (d (n "datafusion") (r "^38") (f (quote ("parquet"))) (k 2)) (d (n "http") (r "^1.1") (d #t) (k 0)) (d (n "hyper") (r "^1") (f (quote ("server"))) (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "regex") (r "^1") (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (k 2)) (d (n "tower") (r "^0.4") (d #t) (k 2)) (d (n "tower-http") (r "^0.5") (f (quote ("trace" "cors"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 2)) (d (n "tracing-bunyan-formatter") (r "^0.3") (d #t) (k 2)) (d (n "tracing-log") (r "^0.2") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt" "ansi" "env-filter"))) (k 2)))) (h "0amc54wb2dlcia92mb1srdm2lbryksaic9y6m59kv29q8gidb5nx")))

