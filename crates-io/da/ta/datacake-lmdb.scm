(define-module (crates-io da ta datacake-lmdb) #:use-module (crates-io))

(define-public crate-datacake-lmdb-0.1.0 (c (n "datacake-lmdb") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "datacake-crdt") (r "^0.4") (d #t) (k 0)) (d (n "datacake-eventual-consistency") (r "^0.4") (d #t) (k 0)) (d (n "datacake-eventual-consistency") (r "^0.4") (f (quote ("test-utils"))) (d #t) (k 2)) (d (n "datacake-node") (r "^0.3") (d #t) (k 2)) (d (n "flume") (r "^0.10") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heed") (r "^0.20.0-alpha.0") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt"))) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.16") (d #t) (k 2)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "08w9pvxnavafk3wgpqk4dlp9x7bx670pk9da640yibx9iyif6maz")))

(define-public crate-datacake-lmdb-0.2.0 (c (n "datacake-lmdb") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "datacake-crdt") (r "^0.4") (d #t) (k 0)) (d (n "datacake-eventual-consistency") (r "^0.5") (d #t) (k 0)) (d (n "datacake-eventual-consistency") (r "^0.5") (f (quote ("test-utils"))) (d #t) (k 2)) (d (n "datacake-node") (r "^0.4") (d #t) (k 2)) (d (n "flume") (r "^0.10") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heed") (r "^0.20.0-alpha.0") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt"))) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.16") (d #t) (k 2)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1h2f548x9m4bfv0rrw1736r735jj75asxcx3d43ga2yv3n2w0apn")))

