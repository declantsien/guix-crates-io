(define-module (crates-io da ng dangerous) #:use-module (crates-io))

(define-public crate-dangerous-0.0.0 (c (n "dangerous") (v "0.0.0") (h "0cq11mq3if0vr280hscbwkqlm5b1byh8m9vd5ig0xigkkyzhmkvq")))

(define-public crate-dangerous-0.1.0 (c (n "dangerous") (v "0.1.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)))) (h "1yd5jsx2mxpnjxl5vsvlmhrjrbj85g4h1kla5cx7dgdxswl531d8") (f (quote (("unicode" "unicode-width") ("std") ("full-context" "alloc") ("default" "full-context" "unicode") ("alloc"))))))

(define-public crate-dangerous-0.1.1 (c (n "dangerous") (v "0.1.1") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)))) (h "0jl0p68bxclq8152021nlh4ixjw7nw1jykhbdj3d0017rk8ir3sd") (f (quote (("unicode" "unicode-width") ("std") ("full-context" "alloc") ("default" "full-context" "unicode") ("alloc"))))))

(define-public crate-dangerous-0.2.0 (c (n "dangerous") (v "0.2.0") (d (list (d (n "bytecount") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)))) (h "0ph1anflywszzp738wg4xd9bdyb4kqsrslzsafagdhk39yc0hkm7") (f (quote (("unicode" "unicode-width") ("std") ("full-context" "alloc") ("default" "full-context" "bytecount" "box-expected" "unicode") ("box-expected" "alloc") ("alloc"))))))

(define-public crate-dangerous-0.3.0 (c (n "dangerous") (v "0.3.0") (d (list (d (n "bytecount") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)))) (h "13p2967xq3mnb476sd9zz78szvndr41lnnjm8gb5mksq4md8crxr") (f (quote (("unicode" "unicode-width") ("std") ("no-input-bound") ("full-context" "alloc") ("default" "full-context" "bytecount" "unicode") ("alloc"))))))

(define-public crate-dangerous-0.4.0 (c (n "dangerous") (v "0.4.0") (d (list (d (n "bytecount") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)))) (h "15m35c2zyg87gvxg7gs7c67kv0jr1icgph5hg7ii04laaq10bs2m") (f (quote (("unicode" "unicode-width") ("std") ("full-context" "alloc") ("default" "full-context" "bytecount" "unicode") ("alloc"))))))

(define-public crate-dangerous-0.5.0 (c (n "dangerous") (v "0.5.0") (d (list (d (n "bytecount") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)))) (h "1amnx4r6waijns1k24a28hy5f14g5nhs70pn08m1ws7kfzdh74ha") (f (quote (("unicode" "unicode-width") ("std") ("full-context" "alloc") ("default" "full-context" "bytecount" "unicode") ("alloc"))))))

(define-public crate-dangerous-0.6.0 (c (n "dangerous") (v "0.6.0") (d (list (d (n "bytecount") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "zc") (r "^0.2") (o #t) (k 0)) (d (n "zc") (r "^0.2") (d #t) (k 2)))) (h "0pk58fxxc08rgg7anzbhi4pwxfzc0vjx40dm5y8ypir5b7jv0c44") (f (quote (("unicode" "unicode-width") ("std") ("full-context" "alloc") ("default" "full-context" "bytecount" "unicode") ("alloc"))))))

(define-public crate-dangerous-0.7.0 (c (n "dangerous") (v "0.7.0") (d (list (d (n "bytecount") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "zc") (r "^0.3") (o #t) (k 0)) (d (n "zc") (r "^0.3") (d #t) (k 2)))) (h "1mr4zkxgw5ianncvk234l1icw72hwhdzxyrb3rrcryzkky7d462p") (f (quote (("unstable-const-generics") ("unicode" "unicode-width") ("std" "alloc") ("simd" "bytecount") ("retry") ("full-context" "alloc") ("default" "retry" "full-context" "simd" "unicode") ("alloc"))))))

(define-public crate-dangerous-0.8.0 (c (n "dangerous") (v "0.8.0") (d (list (d (n "bytecount") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "memchr") (r "^2.3") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "zc") (r "^0.3") (o #t) (k 0)) (d (n "zc") (r "^0.3") (d #t) (k 2)))) (h "0mgxvwzbjb0b3h6w8dfgs0ciyh8j91sqk5jhb34pyd4dsbw9xpw2") (f (quote (("unicode" "unicode-width") ("std" "alloc") ("simd" "memchr" "bytecount") ("retry") ("full-context" "alloc") ("default" "retry" "full-context" "simd" "unicode") ("alloc"))))))

(define-public crate-dangerous-0.9.0 (c (n "dangerous") (v "0.9.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "bytecount") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "colored-diff") (r "^0.2.2") (d #t) (k 2)) (d (n "imap-proto") (r "^0.12") (d #t) (k 2)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "memchr") (r "^2.3") (o #t) (k 0)) (d (n "nom") (r "^6") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "zc") (r "^0.4") (o #t) (k 0)) (d (n "zc") (r "^0.4") (d #t) (k 2)))) (h "1d3m7nmaz78l436wn6d1hi8pcm45xkihp11rzmly8p1cgk25anp9") (f (quote (("unicode" "unicode-width") ("std" "alloc") ("simd" "std" "memchr/std" "bytecount/runtime-dispatch-simd") ("full-backtrace" "alloc") ("default" "std" "full-backtrace" "simd" "unicode") ("alloc"))))))

(define-public crate-dangerous-0.10.0 (c (n "dangerous") (v "0.10.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "bytecount") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "colored-diff") (r "^0.2.2") (d #t) (k 2)) (d (n "imap-proto") (r "^0.14") (d #t) (k 2)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "memchr") (r "^2.4") (o #t) (k 0)) (d (n "nom") (r "^6") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "zc") (r "^0.4") (o #t) (k 0)) (d (n "zc") (r "^0.4") (d #t) (k 2)))) (h "04wy8zcjgjvr2yspy1np1ngninc73h4xvlwpv6snaax611zgmhvc") (f (quote (("unicode" "unicode-width") ("std" "alloc") ("simd" "std" "memchr/std" "bytecount/runtime-dispatch-simd") ("full-backtrace" "alloc") ("default" "std" "full-backtrace" "simd" "unicode") ("alloc"))))))

