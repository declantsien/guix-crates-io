(define-module (crates-io nd ar ndarray-vision) #:use-module (crates-io))

(define-public crate-ndarray-vision-0.1.0 (c (n "ndarray-vision") (v "0.1.0") (d (list (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.9.0") (d #t) (k 2)) (d (n "ndarray-stats") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)))) (h "0sm07gxz53spv4syf8nxjs6wa1w4997ma4k3law9k27lyjdchn4v")))

(define-public crate-ndarray-vision-0.1.1 (c (n "ndarray-vision") (v "0.1.1") (d (list (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.9.0") (d #t) (k 2)) (d (n "ndarray-stats") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)))) (h "0127572zavz53d7b2a4cyfxjsh19pgmqa6l5s4zym5gmj5f4jbb8")))

(define-public crate-ndarray-vision-0.2.0 (c (n "ndarray-vision") (v "0.2.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "ndarray") (r "^0.13") (k 0)) (d (n "ndarray-linalg") (r "^0.12") (k 0)) (d (n "ndarray-linalg") (r "^0.12") (f (quote ("intel-mkl"))) (d #t) (k 2)) (d (n "ndarray-rand") (r "^0.11.0") (d #t) (k 2)) (d (n "ndarray-stats") (r "^0.3") (k 0)) (d (n "noisy_float") (r "^0.1") (k 0)) (d (n "noisy_float") (r "^0.1.11") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)))) (h "19p5w3jjvsii7p5lfqriiizdmx4xqv0yj7ikbzfhylz9asswgiqs")))

(define-public crate-ndarray-vision-0.3.0 (c (n "ndarray-vision") (v "0.3.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx"))) (d #t) (k 2)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (f (quote ("intel-mkl"))) (d #t) (k 2)) (d (n "ndarray-rand") (r "^0.14.0") (d #t) (k 2)) (d (n "ndarray-stats") (r "^0.5") (k 0)) (d (n "noisy_float") (r "^0.2") (k 0)) (d (n "noisy_float") (r "^0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "1aaz7hqxzhrxzvrbflif8rh88imxbakzf8hkdz5rfskdgmm9m6c8") (f (quote (("transform" "ndarray-linalg") ("processing") ("morphology") ("format") ("enhancement") ("default" "enhancement" "format" "morphology" "processing" "transform"))))))

(define-public crate-ndarray-vision-0.4.0 (c (n "ndarray-vision") (v "0.4.0") (d (list (d (n "anyhow") (r "<1.0.49") (d #t) (k 2)) (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx"))) (d #t) (k 2)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (f (quote ("intel-mkl"))) (d #t) (k 2)) (d (n "ndarray-rand") (r "^0.14.0") (d #t) (k 2)) (d (n "ndarray-stats") (r "^0.5") (k 0)) (d (n "noisy_float") (r "^0.2") (k 0)) (d (n "noisy_float") (r "^0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "01d3dfw4qjyyibrjpin97n19qvb52pdbf2i1f7brhr9v2874g7f2") (f (quote (("transform" "ndarray-linalg") ("processing") ("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("morphology") ("intel-mkl" "ndarray-linalg/intel-mkl") ("format") ("enhancement") ("default" "enhancement" "format" "morphology" "processing" "transform"))))))

(define-public crate-ndarray-vision-0.5.0 (c (n "ndarray-vision") (v "0.5.0") (d (list (d (n "anyhow") (r "<1.0.49") (d #t) (k 2)) (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx"))) (d #t) (k 2)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (f (quote ("intel-mkl"))) (d #t) (k 2)) (d (n "ndarray-rand") (r "^0.14.0") (d #t) (k 2)) (d (n "ndarray-stats") (r "^0.5") (k 0)) (d (n "noisy_float") (r "^0.2") (k 0)) (d (n "noisy_float") (r "^0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "043800ycshkhqdbw23mk4mwwm884cqg699qkq8w00iy3g2ad47y9") (f (quote (("transform" "ndarray-linalg") ("processing") ("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("morphology") ("intel-mkl" "ndarray-linalg/intel-mkl") ("format") ("enhancement") ("default" "enhancement" "format" "morphology" "processing" "transform"))))))

(define-public crate-ndarray-vision-0.5.1 (c (n "ndarray-vision") (v "0.5.1") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx"))) (d #t) (k 2)) (d (n "ndarray-linalg") (r "^0.16") (o #t) (k 0)) (d (n "ndarray-rand") (r "^0.14.0") (d #t) (k 2)) (d (n "ndarray-stats") (r "^0.5") (k 0)) (d (n "noisy_float") (r "^0.2") (k 0)) (d (n "noisy_float") (r "^0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "png") (r "^0.17") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "1dvj3bwcawqs7f7khvqqy8bvsfqi6jkrmkbbdqm6pdj4140i3xrr") (f (quote (("transform" "ndarray-linalg") ("processing") ("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("morphology") ("intel-mkl" "ndarray-linalg/intel-mkl") ("format") ("enhancement") ("default" "enhancement" "format" "morphology" "processing" "transform"))))))

