(define-module (crates-io nd sp ndsparse) #:use-module (crates-io))

(define-public crate-ndsparse-0.1.0 (c (n "ndsparse") (v "0.1.0") (d (list (d (n "arrayvec") (r "^0.5") (o #t) (k 0)) (d (n "cl-traits") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "smallvec") (r "^1.2") (o #t) (k 0)) (d (n "staticvec") (r "^0.8") (o #t) (k 0)))) (h "1n2fs4w0gnhz9hzndl4gs5gdla7pgq33wxvm38p5xil9fkxq380r") (f (quote (("with_staticvec" "staticvec" "cl-traits/with_staticvec") ("with_smallvec" "cl-traits/with_smallvec" "smallvec") ("with_serde" "cl-traits/with_serde" "serde") ("with_rayon" "rayon" "std") ("with_rand" "rand") ("with_arrayvec" "arrayvec" "cl-traits/with_arrayvec") ("std" "rand/std" "serde/std") ("default") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.1.1 (c (n "ndsparse") (v "0.1.1") (d (list (d (n "arrayvec") (r "^0.5") (o #t) (k 0)) (d (n "cl-traits") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "smallvec") (r "^1.2") (o #t) (k 0)) (d (n "staticvec") (r "^0.8") (o #t) (k 0)))) (h "1r1razlb1a1v905ca6haw7033mfzw8gcdwyq1h4xjd54kg776r5w") (f (quote (("with_staticvec" "cl-traits/with_staticvec" "staticvec") ("with_smallvec" "cl-traits/with_smallvec" "smallvec") ("with_serde" "cl-traits/with_serde" "serde") ("with_rayon" "rayon" "std") ("with_rand" "rand") ("with_arrayvec" "arrayvec" "cl-traits/with_arrayvec") ("std" "rand/std" "serde/std") ("default") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.1.3 (c (n "ndsparse") (v "0.1.3") (d (list (d (n "cl-traits") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "staticvec") (r "^0.8") (o #t) (k 0)))) (h "12gj0r1jzvl4z2816ivjifgl25nf9jg0c0sah6rwj5dim51qpvab") (f (quote (("with_staticvec" "cl-traits/with_staticvec" "staticvec") ("with_smallvec" "cl-traits/with_smallvec") ("with_serde" "cl-traits/with_serde" "serde") ("with_rayon" "rayon") ("with_rand" "rand") ("with_arrayvec" "cl-traits/with_arrayvec") ("default") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.2.0 (c (n "ndsparse") (v "0.2.0") (d (list (d (n "cl-traits") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "staticvec") (r "^0.8") (o #t) (k 0)))) (h "1pskb3wrb092hngmli0v7ypqdwv7lq8ydmpkixvg5k67yljsla9k") (f (quote (("with_staticvec" "cl-traits/with_staticvec" "staticvec") ("with_smallvec" "cl-traits/with_smallvec") ("with_serde" "cl-traits/with_serde" "serde") ("with_rayon" "rayon") ("with_rand" "rand") ("with_arrayvec" "cl-traits/with_arrayvec") ("default") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.2.1 (c (n "ndsparse") (v "0.2.1") (d (list (d (n "cl-traits") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "staticvec") (r "^0.8") (o #t) (k 0)))) (h "1z0w1bgsfgk88x3hg6gzwlwxzx6qlc5s361mxkqm8f0qdsp1f3xv") (f (quote (("with_staticvec" "cl-traits/with_staticvec" "staticvec") ("with_smallvec" "cl-traits/with_smallvec") ("with_serde" "cl-traits/with_serde" "serde") ("with_rayon" "rayon") ("with_rand" "rand") ("with_arrayvec" "cl-traits/with_arrayvec") ("default") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.3.0 (c (n "ndsparse") (v "0.3.0") (d (list (d (n "cl-traits") (r "^0.6") (f (quote ("const_generics"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "staticvec") (r "^0.8") (o #t) (k 0)))) (h "0bqrrhwb3aim009wxxnql0z2ls2w12kcwl86jwdksh5qgb0a22km") (f (quote (("with_staticvec" "cl-traits/with_staticvec" "staticvec") ("with_smallvec" "cl-traits/with_smallvec") ("with_serde" "cl-traits/with_serde" "serde") ("with_rayon" "rayon") ("with_rand" "rand") ("with_arrayvec" "cl-traits/with_arrayvec") ("default") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.3.1 (c (n "ndsparse") (v "0.3.1") (d (list (d (n "cl-traits") (r "^0.6") (f (quote ("const_generics"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "staticvec") (r "^0.9") (o #t) (k 0)))) (h "146hil2ynb0yqcwcld0lbqgj474xf08d6hbzlq0l6kymkg1zhy5s") (f (quote (("with_staticvec" "cl-traits/with_staticvec" "staticvec") ("with_smallvec" "cl-traits/with_smallvec") ("with_serde" "cl-traits/with_serde" "serde") ("with_rayon" "rayon") ("with_rand" "rand") ("with_arrayvec" "cl-traits/with_arrayvec") ("default") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.4.0 (c (n "ndsparse") (v "0.4.0") (d (list (d (n "cl-traits") (r "^1.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "staticvec") (r "^0.9") (o #t) (k 0)))) (h "1b3hzqyxq6nxn71m89isx2y2mp2khsrgvhps0vsg2q80cqdpvswl") (f (quote (("with_staticvec" "const_generics" "cl-traits/with_staticvec" "staticvec") ("with_smallvec" "cl-traits/with_smallvec") ("with_serde" "cl-traits/with_serde" "serde") ("with_rayon" "rayon") ("with_rand" "rand") ("with_arrayvec" "cl-traits/with_arrayvec") ("default") ("const_generics" "cl-traits/const_generics") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.5.0 (c (n "ndsparse") (v "0.5.0") (d (list (d (n "cl-traits") (r "^1.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "staticvec") (r "^0.9") (o #t) (k 0)))) (h "0013r6b1r02iszsqpyxfp5x3wmk81vxk2q77w66vdvfnxxk9939j") (f (quote (("with_staticvec" "const_generics" "cl-traits/with_staticvec" "staticvec") ("with_smallvec" "cl-traits/with_smallvec") ("with_serde" "cl-traits/with_serde" "serde") ("with_rayon" "rayon") ("with_rand" "rand") ("with_arrayvec" "cl-traits/with_arrayvec") ("default") ("const_generics" "cl-traits/const_generics") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.5.1 (c (n "ndsparse") (v "0.5.1") (d (list (d (n "cl-traits") (r "^1.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "staticvec") (r "^0.9") (o #t) (k 0)))) (h "04ink7pkxjaj40gs6vb0r85a00a7f9bv15dkkpfpshfyz17gn3mw") (f (quote (("with_staticvec" "cl-traits/with_staticvec" "const_generics" "staticvec") ("with_smallvec" "cl-traits/with_smallvec") ("with_serde" "cl-traits/with_serde" "serde") ("with_rayon" "rayon") ("with_rand" "rand") ("with_arrayvec" "cl-traits/with_arrayvec") ("std" "alloc" "cl-traits/std" "rand/std" "serde/std" "staticvec/std") ("default") ("const_generics" "cl-traits/const_generics") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.5.3 (c (n "ndsparse") (v "0.5.3") (d (list (d (n "cl-traits") (r "^1.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "staticvec") (r "^0.9") (o #t) (k 0)))) (h "0r8hz3c5qcwwr8wacb2zw12q39aq6hkxgi9y81p8x7sdcrws0vm4") (f (quote (("with_staticvec" "cl-traits/with_staticvec" "const_generics" "staticvec" "staticvec/serde_support" "staticvec/std") ("with_smallvec" "cl-traits/with_smallvec") ("with_serde" "cl-traits/with_serde" "rand/serde1" "serde") ("with_rayon" "rayon" "std") ("with_rand" "rand") ("with_arrayvec" "cl-traits/with_arrayvec") ("std" "alloc" "cl-traits/std" "rand/std" "serde/std") ("default") ("const_generics" "cl-traits/const_generics") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.6.0 (c (n "ndsparse") (v "0.6.0") (d (list (d (n "arrayvec") (r "^0.5") (o #t) (k 0)) (d (n "cl-traits") (r "^2.0") (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "smallvec") (r "^1.2") (o #t) (k 0)) (d (n "staticvec") (r "^0.9") (o #t) (k 0)) (d (n "tinyvec") (r "^0.3") (o #t) (k 0)))) (h "14k1l9issn9pyyh1cl23w6sr7grrngdvx15qx0c10rf6xpvyr01z") (f (quote (("with-tinyvec" "cl-traits/tinyvec" "tinyvec") ("with-staticvec" "cl-traits/with-staticvec" "const-generics" "staticvec" "staticvec/serde_support" "staticvec/std") ("with-smallvec" "cl-traits/with-smallvec" "smallvec") ("with-serde" "cl-traits/with-serde" "arrayvec/serde" "rand/serde1" "serde" "smallvec/serde") ("with-rayon" "rayon" "std") ("with-rand" "rand") ("with-arrayvec" "arrayvec" "cl-traits/with-arrayvec") ("std" "alloc" "arrayvec/std" "cl-traits/std" "rand/std" "serde/std") ("default") ("const-generics" "cl-traits/const-generics") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc" "tinyvec/alloc"))))))

(define-public crate-ndsparse-0.7.0 (c (n "ndsparse") (v "0.7.0") (d (list (d (n "cl-traits") (r "^4.0") (k 0)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "16nqc8pbs0ib2w0x76shd0l28yb5sn4ax4dz4wf99kihan03arf9") (f (quote (("with-serde" "cl-traits/with-serde" "rand/serde1" "serde") ("with-rayon" "rayon" "std") ("with-rand" "rand") ("std" "alloc" "cl-traits/std" "rand/std" "serde/std") ("default") ("const-generics" "cl-traits/const-generics") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.7.1 (c (n "ndsparse") (v "0.7.1") (d (list (d (n "cl-traits") (r "^4.0") (k 0)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "05llsdr5gk0lkqwn9rfv3mncy9vknly1nb2s1axw2ysyyz54cqv5") (f (quote (("with-serde" "cl-traits/with-serde" "rand/serde1" "serde") ("with-rayon" "rayon" "std") ("with-rand" "rand") ("std" "alloc" "cl-traits/std" "rand/std" "serde/std") ("default") ("const-generics" "cl-traits/const-generics") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.7.2 (c (n "ndsparse") (v "0.7.2") (d (list (d (n "cl-traits") (r "^4.0") (k 0)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "02kcv82aldd3l83xlg6fdv931jz96dh5bdn1q6618yxskp1vii5k") (f (quote (("with-serde" "cl-traits/with-serde" "rand/serde1" "serde") ("with-rayon" "rayon" "std") ("with-rand" "rand") ("std" "alloc" "cl-traits/std" "rand/std" "serde/std") ("default") ("const-generics" "cl-traits/const-generics") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.7.3 (c (n "ndsparse") (v "0.7.3") (d (list (d (n "cl-traits") (r "^4.0") (k 0)) (d (n "rand") (r "^0.7") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "0i17fi9ig2gj7acaqy56f4m6zl7bcn6wz1fmjz7kgf6a0m56rcra") (f (quote (("with-serde" "cl-traits/with-serde" "rand/serde1" "serde") ("with-rayon" "rayon" "std") ("with-rand" "rand") ("std" "alloc" "cl-traits/std" "rand/std" "serde/std") ("default") ("const-generics" "cl-traits/const-generics") ("alloc" "cl-traits/alloc" "rand/alloc" "serde/alloc"))))))

(define-public crate-ndsparse-0.8.0 (c (n "ndsparse") (v "0.8.0") (d (list (d (n "cl-traits") (r "^5.0") (k 0)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde-big-array") (r "^0.3") (f (quote ("const-generics"))) (o #t) (k 0)))) (h "1923vdgrgy63w3bgk33p3gky6ybw6knlxgv6zw27hh1jbp21hk82") (f (quote (("with-serde" "serde" "serde-big-array") ("with-rayon" "rayon" "std") ("with-rand" "rand") ("std" "alloc" "cl-traits/std") ("default") ("alloc" "cl-traits/alloc"))))))

(define-public crate-ndsparse-0.8.1 (c (n "ndsparse") (v "0.8.1") (d (list (d (n "cl-traits") (r "^6.0") (k 0)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde-big-array") (r "^0.3") (f (quote ("const-generics"))) (o #t) (k 0)))) (h "0947sni993wr1l0j301ib5fa20vbsjfd0kk6809xxzca0kwsp44h") (f (quote (("with-serde" "serde" "serde-big-array") ("with-rayon" "rayon" "std") ("with-rand" "rand") ("std" "alloc" "cl-traits/std") ("default") ("alloc" "cl-traits/alloc"))))))

