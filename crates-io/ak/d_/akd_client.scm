(define-module (crates-io ak d_ akd_client) #:use-module (crates-io))

(define-public crate-akd_client-0.4.0 (c (n "akd_client") (v "0.4.0") (d (list (d (n "akd") (r "^0.4.0") (d #t) (k 2)) (d (n "blake3") (r "^1.3.1") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.1") (o #t) (k 0)) (d (n "sha3") (r "^0.10.0") (o #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.79") (f (quote ("serde-serialize"))) (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.13") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "winter-crypto") (r "^0.2") (d #t) (k 2)) (d (n "winter-math") (r "^0.2") (d #t) (k 2)) (d (n "winter-utils") (r "^0.2") (d #t) (k 2)))) (h "0607jra99p2smi24298nxyakv1xav5f6drvca5x214ki4qpfm60q") (f (quote (("wasm" "wasm-bindgen" "serde") ("sha512" "sha2") ("sha3_512" "sha3") ("sha3_256" "sha3") ("sha256" "sha2") ("nostd") ("default" "blake3"))))))

(define-public crate-akd_client-0.5.2 (c (n "akd_client") (v "0.5.2") (d (list (d (n "blake3") (r "^1.3.1") (o #t) (k 0)) (d (n "curve25519-dalek") (r "^3.2") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.1") (o #t) (k 0)) (d (n "sha3") (r "^0.10.0") (o #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.79") (f (quote ("serde-serialize"))) (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.13") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "winter-crypto") (r "^0.2") (d #t) (k 2)) (d (n "winter-math") (r "^0.2") (d #t) (k 2)) (d (n "winter-utils") (r "^0.2") (d #t) (k 2)))) (h "0b3x6ga86pwvlcw0yy4ibilnpkq57xmbkfrmv95kc780aavbdyzx") (f (quote (("wasm" "wasm-bindgen" "serde") ("vrf" "curve25519-dalek" "ed25519-dalek") ("sha512" "sha2") ("sha3_512" "sha3") ("sha3_256" "sha3") ("sha256" "sha2") ("nostd") ("default" "blake3" "vrf"))))))

(define-public crate-akd_client-0.5.5 (c (n "akd_client") (v "0.5.5") (d (list (d (n "blake3") (r "^1.3.1") (o #t) (k 0)) (d (n "curve25519-dalek") (r "^3") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.1") (o #t) (k 0)) (d (n "sha3") (r "^0.10.0") (o #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.79") (f (quote ("serde-serialize"))) (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.13") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "winter-crypto") (r "^0.2") (d #t) (k 2)) (d (n "winter-math") (r "^0.2") (d #t) (k 2)) (d (n "winter-utils") (r "^0.2") (d #t) (k 2)))) (h "0a72fzhxjvvpv7l2yqdc657d54s01r689mhr38qd2fw0gq9r25i9") (f (quote (("wasm" "wasm-bindgen" "serde") ("vrf" "curve25519-dalek" "ed25519-dalek") ("sha512" "sha2") ("sha3_512" "sha3") ("sha3_256" "sha3") ("sha256" "sha2") ("nostd") ("default" "blake3" "vrf"))))))

(define-public crate-akd_client-0.6.1 (c (n "akd_client") (v "0.6.1") (d (list (d (n "blake3") (r "^1.3.1") (o #t) (k 0)) (d (n "curve25519-dalek") (r "^3") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.1") (o #t) (k 0)) (d (n "sha3") (r "^0.10.0") (o #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.79") (f (quote ("serde-serialize"))) (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.13") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "winter-crypto") (r "^0.2") (d #t) (k 2)) (d (n "winter-math") (r "^0.2") (d #t) (k 2)) (d (n "winter-utils") (r "^0.2") (d #t) (k 2)))) (h "0csfzr26vj2i9rgqmqfnpkknqjb3wx9pgh2i4vphwcx5g7nj6ncr") (f (quote (("wasm" "wasm-bindgen" "serde") ("vrf" "curve25519-dalek" "ed25519-dalek") ("sha512" "sha2") ("sha3_512" "sha3") ("sha3_256" "sha3") ("sha256" "sha2") ("nostd") ("default" "blake3" "vrf"))))))

(define-public crate-akd_client-0.6.2 (c (n "akd_client") (v "0.6.2") (d (list (d (n "blake3") (r "^1.3.1") (o #t) (k 0)) (d (n "curve25519-dalek") (r "^3") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.1") (o #t) (k 0)) (d (n "sha3") (r "^0.10.0") (o #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.79") (f (quote ("serde-serialize"))) (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.13") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "winter-crypto") (r "^0.2") (d #t) (k 2)) (d (n "winter-math") (r "^0.2") (d #t) (k 2)) (d (n "winter-utils") (r "^0.2") (d #t) (k 2)))) (h "0w6s70d8cj8dk74l1z4wz5aplv2s6f4p634wyvvy1lawbkviwmxd") (f (quote (("wasm" "wasm-bindgen" "serde") ("vrf" "curve25519-dalek" "ed25519-dalek") ("sha512" "sha2") ("sha3_512" "sha3") ("sha3_256" "sha3") ("sha256" "sha2") ("nostd") ("default" "blake3" "vrf"))))))

(define-public crate-akd_client-0.7.1 (c (n "akd_client") (v "0.7.1") (d (list (d (n "blake3") (r "^1.3.1") (o #t) (k 0)) (d (n "curve25519-dalek") (r "^3") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.1") (o #t) (k 0)) (d (n "sha3") (r "^0.10.0") (o #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.79") (f (quote ("serde-serialize"))) (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.13") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "winter-crypto") (r "^0.2") (d #t) (k 2)) (d (n "winter-math") (r "^0.2") (d #t) (k 2)) (d (n "winter-utils") (r "^0.2") (d #t) (k 2)))) (h "1gkbp1vbbc1l7dlqnd4l849fxl0wcci7r1f3y591im2k11vplmhr") (f (quote (("wasm" "wasm-bindgen" "serde") ("vrf" "curve25519-dalek" "ed25519-dalek") ("sha512" "sha2") ("sha3_512" "sha3") ("sha3_256" "sha3") ("sha256" "sha2") ("nostd") ("default" "blake3" "vrf"))))))

(define-public crate-akd_client-0.7.6 (c (n "akd_client") (v "0.7.6") (d (list (d (n "akd") (r "^0.7.4") (f (quote ("vrf" "public-tests"))) (o #t) (d #t) (k 0)) (d (n "blake3") (r "^1.3.1") (o #t) (k 0)) (d (n "curve25519-dalek") (r "^3") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1") (f (quote ("u64_backend" "rand"))) (o #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "protobuf") (r "=3.2.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.1") (o #t) (k 0)) (d (n "sha3") (r "^0.10.0") (o #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.79") (f (quote ("serde-serialize"))) (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.13") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "winter-crypto") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "winter-crypto") (r "^0.2") (d #t) (k 2)) (d (n "winter-math") (r "^0.2") (d #t) (k 2)) (d (n "winter-utils") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "winter-utils") (r "^0.2") (d #t) (k 2)))) (h "0rw9xbnynzr1w6ia57xr5inc0p9il1pcfbhg2zyly0j73h8071v4") (f (quote (("wasm" "wasm-bindgen" "serde_serialization") ("vrf" "curve25519-dalek" "ed25519-dalek") ("sha512" "sha2") ("sha3_512" "sha3") ("sha3_256" "sha3") ("sha256" "sha2") ("serde_serialization" "serde" "serde_json" "ed25519-dalek/serde") ("nostd") ("default" "blake3" "vrf") ("converters" "akd" "winter-crypto" "winter-utils"))))))

(define-public crate-akd_client-0.7.7 (c (n "akd_client") (v "0.7.7") (d (list (d (n "akd") (r "^0.7.7") (f (quote ("public-tests"))) (o #t) (d #t) (k 0)) (d (n "blake3") (r "^1.3.1") (o #t) (k 0)) (d (n "curve25519-dalek") (r "^3") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1") (f (quote ("u64_backend" "rand"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "protobuf") (r "=3.2.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.1") (o #t) (k 0)) (d (n "sha3") (r "^0.10.0") (o #t) (k 0)) (d (n "tokio") (r "^1.10") (f (quote ("full"))) (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.79") (f (quote ("serde-serialize"))) (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.13") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "winter-crypto") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "winter-crypto") (r "^0.2") (d #t) (k 2)) (d (n "winter-math") (r "^0.2") (d #t) (k 2)) (d (n "winter-utils") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "winter-utils") (r "^0.2") (d #t) (k 2)))) (h "0721yizz4848djaj81i0s95z614a4gidpbdm2py8cxqfgassz96n") (f (quote (("wasm" "wasm-bindgen" "serde_serialization") ("sha512" "sha2") ("sha3_512" "sha3") ("sha3_256" "sha3") ("sha256" "sha2") ("serde_serialization" "serde" "serde_json" "ed25519-dalek/serde") ("nostd") ("default" "blake3") ("converters" "akd" "winter-crypto" "winter-utils"))))))

(define-public crate-akd_client-0.8.0 (c (n "akd_client") (v "0.8.0") (d (list (d (n "akd_core") (r "^0.8.0") (f (quote ("vrf"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)))) (h "1878z67nir0rvzyp3442bpzsksm7g0rmxj3574vah8q8i8wiq299") (f (quote (("wasm" "wasm-bindgen" "protobuf" "akd_core/protobuf") ("sha512" "akd_core/sha512") ("sha3_512" "akd_core/sha3_512") ("sha3_256" "akd_core/sha3_256") ("sha256" "akd_core/sha256") ("protobuf_serialization" "protobuf" "akd_core/protobuf") ("nostd" "akd_core/nostd") ("default" "blake3") ("blake3" "akd_core/blake3"))))))

(define-public crate-akd_client-0.8.2 (c (n "akd_client") (v "0.8.2") (d (list (d (n "akd_core") (r "^0.8.0") (f (quote ("vrf"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)))) (h "1z6ppdl61i5fwkrp10lqr58wpf8djbmc8568jm5wnqndhg5v7rnk") (f (quote (("wasm" "wasm-bindgen" "protobuf" "akd_core/protobuf") ("sha512" "akd_core/sha512") ("sha3_512" "akd_core/sha3_512") ("sha3_256" "akd_core/sha3_256") ("sha256" "akd_core/sha256") ("protobuf_serialization" "protobuf" "akd_core/protobuf") ("nostd" "akd_core/nostd") ("default" "blake3") ("blake3" "akd_core/blake3"))))))

(define-public crate-akd_client-0.8.3 (c (n "akd_client") (v "0.8.3") (d (list (d (n "akd_core") (r "^0.8.0") (f (quote ("vrf"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)))) (h "19z6ynfmcxr70jy2bw897baciz7pb1svz5x4cqg53vhyqws38c4j") (f (quote (("wasm" "wasm-bindgen" "protobuf" "akd_core/protobuf") ("sha512_256" "akd_core/sha512_256") ("sha512" "akd_core/sha512") ("sha3_512" "akd_core/sha3_512") ("sha3_256" "akd_core/sha3_256") ("sha256" "akd_core/sha256") ("protobuf_serialization" "protobuf" "akd_core/protobuf") ("nostd" "akd_core/nostd") ("default" "blake3") ("blake3" "akd_core/blake3"))))))

(define-public crate-akd_client-0.8.4 (c (n "akd_client") (v "0.8.4") (d (list (d (n "akd_core") (r "^0.8.0") (f (quote ("vrf"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)))) (h "1v0655xqz738l3ywl5jw1zsf6qw64vv23iy86maxyg0g0phm0pw6") (f (quote (("wasm" "wasm-bindgen" "protobuf" "akd_core/protobuf") ("sha512_256" "akd_core/sha512_256") ("sha512" "akd_core/sha512") ("sha3_512" "akd_core/sha3_512") ("sha3_256" "akd_core/sha3_256") ("sha256" "akd_core/sha256") ("protobuf_serialization" "protobuf" "akd_core/protobuf") ("nostd" "akd_core/nostd") ("default" "blake3") ("blake3" "akd_core/blake3"))))))

(define-public crate-akd_client-0.8.5 (c (n "akd_client") (v "0.8.5") (d (list (d (n "akd_core") (r "^0.8.0") (f (quote ("vrf"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)))) (h "1jvll0lxss7235f6nwjr2lk56lkaszac1ivpqfc3cbn074gn6ry9") (f (quote (("wasm" "wasm-bindgen" "protobuf" "akd_core/protobuf") ("sha512_256" "akd_core/sha512_256") ("sha512" "akd_core/sha512") ("sha3_512" "akd_core/sha3_512") ("sha3_256" "akd_core/sha3_256") ("sha256" "akd_core/sha256") ("protobuf_serialization" "protobuf" "akd_core/protobuf") ("nostd" "akd_core/nostd") ("default" "blake3") ("blake3" "akd_core/blake3"))))))

(define-public crate-akd_client-0.8.6 (c (n "akd_client") (v "0.8.6") (d (list (d (n "akd_core") (r "^0.8.0") (f (quote ("vrf"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)))) (h "0chlydr268mspphzkkj0395yzp3y2c3l9958pqfs5lbpp5djp28k") (f (quote (("wasm" "wasm-bindgen" "protobuf" "akd_core/protobuf") ("sha512_256" "akd_core/sha512_256") ("sha512" "akd_core/sha512") ("sha3_512" "akd_core/sha3_512") ("sha3_256" "akd_core/sha3_256") ("sha256" "akd_core/sha256") ("protobuf_serialization" "protobuf" "akd_core/protobuf") ("nostd" "akd_core/nostd") ("default" "blake3") ("blake3" "akd_core/blake3"))))))

(define-public crate-akd_client-0.8.7 (c (n "akd_client") (v "0.8.7") (d (list (d (n "akd_core") (r "^0.8") (f (quote ("vrf"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1230dnf13wghh0d4yvkamr84cg20p3nysi9b5c0swjsfz37dr3g8") (f (quote (("wasm" "wasm-bindgen" "protobuf" "akd_core/protobuf") ("sha512_256" "akd_core/sha512_256") ("sha512" "akd_core/sha512") ("sha3_512" "akd_core/sha3_512") ("sha3_256" "akd_core/sha3_256") ("sha256" "akd_core/sha256") ("protobuf_serialization" "protobuf" "akd_core/protobuf") ("nostd" "akd_core/nostd") ("default" "blake3") ("blake3" "akd_core/blake3"))))))

(define-public crate-akd_client-0.8.8 (c (n "akd_client") (v "0.8.8") (d (list (d (n "akd_core") (r "^0.8.7") (f (quote ("vrf"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1az7m07icxkdwhxhm9pp9c37kc1c0h296f8bvsizyixad34ncrxf") (f (quote (("wasm" "wasm-bindgen" "protobuf" "akd_core/protobuf") ("sha512_256" "akd_core/sha512_256") ("sha512" "akd_core/sha512") ("sha3_512" "akd_core/sha3_512") ("sha3_256" "akd_core/sha3_256") ("sha256" "akd_core/sha256") ("protobuf_serialization" "protobuf" "akd_core/protobuf") ("nostd" "akd_core/nostd") ("default" "blake3") ("blake3" "akd_core/blake3"))))))

(define-public crate-akd_client-0.8.9 (c (n "akd_client") (v "0.8.9") (d (list (d (n "akd_core") (r "^0.8.9") (f (quote ("vrf"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1p61p3rm2i32n2s1jq58cgims54npqxb3ynxfnfwmcgjmaij2snm") (f (quote (("wasm" "wasm-bindgen" "protobuf" "akd_core/protobuf") ("sha512_256" "akd_core/sha512_256") ("sha512" "akd_core/sha512") ("sha3_512" "akd_core/sha3_512") ("sha3_256" "akd_core/sha3_256") ("sha256" "akd_core/sha256") ("protobuf_serialization" "protobuf" "akd_core/protobuf") ("nostd" "akd_core/nostd") ("default" "blake3") ("blake3" "akd_core/blake3"))))))

