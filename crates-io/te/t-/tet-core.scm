(define-module (crates-io te t- tet-core) #:use-module (crates-io))

(define-public crate-tet-core-0.0.0 (c (n "tet-core") (v "0.0.0") (h "1r9kks147w2mrv6m9brk3ifypjblhiw41njawlay2a2hf4s9hldb") (y #t)))

(define-public crate-tet-core-2.0.1 (c (n "tet-core") (v "2.0.1") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^2.0.1") (f (quote ("derive"))) (k 0) (p "tetsy-scale-codec")) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "debug-derive") (r "^2.0.0") (d #t) (k 0)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "externalities") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.11") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parking_lot") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.2.2") (d #t) (k 2)) (d (n "regex") (r "^1.4.2") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.7.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "serializer") (r "^2.0.0") (d #t) (k 2)) (d (n "sha2") (r "^0.9.2") (o #t) (k 0)) (d (n "tetcore-bip39") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "tetcore-std") (r "^2.0.0") (k 0)) (d (n "tetcore-storage") (r "^2.0.0") (k 0)) (d (n "tetsy-hash-db") (r "^0.15.2") (k 0)) (d (n "tetsy-hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "tetsy-primitive-types") (r "^0.9.0") (f (quote ("codec"))) (k 0)) (d (n "tetsy-util-mem") (r "^0.9.0") (f (quote ("tetsy-primitive-types"))) (k 0)) (d (n "thiserror") (r "^1.0.21") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "tp-runtime-interface") (r "^2.0.1") (k 0)) (d (n "twasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (k 0)))) (h "08w4kxy1smlxvh6p6ahhmbcrnblkz6b3wla99z6f42lcq6vg2ka0") (f (quote (("std" "full_crypto" "log/std" "thiserror" "twasmi" "lazy_static" "parking_lot" "tetsy-primitive-types/std" "tetsy-primitive-types/serde" "tetsy-primitive-types/byteorder" "tetsy-primitive-types/rustc-hex" "impl-serde" "codec/std" "tetsy-hash256-std-hasher/std" "tetsy-hash-db/std" "tetcore-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "tetcore-bip39" "tiny-bip39" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "schnorrkel/serde" "regex" "num-traits/std" "tiny-keccak" "debug-derive/std" "externalities" "tetcore-storage/std" "tp-runtime-interface/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "tp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-tet-core-2.0.2 (c (n "tet-core") (v "2.0.2") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^2.0.1") (f (quote ("derive"))) (k 0) (p "tetsy-scale-codec")) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "debug-derive") (r "^2.0.2") (d #t) (k 0)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "externalities") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.11") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parking_lot") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.2.2") (d #t) (k 2)) (d (n "regex") (r "^1.4.2") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.7.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "serializer") (r "^2.0.2") (d #t) (k 2)) (d (n "sha2") (r "^0.9.2") (o #t) (k 0)) (d (n "tetcore-bip39") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "tetcore-std") (r "^2.0.2") (k 0)) (d (n "tetcore-storage") (r "^2.0.2") (k 0)) (d (n "tetsy-hash-db") (r "^0.15.2") (k 0)) (d (n "tetsy-hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "tetsy-primitive-types") (r "^0.9.0") (f (quote ("codec"))) (k 0)) (d (n "tetsy-util-mem") (r "^0.9.0") (f (quote ("tetsy-primitive-types"))) (k 0)) (d (n "thiserror") (r "^1.0.21") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "tp-runtime-interface") (r "^2.0.2") (k 0)) (d (n "twasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (k 0)))) (h "0c8nymlfj9q0gaiah8b2mszzy7qy5wdh4y8a6sqf6pvxk74mxgds") (f (quote (("std" "full_crypto" "log/std" "thiserror" "twasmi" "lazy_static" "parking_lot" "tetsy-primitive-types/std" "tetsy-primitive-types/serde" "tetsy-primitive-types/byteorder" "tetsy-primitive-types/rustc-hex" "impl-serde" "codec/std" "tetsy-hash256-std-hasher/std" "tetsy-hash-db/std" "tetcore-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "tetcore-bip39" "tiny-bip39" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "schnorrkel/serde" "regex" "num-traits/std" "tiny-keccak" "debug-derive/std" "externalities" "tetcore-storage/std" "tp-runtime-interface/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "tp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-tet-core-2.1.2 (c (n "tet-core") (v "2.1.2") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^2.0.1") (f (quote ("derive"))) (k 0) (p "tetsy-scale-codec")) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "debug-derive") (r "^2.1.2") (d #t) (k 0)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "externalities") (r "^2.1.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.11") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parking_lot") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.2.2") (d #t) (k 2)) (d (n "regex") (r "^1.4.2") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.7.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "serializer") (r "^2.1.2") (d #t) (k 2)) (d (n "sha2") (r "^0.9.2") (o #t) (k 0)) (d (n "tetcore-bip39") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "tetcore-std") (r "^2.1.2") (k 0)) (d (n "tetcore-storage") (r "^2.1.2") (k 0)) (d (n "tetsy-hash-db") (r "^0.15.2") (k 0)) (d (n "tetsy-hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "tetsy-primitive-types") (r "^0.9.1") (f (quote ("codec"))) (k 0)) (d (n "tetsy-util-mem") (r "^0.9.1") (f (quote ("tetsy-primitive-types"))) (k 0)) (d (n "thiserror") (r "^1.0.21") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "tp-runtime-interface") (r "^2.1.2") (k 0)) (d (n "twasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (k 0)))) (h "1mj8zf1fh52ck6h5m43j2si44frirzayprs1ljz34h2mx6r2iyyw") (f (quote (("std" "full_crypto" "log/std" "thiserror" "twasmi" "lazy_static" "parking_lot" "tetsy-primitive-types/std" "tetsy-primitive-types/serde" "tetsy-primitive-types/byteorder" "tetsy-primitive-types/rustc-hex" "impl-serde" "codec/std" "tetsy-hash256-std-hasher/std" "tetsy-hash-db/std" "tetcore-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "tetcore-bip39" "tiny-bip39" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "schnorrkel/serde" "regex" "num-traits/std" "tiny-keccak" "debug-derive/std" "externalities" "tetcore-storage/std" "tp-runtime-interface/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "tp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

