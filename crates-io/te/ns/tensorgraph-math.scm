(define-module (crates-io te ns tensorgraph-math) #:use-module (crates-io))

(define-public crate-tensorgraph-math-0.1.0 (c (n "tensorgraph-math") (v "0.1.0") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.0") (d #t) (k 0)))) (h "0pgy0wmzwh6510fllr5rmx4755m6y5mq1nl7m93qamjh87nx5g9b") (f (quote (("openblas" "tensorgraph-sys/openblas") ("netlib" "tensorgraph-sys/netlib") ("intel-mkl" "tensorgraph-sys/intel-mkl") ("default" "openblas" "cublas") ("cublas" "tensorgraph-sys/cublas") ("blis" "tensorgraph-sys/blis") ("accelerate" "tensorgraph-sys/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.1 (c (n "tensorgraph-math") (v "0.1.1") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.1") (d #t) (k 0)))) (h "16zsqjhnqgh7ligwk2hvs201i7j6y432dy47a8g5zh9si175h37h") (f (quote (("openblas" "tensorgraph-sys/openblas") ("netlib" "tensorgraph-sys/netlib") ("intel-mkl" "tensorgraph-sys/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cublas") ("blis" "tensorgraph-sys/blis") ("accelerate" "tensorgraph-sys/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.2 (c (n "tensorgraph-math") (v "0.1.2") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "blas-src") (r "^0.8") (d #t) (k 0)) (d (n "blas-sys") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rcublas-sys") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.2") (d #t) (k 0)))) (h "0bphww2rizybfsxj75g2q9jy0avvd7nay3jx8wpisjiynbk1b33p") (f (quote (("openblas" "blas-sys" "blas-src/openblas") ("netlib" "blas-sys" "blas-src/netlib") ("matrixmultiply_threading" "matrixmultiply/threading") ("intel-mkl" "blas-sys" "blas-src/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cuda" "rcublas-sys") ("blis" "blas-sys" "blas-src/blis") ("accelerate" "blas-sys" "blas-src/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.3 (c (n "tensorgraph-math") (v "0.1.3") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "blas-src") (r "^0.8") (d #t) (k 0)) (d (n "blas-sys") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rcublas-sys") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.3") (d #t) (k 0)))) (h "0lw36l1jrg1lszz9i76gbng5d5ncfjd5bxz72x3f1l9bf7cszvlh") (f (quote (("openblas" "blas-sys" "blas-src/openblas") ("netlib" "blas-sys" "blas-src/netlib") ("matrixmultiply_threading" "matrixmultiply/threading") ("intel-mkl" "blas-sys" "blas-src/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cuda" "rcublas-sys") ("blis" "blas-sys" "blas-src/blis") ("accelerate" "blas-sys" "blas-src/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.4 (c (n "tensorgraph-math") (v "0.1.4") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "blas-src") (r "^0.8") (d #t) (k 0)) (d (n "blas-sys") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rcublas-sys") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.4") (d #t) (k 0)))) (h "1164j7dp4kh12mi8z4zigjbvgnpn1ikvxc279vd0dp18ll8i6gk9") (f (quote (("openblas" "blas-sys" "blas-src/openblas") ("netlib" "blas-sys" "blas-src/netlib") ("matrixmultiply_threading" "matrixmultiply/threading") ("intel-mkl" "blas-sys" "blas-src/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cuda" "rcublas-sys") ("blis" "blas-sys" "blas-src/blis") ("accelerate" "blas-sys" "blas-src/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.5 (c (n "tensorgraph-math") (v "0.1.5") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "blas-src") (r "^0.8") (d #t) (k 0)) (d (n "blas-sys") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rcublas-sys") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.5") (d #t) (k 0)))) (h "16ima3nqmaryk6vyg86dmbjl8wffyv0z3jrv1cs48g8whmlwmx7q") (f (quote (("openblas" "blas-sys" "blas-src/openblas") ("netlib" "blas-sys" "blas-src/netlib") ("matrixmultiply_threading" "matrixmultiply/threading") ("intel-mkl" "blas-sys" "blas-src/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cuda" "rcublas-sys") ("blis" "blas-sys" "blas-src/blis") ("accelerate" "blas-sys" "blas-src/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.6 (c (n "tensorgraph-math") (v "0.1.6") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "blas-src") (r "^0.8") (d #t) (k 0)) (d (n "blas-sys") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rcublas-sys") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.6") (d #t) (k 0)))) (h "16r7np67x7z8ibd5chsl3d88fkhbk99wkpwgwc09zjq3yj2jhm45") (f (quote (("openblas" "blas-sys" "blas-src/openblas") ("netlib" "blas-sys" "blas-src/netlib") ("matrixmultiply_threading" "matrixmultiply/threading") ("intel-mkl" "blas-sys" "blas-src/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cuda" "rcublas-sys") ("blis" "blas-sys" "blas-src/blis") ("accelerate" "blas-sys" "blas-src/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.7 (c (n "tensorgraph-math") (v "0.1.7") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "blas-src") (r "^0.8") (d #t) (k 0)) (d (n "blas-sys") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rcublas-sys") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.7") (d #t) (k 0)))) (h "15bqvlfy5baiixw1ay9r1xg1lbm8y9z5anmyk0h8z4w9y35ri0a7") (f (quote (("openblas" "blas-sys" "blas-src/openblas") ("netlib" "blas-sys" "blas-src/netlib") ("matrixmultiply_threading" "matrixmultiply/threading") ("intel-mkl" "blas-sys" "blas-src/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cuda" "rcublas-sys") ("blis" "blas-sys" "blas-src/blis") ("accelerate" "blas-sys" "blas-src/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.8 (c (n "tensorgraph-math") (v "0.1.8") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "blas-src") (r "^0.8") (d #t) (k 0)) (d (n "blas-sys") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rcublas-sys") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.8") (d #t) (k 0)))) (h "1iwb48ydjzgxl71v334vlypfdx8nl58ndkkcsmh6d417svyb0xhl") (f (quote (("openblas" "blas-sys" "blas-src/openblas") ("netlib" "blas-sys" "blas-src/netlib") ("matrixmultiply_threading" "matrixmultiply" "matrixmultiply/threading") ("intel-mkl" "blas-sys" "blas-src/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cuda" "rcublas-sys") ("blis" "blas-sys" "blas-src/blis") ("accelerate" "blas-sys" "blas-src/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.9 (c (n "tensorgraph-math") (v "0.1.9") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "blas-src") (r "^0.8") (d #t) (k 0)) (d (n "blas-sys") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rcublas-sys") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.9") (d #t) (k 0)))) (h "02sva4pi83yzrsrc8giw8nwf0pgzg1970yp8x14a3dag1hi7xnd7") (f (quote (("openblas" "blas-sys" "blas-src/openblas") ("netlib" "blas-sys" "blas-src/netlib") ("matrixmultiply_threading" "matrixmultiply" "matrixmultiply/threading") ("intel-mkl" "blas-sys" "blas-src/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cuda" "rcublas-sys") ("blis" "blas-sys" "blas-src/blis") ("accelerate" "blas-sys" "blas-src/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.10 (c (n "tensorgraph-math") (v "0.1.10") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "blas-src") (r "^0.8") (d #t) (k 0)) (d (n "blas-sys") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rcublas-sys") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.10") (d #t) (k 0)))) (h "0n8p0azkyhrw606j7zggarl2934qhnzsxby231c49pksyfawbn07") (f (quote (("openblas" "blas-sys" "blas-src/openblas") ("netlib" "blas-sys" "blas-src/netlib") ("matrixmultiply_threading" "matrixmultiply" "matrixmultiply/threading") ("intel-mkl" "blas-sys" "blas-src/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cuda" "rcublas-sys") ("blis" "blas-sys" "blas-src/blis") ("accelerate" "blas-sys" "blas-src/accelerate"))))))

(define-public crate-tensorgraph-math-0.1.11 (c (n "tensorgraph-math") (v "0.1.11") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "blas-src") (r "^0.8") (d #t) (k 0)) (d (n "blas-sys") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rcublas-sys") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.7") (f (quote ("const_generics"))) (o #t) (d #t) (k 0)) (d (n "tensorgraph-sys") (r "=0.1.11") (d #t) (k 0)))) (h "00mkglkd3z302ydvz9yck1lk22w34r3zj788h1ai2vhppzddv07i") (f (quote (("openblas" "blas-sys" "blas-src/openblas") ("netlib" "blas-sys" "blas-src/netlib") ("intel-mkl" "blas-sys" "blas-src/intel-mkl") ("default") ("cublas" "tensorgraph-sys/cuda" "rcublas-sys") ("blis" "blas-sys" "blas-src/blis") ("accelerate" "blas-sys" "blas-src/accelerate"))))))

