(define-module (crates-io wg pu wgpu-core) #:use-module (crates-io))

(define-public crate-wgpu-core-0.5.0 (c (n "wgpu-core") (v "0.5.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "battery") (r "^0.7") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"windows\", target_os = \"dragonfly\", target_os = \"freebsd\"))") (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.5") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (f (quote ("x11"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.5") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "peek-poke") (r "^0.2") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)) (d (n "wgt") (r "^0.5") (f (quote ("peek-poke"))) (d #t) (k 0) (p "wgpu-types")))) (h "15qfx824ssxqnvk3im800rmk8i99829hdx7c4c23ynm3gnmh415i") (f (quote (("serde" "wgt/serde" "serde_crate") ("metal-auto-capture" "gfx-backend-metal/auto-capture") ("default"))))))

(define-public crate-wgpu-core-0.5.1 (c (n "wgpu-core") (v "0.5.1") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "battery") (r "^0.7") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"windows\", target_os = \"dragonfly\", target_os = \"freebsd\"))") (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.5") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (f (quote ("x11"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.5") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "peek-poke") (r "^0.2") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)) (d (n "wgt") (r "^0.5") (f (quote ("peek-poke"))) (d #t) (k 0) (p "wgpu-types")))) (h "03bxqbbny364s2lj4z7zwf0k3skdl5dp8k046sbahj78y627swv4") (f (quote (("serde" "wgt/serde" "serde_crate") ("metal-auto-capture" "gfx-backend-metal/auto-capture") ("default"))))))

(define-public crate-wgpu-core-0.5.2 (c (n "wgpu-core") (v "0.5.2") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "battery") (r "^0.7") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"windows\", target_os = \"dragonfly\", target_os = \"freebsd\"))") (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.5") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (f (quote ("x11"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.5") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "peek-poke") (r "^0.2") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)) (d (n "wgt") (r "^0.5") (f (quote ("peek-poke"))) (d #t) (k 0) (p "wgpu-types")))) (h "1x1cyakwkxc4qqgxs384l3zvldp8fmkp8fjpdsc2ff3q5xm0adz2") (f (quote (("serde" "wgt/serde" "serde_crate") ("metal-auto-capture" "gfx-backend-metal/auto-capture") ("default"))))))

(define-public crate-wgpu-core-0.5.3 (c (n "wgpu-core") (v "0.5.3") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "battery") (r "^0.7") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"windows\", target_os = \"dragonfly\", target_os = \"freebsd\"))") (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.5") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (f (quote ("x11"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.5") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "peek-poke") (r "^0.2") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)) (d (n "wgt") (r "^0.5") (f (quote ("peek-poke"))) (d #t) (k 0) (p "wgpu-types")))) (h "19krs706wa7jg48hx61mh1nlmamydkykgq1sh6acfx6q88j2q98w") (f (quote (("serde" "wgt/serde" "serde_crate") ("metal-auto-capture" "gfx-backend-metal/auto-capture") ("default"))))))

(define-public crate-wgpu-core-0.5.4 (c (n "wgpu-core") (v "0.5.4") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "battery") (r "^0.7") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"windows\", target_os = \"dragonfly\", target_os = \"freebsd\"))") (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.5") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (f (quote ("x11"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.5") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "peek-poke") (r "^0.2") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)) (d (n "wgt") (r "^0.5") (f (quote ("peek-poke"))) (d #t) (k 0) (p "wgpu-types")))) (h "1wi60nfzz729msdf2h5jzad5za4lyhqxi86r472f23f2s8sjl8ah") (f (quote (("serde" "wgt/serde" "serde_crate") ("metal-auto-capture" "gfx-backend-metal/auto-capture") ("default"))))))

(define-public crate-wgpu-core-0.5.5 (c (n "wgpu-core") (v "0.5.5") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "battery") (r "^0.7") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"windows\", target_os = \"dragonfly\", target_os = \"freebsd\"))") (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.5") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (f (quote ("x11"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.5") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "peek-poke") (r "^0.2") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8.1") (d #t) (k 0)) (d (n "wgt") (r "^0.5") (f (quote ("peek-poke"))) (d #t) (k 0) (p "wgpu-types")))) (h "1c52jv354f6148s99p4qzxdplyx21dkmrb2g2mpz9c420y70k4xh") (f (quote (("serde" "wgt/serde" "serde_crate") ("metal-auto-capture" "gfx-backend-metal/auto-capture") ("default"))))))

(define-public crate-wgpu-core-0.5.6 (c (n "wgpu-core") (v "0.5.6") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "battery") (r "^0.7") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"macos\", target_os = \"windows\", target_os = \"dragonfly\", target_os = \"freebsd\"))") (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.5") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (f (quote ("x11"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.5") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.5") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "peek-poke") (r "^0.2") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8.1") (d #t) (k 0)) (d (n "wgt") (r "^0.5") (f (quote ("peek-poke"))) (d #t) (k 0) (p "wgpu-types")))) (h "1q6l9ijyl0l95cy4rwiycbxn2xjbsd866a4nrrdlch5knfvd0zzh") (f (quote (("serde" "wgt/serde" "serde_crate") ("metal-auto-capture" "gfx-backend-metal/auto-capture") ("default"))))))

(define-public crate-wgpu-core-0.6.0 (c (n "wgpu-core") (v "0.6.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.6") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.6") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6.1") (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-descriptor") (r "^0.2") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.6") (d #t) (k 0) (p "gfx-hal")) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.2") (f (quote ("spirv"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wgt") (r "^0.6") (d #t) (k 0) (p "wgpu-types")))) (h "1h7fg6jfjwd8vv8h6j19zgv8nvnhssi0c39v0dm8203ic2lmhm9s") (f (quote (("trace" "ron" "serde" "wgt/trace") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay") ("default"))))))

(define-public crate-wgpu-core-0.6.1 (c (n "wgpu-core") (v "0.6.1") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.6") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.6") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6.1") (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-descriptor") (r "^0.2") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.6") (d #t) (k 0) (p "gfx-hal")) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.2") (f (quote ("spirv"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wgt") (r "^0.6") (d #t) (k 0) (p "wgpu-types")))) (h "0lslllh1hww8rx27jqfdmv3l6ngv1phh3a4k07r8dlk6sckap1q0") (f (quote (("trace" "ron" "serde" "wgt/trace") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay") ("default"))))))

(define-public crate-wgpu-core-0.6.2 (c (n "wgpu-core") (v "0.6.2") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.6") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.6") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6.1") (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-descriptor") (r "^0.2") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.6") (d #t) (k 0) (p "gfx-hal")) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.2") (f (quote ("spirv"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wgt") (r "^0.6") (d #t) (k 0) (p "wgpu-types")))) (h "1mzz4q4saa3vz1iprc4aqg8nb5bv2s6xzr4yfsadjmqd5l4zj7da") (f (quote (("trace" "ron" "serde" "wgt/trace") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay") ("default"))))))

(define-public crate-wgpu-core-0.6.3 (c (n "wgpu-core") (v "0.6.3") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.6") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.6") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6.1") (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-descriptor") (r "^0.2") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.6") (d #t) (k 0) (p "gfx-hal")) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.2") (f (quote ("spirv"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wgt") (r "^0.6") (d #t) (k 0) (p "wgpu-types")))) (h "1fb5i37sf8zdmpy274v3gqrmi2fjsah8dsazq5dnvhkghz11jz9i") (f (quote (("trace" "ron" "serde" "wgt/trace") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay") ("default"))))))

(define-public crate-wgpu-core-0.6.4 (c (n "wgpu-core") (v "0.6.4") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.6") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.6") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6.1") (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-descriptor") (r "^0.2") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.6") (d #t) (k 0) (p "gfx-hal")) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.2") (f (quote ("spirv"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wgt") (r "^0.6") (d #t) (k 0) (p "wgpu-types")))) (h "1phhcz2bsfwd383vq9awjj93f0qq2pbipp3yg4839haw1mc6l9lc") (f (quote (("trace" "ron" "serde" "wgt/trace") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay") ("default"))))))

(define-public crate-wgpu-core-0.6.5 (c (n "wgpu-core") (v "0.6.5") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-dx12") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-empty") (r "^0.6") (d #t) (k 0)) (d (n "gfx-backend-metal") (r "^0.6") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6.1") (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-descriptor") (r "^0.2") (d #t) (k 0)) (d (n "gfx-memory") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.6") (d #t) (k 0) (p "gfx-hal")) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.2") (f (quote ("spirv"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wgt") (r "^0.6") (d #t) (k 0) (p "wgpu-types")))) (h "0ra3b4rhds9iicins8ha19y4wxs7aaafyv4fxdvnvq4hmvp7sj7a") (f (quote (("trace" "ron" "serde" "wgt/trace") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay") ("default"))))))

(define-public crate-wgpu-core-0.7.0 (c (n "wgpu-core") (v "0.7.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.7") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-dx12") (r "^0.7") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-empty") (r "^0.7") (d #t) (k 0)) (d (n "gfx-backend-gl") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-gl") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gfx-backend-metal") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.7") (o #t) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gpu-alloc") (r "^0.3") (f (quote ("tracing"))) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.1") (f (quote ("tracing"))) (d #t) (k 0)) (d (n "hal") (r "^0.7") (d #t) (k 0) (p "gfx-hal")) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.3.1") (f (quote ("spv-in" "spv-out" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wgt") (r "^0.7") (d #t) (k 0) (p "wgpu-types")))) (h "18bavjb33i1jnwdjf7p61kzcj7jrm1i81hnsfp5n9i06r75hl2qd") (f (quote (("trace" "ron" "serde" "wgt/trace" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.7.1 (c (n "wgpu-core") (v "0.7.1") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.7") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-dx12") (r "^0.7") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-empty") (r "^0.7") (d #t) (k 0)) (d (n "gfx-backend-gl") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-gl") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gfx-backend-metal") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.7") (o #t) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gpu-alloc") (r "^0.3") (f (quote ("tracing"))) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.1") (f (quote ("tracing"))) (d #t) (k 0)) (d (n "hal") (r "^0.7") (d #t) (k 0) (p "gfx-hal")) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.3.1") (f (quote ("spv-in" "spv-out" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wgt") (r "^0.7") (d #t) (k 0) (p "wgpu-types")))) (h "1a7zkpj3bgsccmrakwb2rclkwrhjf2bbxi89mihn88vjbp6a57y8") (f (quote (("trace" "ron" "serde" "wgt/trace" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.8.0 (c (n "wgpu-core") (v "0.8.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-dx12") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-empty") (r "^0.8") (d #t) (k 0)) (d (n "gfx-backend-gl") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-gl") (r "^0.8") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gfx-backend-metal") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.8") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.8") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gpu-alloc") (r "^0.4") (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.8") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.4") (f (quote ("spv-in" "spv-out" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.8") (d #t) (k 0) (p "wgpu-types")))) (h "098l4ngmyqxvl692mp92mycr21hlqk57nxyq5pz05r8zx6gxbasr") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde") ("default") ("cross" "gfx-backend-metal/cross" "gfx-backend-gl/cross"))))))

(define-public crate-wgpu-core-0.8.1 (c (n "wgpu-core") (v "0.8.1") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-dx12") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-empty") (r "^0.8") (d #t) (k 0)) (d (n "gfx-backend-gl") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-gl") (r "^0.8") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gfx-backend-metal") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.8") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.8") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gpu-alloc") (r "^0.4") (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.8") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.4") (f (quote ("spv-in" "spv-out" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.8") (d #t) (k 0) (p "wgpu-types")))) (h "1683nxm4b7pnmk23j0pwiqhj2hxda5dbblhiqwkkjvqfzilc6mhx") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde") ("default") ("cross" "gfx-backend-metal/cross" "gfx-backend-gl/cross"))))))

(define-public crate-wgpu-core-0.9.0 (c (n "wgpu-core") (v "0.9.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-dx12") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-empty") (r "^0.9") (d #t) (k 0)) (d (n "gfx-backend-gl") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-gl") (r "^0.9") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gfx-backend-metal") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gpu-alloc") (r "^0.4") (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.9") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.5") (f (quote ("spv-in" "spv-out" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.9") (d #t) (k 0) (p "wgpu-types")))) (h "0w3psk4idskl1ri7a9vqmvjms4x7ycbmmxndfyi82mxfsfncix9a") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde") ("default") ("cross" "gfx-backend-metal/cross" "gfx-backend-gl/cross"))))))

(define-public crate-wgpu-core-0.9.1 (c (n "wgpu-core") (v "0.9.1") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-dx12") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-empty") (r "^0.9") (d #t) (k 0)) (d (n "gfx-backend-gl") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-gl") (r "^0.9") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gfx-backend-metal") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gpu-alloc") (r "^0.4") (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.9") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.5") (f (quote ("spv-in" "spv-out" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.9") (d #t) (k 0) (p "wgpu-types")))) (h "1rhw2jcicdqvj2c1ydsnanhrihw8vwvfvqqrdlq885f12awwwny4") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde") ("default") ("cross" "gfx-backend-metal/cross" "gfx-backend-gl/cross"))))))

(define-public crate-wgpu-core-0.9.2 (c (n "wgpu-core") (v "0.9.2") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-dx12") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-empty") (r "^0.9") (d #t) (k 0)) (d (n "gfx-backend-gl") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-gl") (r "^0.9") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gfx-backend-metal") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gpu-alloc") (r "^0.4") (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.9") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.5") (f (quote ("spv-in" "spv-out" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.9") (d #t) (k 0) (p "wgpu-types")))) (h "172pmhd8k72g1spa4jr7hzfga1nzvgv3p4z7nhx754l485g8m2lm") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde") ("default") ("cross" "gfx-backend-metal/cross" "gfx-backend-gl/cross"))))))

(define-public crate-wgpu-core-0.10.0 (c (n "wgpu-core") (v "0.10.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.10") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")))) (h "0aia9pkkp49kgrmripbhrgv6zcd6vs3fg17s18n0sg68n03mc0rc") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.10.1 (c (n "wgpu-core") (v "0.10.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.10") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10.1") (d #t) (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")))) (h "1shcmjgnxcd3xhcdv7ggd89fnkznylmyvbv37m1wg541syl964x8") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.10.2 (c (n "wgpu-core") (v "0.10.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.10") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10.1") (d #t) (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")))) (h "1j3l4x8pwmj7wdldr7l8kmzihjx3410vbbzk3c2iwccx65f9fns2") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.10.3 (c (n "wgpu-core") (v "0.10.3") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.10") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10.4") (d #t) (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")))) (h "1ifq9dzwvzz41lqv41szqjp3izdy5nvwqwivr35jc1cpij8ls6sz") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.10.4 (c (n "wgpu-core") (v "0.10.4") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.10") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.10.4") (d #t) (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")))) (h "168c168726fb8vnxnw6r8ch8vlyhsqp1y62qdkpkqvm3fcjccqzr") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.11.0 (c (n "wgpu-core") (v "0.11.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.11") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")))) (h "19kmss1fk6scxhihqbz1x5518abk53sdqv7j0ilimdj5anx7dbs5") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.11.1 (c (n "wgpu-core") (v "0.11.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.11") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")))) (h "0ybwdnjshx35jj44i6x6czda52gk1n82xmdwncf1cjb2mkllmli1") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.11.2 (c (n "wgpu-core") (v "0.11.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.11") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")))) (h "0ikzd0vyk57rh8dpa24g5dsmn1knda5ypymjzsqw4cjvi2jbzp1v") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.11.3 (c (n "wgpu-core") (v "0.11.3") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.11") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.11") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")))) (h "13mk5h71if4s7k73kxf847gjrqxz81hznxgd4c7as667nqkhcq1m") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.12.0 (c (n "wgpu-core") (v "0.12.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.12") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.8") (f (quote ("span" "validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.12") (d #t) (k 0) (p "wgpu-types")))) (h "1bdg0ags8wqnfi3gsff5w216qhbp106p6nhabz0x0vx6jcfkg6k5") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.12.1 (c (n "wgpu-core") (v "0.12.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.12") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.8") (f (quote ("span" "validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.12") (d #t) (k 0) (p "wgpu-types")))) (h "113szwik647k7m70l3c9g79wgmg9snrz22f3l1z0z33jknfcpsfg") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.12.2 (c (n "wgpu-core") (v "0.12.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.12") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("vulkan" "dx12" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.12") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.8") (f (quote ("span" "validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.12") (d #t) (k 0) (p "wgpu-types")))) (h "0z84akvq3qgl56wqzbvwgpbiqvldnxcvcpdkyxawlhdq1q08qs64") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.13.0 (c (n "wgpu-core") (v "0.13.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.13") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("vulkan" "dx12" "dx11" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("emscripten"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.9") (f (quote ("span" "validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("HtmlCanvasElement"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.13") (d #t) (k 0) (p "wgpu-types")))) (h "0b071aym74l7cqz7dm5nvf01r5zs0s9bz7sq0d1i1gq23mk5bc8b") (f (quote (("vulkan-portability" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("id32") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.13.1 (c (n "wgpu-core") (v "0.13.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.13") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("vulkan" "dx12" "dx11" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("emscripten"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.9") (f (quote ("span" "validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("HtmlCanvasElement"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.13") (d #t) (k 0) (p "wgpu-types")))) (h "1127wx22syf54npikfpspw6azxzv1b5v28w0fqm1pz84c2zacv16") (f (quote (("vulkan-portability" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("id32") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.13.2 (c (n "wgpu-core") (v "0.13.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.13") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("vulkan" "dx12" "dx11" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.13") (f (quote ("emscripten"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.9") (f (quote ("span" "validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("HtmlCanvasElement"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.13") (d #t) (k 0) (p "wgpu-types")))) (h "18jvgczigr381z4pjjphkf0i5vmj04zvi8a9v2zc3l69vs42gfc9") (f (quote (("vulkan-portability" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("id32") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.14.0 (c (n "wgpu-core") (v "0.14.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.14") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.14") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.14") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.14") (f (quote ("vulkan" "dx12" "dx11" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.14") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.14") (f (quote ("emscripten"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.10") (f (quote ("clone" "span" "validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.14") (d #t) (k 0) (p "wgpu-types")))) (h "0a5xb5inykzlq5hp8ks8kb9la8ipdbdbf0pfjbwwlm1h76nlrlbk") (f (quote (("vulkan-portability" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("id32") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.7.2 (c (n "wgpu-core") (v "0.7.2") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.7") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-dx12") (r "^0.7") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-empty") (r "^0.7") (d #t) (k 0)) (d (n "gfx-backend-gl") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-gl") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gfx-backend-metal") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.7") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.7") (o #t) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gpu-alloc") (r "^0.3") (f (quote ("tracing"))) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.1") (f (quote ("tracing"))) (d #t) (k 0)) (d (n "hal") (r "^0.7") (d #t) (k 0) (p "gfx-hal")) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.3.1") (f (quote ("spv-in" "spv-out" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wgt") (r "^0.7") (d #t) (k 0) (p "wgpu-types")))) (h "0ac48mhl9zw3ddxg7yspcyq3mxgz0nqx8yfz7gyk2raafid6mli0") (f (quote (("trace" "ron" "serde" "wgt/trace" "naga/serialize") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "naga/deserialize") ("default"))))))

(define-public crate-wgpu-core-0.8.2 (c (n "wgpu-core") (v "0.8.2") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-dx12") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-empty") (r "^0.8") (d #t) (k 0)) (d (n "gfx-backend-gl") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-gl") (r "^0.8") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gfx-backend-metal") (r "^0.8") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.8") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.8") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gpu-alloc") (r "^0.4") (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.8") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.4") (f (quote ("spv-in" "spv-out" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.8") (d #t) (k 0) (p "wgpu-types")))) (h "1xzyjl85a63x8lggwpam8gy4x5rbzbhdbnmmq95a031qc4z51cfk") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde") ("default") ("cross" "gfx-backend-metal/cross" "gfx-backend-gl/cross"))))))

(define-public crate-wgpu-core-0.9.3 (c (n "wgpu-core") (v "0.9.3") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "copyless") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "gfx-backend-dx11") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-dx12") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gfx-backend-empty") (r "^0.9") (d #t) (k 0)) (d (n "gfx-backend-gl") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-gl") (r "^0.9") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gfx-backend-metal") (r "^0.9") (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), all(unix, not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9") (f (quote ("naga"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0)) (d (n "gpu-alloc") (r "^0.4") (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.1") (d #t) (k 0)) (d (n "hal") (r "^0.9") (d #t) (k 0) (p "gfx-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "loom") (r "^0.3") (d #t) (k 2)) (d (n "naga") (r "^0.5") (f (quote ("spv-in" "spv-out" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.9.3") (d #t) (k 0) (p "wgpu-types")))) (h "1ygxkwjh4nlrbqsknzwplczfkq45ygy4fq5wig02n1l4xp17gp3a") (f (quote (("trace" "ron" "serde" "wgt/trace" "arrayvec/serde") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde") ("default") ("cross" "gfx-backend-metal/cross" "gfx-backend-gl/cross"))))))

(define-public crate-wgpu-core-0.14.2 (c (n "wgpu-core") (v "0.14.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hal") (r "^0.14") (d #t) (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.14") (f (quote ("metal"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), any(target_os = \"ios\", target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.14") (f (quote ("vulkan" "gles" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.14") (f (quote ("vulkan" "dx12" "dx11" "renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), windows))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.14") (f (quote ("gles"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.14") (f (quote ("emscripten"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.10") (f (quote ("clone" "span" "validate" "wgsl-in"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.14") (d #t) (k 0) (p "wgpu-types")))) (h "1ji42zs2dn19p3pdq62zcfdypmsz29rllm6mdw3wdvpq9qld2030") (f (quote (("vulkan-portability" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("id32") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.15.0 (c (n "wgpu-core") (v "0.15.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "hal") (r "^0.15") (d #t) (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("clone" "span" "validate"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.15") (d #t) (k 0) (p "wgpu-types")))) (h "1fdybacq0yjs34w6y01a61nkpbizqq3aqv2hnbnacmz552z627xy") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("portable_features" "gles" "strict_asserts" "trace" "replay" "serial-pass" "id32" "wgsl") ("metal" "hal/metal") ("id32") ("gles" "hal/gles") ("emscripten" "hal/emscripten") ("dx12" "hal/dx12") ("dx11" "hal/dx11") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.15.1 (c (n "wgpu-core") (v "0.15.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "hal") (r "^0.15") (d #t) (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("clone" "span" "validate"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.15") (d #t) (k 0) (p "wgpu-types")))) (h "1zrzkxnpqkxppbdwvrz2x6008fsp74vg162scj95fcqfjj6l0cbi") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("portable_features" "gles" "strict_asserts" "trace" "replay" "serial-pass" "id32" "wgsl") ("metal" "hal/metal") ("id32") ("gles" "hal/gles") ("emscripten" "hal/emscripten") ("dx12" "hal/dx12") ("dx11" "hal/dx11") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.16.0 (c (n "wgpu-core") (v "0.16.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.16") (d #t) (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("clone" "span" "validate"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.16") (d #t) (k 0) (p "wgpu-types")))) (h "16mxmcagd5zkfkxlfdj205lwi18s3lhq0p7r4n0dhl5sl0qflnv2") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("id32") ("gles" "hal/gles") ("dx12" "hal/dx12") ("dx11" "hal/dx11") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.16.1 (c (n "wgpu-core") (v "0.16.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.16") (d #t) (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("clone" "span" "validate"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.16") (d #t) (k 0) (p "wgpu-types")))) (h "1hpq8vy3s34bbd4209czsw3s18vwlrpsd64qldq5n3dznhvq4iwg") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("id32") ("gles" "hal/gles") ("dx12" "hal/dx12") ("dx11" "hal/dx11") ("default") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.17.0 (c (n "wgpu-core") (v "0.17.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.17") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("clone" "span" "validate"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.17") (d #t) (k 0) (p "wgpu-types")))) (h "1hjx0y4b7gkgpnq8zg0rqm9dxp7vs8nwj9cj77vh5xl6jd6lbxzc") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("link" "hal/link") ("id32") ("gles" "hal/gles") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dx12" "hal/dx12") ("dx11" "hal/dx11") ("default" "link") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.17.1 (c (n "wgpu-core") (v "0.17.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.17") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("clone" "span" "validate"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.17") (d #t) (k 0) (p "wgpu-types")))) (h "1rras4ja95c0fd140akv9nh3sga3j008qzf2sgpcwc0s63fl92hg") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("link" "hal/link") ("id32") ("gles" "hal/gles") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dx12" "hal/dx12") ("dx11" "hal/dx11") ("default" "link") ("angle" "hal/gles"))))))

(define-public crate-wgpu-core-0.18.0 (c (n "wgpu-core") (v "0.18.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.18.0") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.14.0") (f (quote ("clone" "span" "validate"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.18.0") (d #t) (k 0) (p "wgpu-types")))) (h "19mfcv4x5ypbrm6yzxh3mfcpcai0sizqynd4dfsskm66rpfh4zl3") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("link" "hal/link") ("id32") ("gles" "hal/gles") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dx12" "hal/dx12") ("dx11" "hal/dx11") ("default" "link")))) (r "1.65")))

(define-public crate-wgpu-core-0.18.1 (c (n "wgpu-core") (v "0.18.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.18.0") (k 0) (p "wgpu-hal")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.14.0") (f (quote ("clone" "span" "validate"))) (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.18.0") (d #t) (k 0) (p "wgpu-types")))) (h "09i7653il0aaqh4xxnyb66amrxzdb2i320b0kv3q37hy5pbc34gg") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("link" "hal/link") ("id32") ("gles" "hal/gles") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dx12" "hal/dx12") ("dx11" "hal/dx11") ("default" "link")))) (r "1.65")))

(define-public crate-wgpu-core-0.19.0 (c (n "wgpu-core") (v "0.19.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.19.0") (k 0) (p "wgpu-hal")) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")))) (h "1v9hiqg0fl9dax2z5i57dm4i60jr9m7g8kd6k46xl2h6si8y85bb") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("resource_log_info") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("link" "hal/link") ("gles" "hal/gles") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dx12" "hal/dx12") ("default" "link") ("api_log_info")))) (r "1.70")))

(define-public crate-wgpu-core-0.19.2 (c (n "wgpu-core") (v "0.19.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.19.0") (k 0) (p "wgpu-hal")) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")))) (h "10ga3371h9g4p2h8w04yydy6xyvfvrf557b0hgb8pmraqsjvd2qc") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("resource_log_info") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("link" "hal/link") ("gles" "hal/gles") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dx12" "hal/dx12") ("default" "link") ("api_log_info")))) (r "1.70")))

(define-public crate-wgpu-core-0.19.3 (c (n "wgpu-core") (v "0.19.3") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.19.0") (k 0) (p "wgpu-hal")) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")))) (h "0y0z765slkvp4j5ybi5a8710pikpjyccawm8isyf02phq8rv1xpr") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("resource_log_info") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("link" "hal/link") ("gles" "hal/gles") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dx12" "hal/dx12") ("default" "link") ("api_log_info")))) (r "1.70")))

(define-public crate-wgpu-core-0.19.4 (c (n "wgpu-core") (v "0.19.4") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.19.0") (k 0) (p "wgpu-hal")) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")))) (h "0fmzd5rjga26yh96qi57244sv6y25d7pc94yk9f9xflrzhjlbf98") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("serial-pass" "serde" "wgt/serde" "arrayvec/serde") ("resource_log_info") ("replay" "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("link" "hal/link") ("gles" "hal/gles") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dx12" "hal/dx12") ("default" "link") ("api_log_info")))) (r "1.70")))

(define-public crate-wgpu-core-0.20.0 (c (n "wgpu-core") (v "0.20.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.14") (o #t) (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "document-features") (r "^0.2.8") (d #t) (k 0)) (d (n "hal") (r "^0.20.0") (k 0) (p "wgpu-hal")) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.20.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.69") (f (quote ("HtmlCanvasElement" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.20.0") (d #t) (k 0) (p "wgpu-types")))) (h "07zgvwfqbkwzb0cxm2zxd7ddzm7zbzarg7ngffffaqz7lpm8csmc") (f (quote (("wgsl" "naga/wgsl-in") ("vulkan" "hal/vulkan") ("trace" "ron" "serde" "naga/serialize") ("strict_asserts" "wgt/strict_asserts") ("resource_log_info") ("replay" "serde" "naga/deserialize") ("renderdoc" "hal/renderdoc") ("metal" "hal/metal") ("link" "hal/link") ("glsl" "naga/glsl-in") ("gles" "hal/gles") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dx12" "hal/dx12") ("default" "link") ("api_log_info")))) (s 2) (e (quote (("spirv" "naga/spv-in" "dep:bytemuck") ("serde" "dep:serde" "wgt/serde" "arrayvec/serde")))) (r "1.74")))

