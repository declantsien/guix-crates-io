(define-module (crates-io wg pu wgpu) #:use-module (crates-io))

(define-public crate-wgpu-0.1.0 (c (n "wgpu") (v "0.1.0") (d (list (d (n "arrayvec") (r "^0.4") (d #t) (k 0)) (d (n "wgpu-native") (r "^0.1") (d #t) (k 0)))) (h "1y3ji7pl2csigw6b5r82idip5gkpb8l7z9dw2aph3ygrbl1l5mjc") (f (quote (("winit" "wgpu-native/winit") ("vulkan" "wgpu-native/gfx-backend-vulkan") ("metal" "wgpu-native/gfx-backend-metal") ("dx12" "wgpu-native/gfx-backend-dx12") ("dx11" "wgpu-native/gfx-backend-dx11") ("default"))))))

(define-public crate-wgpu-0.2.0 (c (n "wgpu") (v "0.2.0") (d (list (d (n "arrayvec") (r "^0.4") (d #t) (k 0)) (d (n "wgpu-native") (r "^0.2") (f (quote ("local"))) (d #t) (k 0)))) (h "1chqwzsll4mnwmpwzkq1ds8gddcs90vrjac3899ddhycydhz5vps") (f (quote (("vulkan" "wgpu-native/gfx-backend-vulkan") ("metal-auto-capture" "wgpu-native/metal-auto-capture") ("metal" "wgpu-native/gfx-backend-metal") ("dx12" "wgpu-native/gfx-backend-dx12") ("dx11" "wgpu-native/gfx-backend-dx11") ("default"))))))

(define-public crate-wgpu-0.2.1 (c (n "wgpu") (v "0.2.1") (d (list (d (n "arrayvec") (r "^0.4") (d #t) (k 0)) (d (n "wgpu-native") (r "^0.2") (f (quote ("local"))) (d #t) (k 0)))) (h "1wrqb0rqww6q5789q1f6p5gbwbwlx251i3g80jfr8q5p18swq0fg") (f (quote (("vulkan" "wgpu-native/gfx-backend-vulkan") ("metal-auto-capture" "wgpu-native/metal-auto-capture") ("metal" "wgpu-native/gfx-backend-metal") ("dx12" "wgpu-native/gfx-backend-dx12") ("dx11" "wgpu-native/gfx-backend-dx11") ("default"))))))

(define-public crate-wgpu-0.2.2 (c (n "wgpu") (v "0.2.2") (d (list (d (n "arrayvec") (r "^0.4") (d #t) (k 0)) (d (n "wgpu-native") (r "^0.2.5") (f (quote ("local"))) (d #t) (k 0)))) (h "1lad38psfjdx71x53i0znh5ca4krfcpvf2i5149crsjjhajcmd04") (f (quote (("vulkan" "wgpu-native/gfx-backend-vulkan") ("metal-auto-capture" "wgpu-native/metal-auto-capture") ("metal" "wgpu-native/gfx-backend-metal") ("dx12" "wgpu-native/gfx-backend-dx12") ("dx11" "wgpu-native/gfx-backend-dx11") ("default"))))))

(define-public crate-wgpu-0.2.3 (c (n "wgpu") (v "0.2.3") (d (list (d (n "arrayvec") (r "^0.4") (d #t) (k 0)) (d (n "wgpu-native") (r "^0.2.7") (f (quote ("local"))) (d #t) (k 0)))) (h "1wnn6x92w1x0ff7hldpy9d04dl898kxajkvnfsk6plzln03gfgj1") (f (quote (("vulkan" "wgpu-native/gfx-backend-vulkan") ("metal-auto-capture" "wgpu-native/metal-auto-capture") ("metal" "wgpu-native/gfx-backend-metal") ("dx12" "wgpu-native/gfx-backend-dx12") ("dx11" "wgpu-native/gfx-backend-dx11") ("default"))))))

(define-public crate-wgpu-0.3.0 (c (n "wgpu") (v "0.3.0") (d (list (d (n "arrayvec") (r "^0.4") (d #t) (k 0)) (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "glsl-to-spirv") (r "^0.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "png") (r "^0.15") (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.1") (d #t) (k 0)) (d (n "wgn") (r "^0.3.1") (f (quote ("local"))) (d #t) (k 0) (p "wgpu-native")) (d (n "winit") (r "^0.20.0-alpha3") (d #t) (k 2)) (d (n "zerocopy") (r "^0.2") (d #t) (k 0)))) (h "09bs3krdw9gw66p5vkplpsid84dsc7np9bxmnm206ka0qjsm46c1") (f (quote (("vulkan" "wgn/gfx-backend-vulkan") ("metal" "wgn/gfx-backend-metal") ("dx12" "wgn/gfx-backend-dx12") ("dx11" "wgn/gfx-backend-dx11") ("default"))))))

(define-public crate-wgpu-0.4.0 (c (n "wgpu") (v "0.4.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "glsl-to-spirv") (r "^0.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "png") (r "^0.15") (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "wgn") (r "^0.4") (f (quote ("local"))) (d #t) (k 0) (p "wgpu-native")) (d (n "winit") (r "^0.20.0-alpha4") (d #t) (k 2)) (d (n "zerocopy") (r "^0.2") (d #t) (k 0)))) (h "0yxgrj54kksp8jwnfb67c4qnha11gaf8hy1avy6ddpbyb3zw3s87") (f (quote (("vulkan" "wgn/gfx-backend-vulkan") ("default"))))))

(define-public crate-wgpu-0.5.0 (c (n "wgpu") (v "0.5.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "glsl-to-spirv") (r "^0.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "png") (r "^0.15") (d #t) (k 2)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wgc") (r "^0.5") (d #t) (k 0) (p "wgpu-core")) (d (n "wgn") (r "^0.5") (d #t) (k 0) (p "wgpu-native")) (d (n "wgt") (r "^0.5") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.22") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3") (d #t) (k 2)))) (h "04j0s1cb2bqv00w3wvz1zkcn04r2ayq6gk3fhl5lgnkihpmibxyv") (f (quote (("vulkan" "wgn/vulkan-portability") ("default"))))))

(define-public crate-wgpu-0.5.1 (c (n "wgpu") (v "0.5.1") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "glsl-to-spirv") (r "^0.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "png") (r "^0.15") (d #t) (k 2)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wgc") (r "^0.5.6") (d #t) (k 0) (p "wgpu-core")) (d (n "wgn") (r "^0.5") (d #t) (k 0) (p "wgpu-native")) (d (n "wgt") (r "^0.5") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.22") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3") (d #t) (k 2)))) (h "1a1cfszqabwpdcja0di9ikbks8vbvxz3fis9pkk2mymw3gxnlpxg") (f (quote (("vulkan" "wgn/vulkan-portability") ("default"))))))

(define-public crate-wgpu-0.5.2 (c (n "wgpu") (v "0.5.2") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "glsl-to-spirv") (r "^0.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "png") (r "^0.15") (d #t) (k 2)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wgc") (r "^0.5.6") (d #t) (k 0) (p "wgpu-core")) (d (n "wgn") (r "^0.5.1") (d #t) (k 0) (p "wgpu-native")) (d (n "wgt") (r "^0.5") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.22") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3") (d #t) (k 2)))) (h "0a8qlik8dkwpy12j9qgsidmzb6jbpvm9ar85yjmklh6dyclwxpmm") (f (quote (("vulkan" "wgn/vulkan-portability") ("default"))))))

(define-public crate-wgpu-0.6.0 (c (n "wgpu") (v "0.6.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (d #t) (k 2)) (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "gfx-backend-vulkan") (r "^0.6") (f (quote ("x11"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "js-sys") (r "^0.3.39") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "noise") (r "^0.6") (d #t) (k 2)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "rand") (r "^0.7.2") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "subscriber") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2) (p "wgpu-subscriber")) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "typed-arena") (r "^2.0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.62") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.12") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupEntry" "GpuBindGroupDescriptor" "GpuBindGroupLayout" "GpuBindGroupLayoutEntry" "GpuBindGroupLayoutDescriptor" "GpuBlendDescriptor" "GpuBlendFactor" "GpuBlendOperation" "GpuBindingType" "GpuBuffer" "GpuBufferBinding" "GpuBufferCopyView" "GpuBufferDescriptor" "GpuCanvasContext" "GpuColorDict" "GpuColorStateDescriptor" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilStateDescriptor" "GpuDevice" "GpuDeviceDescriptor" "GpuExtent3dDict" "GpuFilterMode" "GpuFrontFace" "GpuIndexFormat" "GpuInputStepMode" "GpuLimits" "GpuLoadOp" "GpuOrigin3dDict" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveTopology" "GpuProgrammableStageDescriptor" "GpuQueue" "GpuRasterizationStateDescriptor" "GpuRenderPassColorAttachmentDescriptor" "GpuRenderPassDepthStencilAttachmentDescriptor" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilOperation" "GpuStencilStateFaceDescriptor" "GpuStoreOp" "GpuSwapChain" "GpuSwapChainDescriptor" "GpuTexture" "GpuTextureAspect" "GpuTextureComponentType" "GpuTextureCopyView" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuTextureView" "GpuVertexAttributeDescriptor" "GpuVertexBufferLayoutDescriptor" "GpuVertexFormat" "GpuVertexStateDescriptor" "GpuVertexAttributeDescriptor" "HtmlCanvasElement" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.6") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.6") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.22.1") (f (quote ("web-sys"))) (d #t) (k 2)))) (h "1p3px67crm5rwvwn04dvb68lrbddrvqdv6c4jyn15x7fi3qn14al") (f (quote (("vulkan-portability" "wgc/gfx-backend-vulkan") ("trace" "serde" "wgc/trace") ("replay" "serde" "wgc/replay") ("default"))))))

(define-public crate-wgpu-0.6.2 (c (n "wgpu") (v "0.6.2") (d (list (d (n "arrayvec") (r ">=0.5.0, <0.6.0") (d #t) (k 0)) (d (n "bytemuck") (r ">=1.0.0, <2.0.0") (d #t) (k 2)) (d (n "cgmath") (r ">=0.17.0, <0.18.0") (d #t) (k 2)) (d (n "console_error_panic_hook") (r ">=0.1.6, <0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r ">=0.1.2, <0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r ">=0.4.0, <0.5.0") (d #t) (k 2)) (d (n "futures") (r ">=0.3.0, <0.4.0") (d #t) (k 0)) (d (n "gfx-backend-vulkan") (r ">=0.6.0, <0.7.0") (f (quote ("x11"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "js-sys") (r ">=0.3.39, <0.4.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r ">=0.4.0, <0.5.0") (d #t) (k 2)) (d (n "noise") (r ">=0.6.0, <0.7.0") (d #t) (k 2)) (d (n "objc") (r ">=0.2.7, <0.3.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r ">=0.11.0, <0.12.0") (d #t) (k 0)) (d (n "png") (r ">=0.16.0, <0.17.0") (d #t) (k 2)) (d (n "rand") (r ">=0.7.2, <0.8.0") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "raw-window-handle") (r ">=0.3.0, <0.4.0") (d #t) (k 0)) (d (n "serde") (r ">=1.0.0, <2.0.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r ">=1.0.0, <2.0.0") (d #t) (k 0)) (d (n "subscriber") (r ">=0.1.0, <0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2) (p "wgpu-subscriber")) (d (n "tracing") (r ">=0.1.0, <0.2.0") (f (quote ("std"))) (k 0)) (d (n "typed-arena") (r ">=2.0.1, <3.0.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r ">=0.2.62, <0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r ">=0.4.12, <0.5.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r ">=0.3.39, <0.4.0") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupEntry" "GpuBindGroupDescriptor" "GpuBindGroupLayout" "GpuBindGroupLayoutEntry" "GpuBindGroupLayoutDescriptor" "GpuBlendDescriptor" "GpuBlendFactor" "GpuBlendOperation" "GpuBindingType" "GpuBuffer" "GpuBufferBinding" "GpuBufferCopyView" "GpuBufferDescriptor" "GpuCanvasContext" "GpuColorDict" "GpuColorStateDescriptor" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilStateDescriptor" "GpuDevice" "GpuDeviceDescriptor" "GpuExtent3dDict" "GpuFilterMode" "GpuFrontFace" "GpuIndexFormat" "GpuInputStepMode" "GpuLimits" "GpuLoadOp" "GpuOrigin3dDict" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveTopology" "GpuProgrammableStageDescriptor" "GpuQueue" "GpuRasterizationStateDescriptor" "GpuRenderPassColorAttachmentDescriptor" "GpuRenderPassDepthStencilAttachmentDescriptor" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilOperation" "GpuStencilStateFaceDescriptor" "GpuStoreOp" "GpuSwapChain" "GpuSwapChainDescriptor" "GpuTexture" "GpuTextureAspect" "GpuTextureComponentType" "GpuTextureCopyView" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuTextureView" "GpuVertexAttributeDescriptor" "GpuVertexBufferLayoutDescriptor" "GpuVertexFormat" "GpuVertexStateDescriptor" "GpuVertexAttributeDescriptor" "HtmlCanvasElement" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r ">=0.6.0, <0.7.0") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgt") (r ">=0.6.0, <0.7.0") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r ">=0.22.1, <0.23.0") (f (quote ("web-sys"))) (d #t) (k 2)))) (h "0vdgfrq7yv2zkdv25sick7m52yp2741ks2mk6abk3dzmr7j066cr") (f (quote (("vulkan-portability" "wgc/gfx-backend-vulkan") ("trace" "serde" "wgc/trace") ("replay" "serde" "wgc/replay") ("default"))))))

(define-public crate-wgpu-0.7.0 (c (n "wgpu") (v "0.7.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "js-sys") (r "^0.3.46") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.3") (f (quote ("wgsl-in" "spv-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.3") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7.2") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wasm-bindgen") (r "=0.2.69") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.19") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.46") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupEntry" "GpuBindGroupDescriptor" "GpuBindGroupLayout" "GpuBindGroupLayoutEntry" "GpuBindGroupLayoutDescriptor" "GpuBlendDescriptor" "GpuBlendFactor" "GpuBlendOperation" "GpuBindingType" "GpuBuffer" "GpuBufferBinding" "GpuBufferCopyView" "GpuBufferDescriptor" "GpuCanvasContext" "GpuColorDict" "GpuColorStateDescriptor" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilStateDescriptor" "GpuDevice" "GpuDeviceDescriptor" "GpuExtent3dDict" "GpuFilterMode" "GpuFrontFace" "GpuIndexFormat" "GpuInputStepMode" "GpuLimits" "GpuLoadOp" "GpuMapMode" "GpuOrigin3dDict" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveTopology" "GpuProgrammableStageDescriptor" "GpuQueue" "GpuRasterizationStateDescriptor" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachmentDescriptor" "GpuRenderPassDepthStencilAttachmentDescriptor" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilOperation" "GpuStencilStateFaceDescriptor" "GpuStoreOp" "GpuSwapChain" "GpuSwapChainDescriptor" "GpuTexture" "GpuTextureAspect" "GpuTextureComponentType" "GpuTextureCopyView" "GpuTextureDataLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuTextureView" "GpuVertexAttributeDescriptor" "GpuVertexBufferLayoutDescriptor" "GpuVertexFormat" "GpuVertexStateDescriptor" "GpuVertexAttributeDescriptor" "HtmlCanvasElement" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.7") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.7") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgpu-subscriber") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wgt") (r "^0.7") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.24.0") (f (quote ("web-sys"))) (d #t) (k 2)))) (h "1a96xihhv59lz6jiaas11rgslhsz2236znaqnhv8l9s86zy0f066") (f (quote (("webgl" "wgc") ("vulkan-portability" "wgc/gfx-backend-vulkan") ("trace" "serde" "wgc/trace") ("replay" "serde" "wgc/replay") ("default"))))))

(define-public crate-wgpu-0.7.1 (c (n "wgpu") (v "0.7.1") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "js-sys") (r "^0.3.46") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.3") (f (quote ("wgsl-in" "spv-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.3") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7.2") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "syn") (r "=1.0.65") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("std"))) (k 0)) (d (n "wasm-bindgen") (r "=0.2.69") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.19") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.46") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupEntry" "GpuBindGroupDescriptor" "GpuBindGroupLayout" "GpuBindGroupLayoutEntry" "GpuBindGroupLayoutDescriptor" "GpuBlendDescriptor" "GpuBlendFactor" "GpuBlendOperation" "GpuBindingType" "GpuBuffer" "GpuBufferBinding" "GpuBufferCopyView" "GpuBufferDescriptor" "GpuCanvasContext" "GpuColorDict" "GpuColorStateDescriptor" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilStateDescriptor" "GpuDevice" "GpuDeviceDescriptor" "GpuExtent3dDict" "GpuFilterMode" "GpuFrontFace" "GpuIndexFormat" "GpuInputStepMode" "GpuLimits" "GpuLoadOp" "GpuMapMode" "GpuOrigin3dDict" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveTopology" "GpuProgrammableStageDescriptor" "GpuQueue" "GpuRasterizationStateDescriptor" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachmentDescriptor" "GpuRenderPassDepthStencilAttachmentDescriptor" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilOperation" "GpuStencilStateFaceDescriptor" "GpuStoreOp" "GpuSwapChain" "GpuSwapChainDescriptor" "GpuTexture" "GpuTextureAspect" "GpuTextureComponentType" "GpuTextureCopyView" "GpuTextureDataLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuTextureView" "GpuVertexAttributeDescriptor" "GpuVertexBufferLayoutDescriptor" "GpuVertexFormat" "GpuVertexStateDescriptor" "GpuVertexAttributeDescriptor" "HtmlCanvasElement" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.7") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.7") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgpu-subscriber") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wgt") (r "^0.7") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.24.0") (f (quote ("web-sys"))) (d #t) (k 2)))) (h "1n6ins64n064rgjbj921x7qjih99jzglnzkfmz7r555c7yka183r") (f (quote (("webgl" "wgc") ("vulkan-portability" "wgc/gfx-backend-vulkan") ("trace" "serde" "wgc/trace") ("replay" "serde" "wgc/replay") ("default"))))))

(define-public crate-wgpu-0.8.0 (c (n "wgpu") (v "0.8.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "js-sys") (r "^0.3.50") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.4") (f (quote ("wgsl-in" "spv-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.4") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (d #t) (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7.2") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.73") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.23") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.50") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAdapterFeatures" "GpuAdapterLimits" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuBufferUsage" "GpuCanvasContext" "GpuColorDict" "GpuColorTargetState" "GpuColorWrite" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyImageBitmap" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuInputStepMode" "GpuLoadOp" "GpuMapMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPipelineStatisticName" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuShaderStage" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSwapChain" "GpuSwapChainDescriptor" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureUsage" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "HtmlCanvasElement" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.8") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.8") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.8") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.24") (f (quote ("web-sys"))) (d #t) (k 2)))) (h "1a0jgn1h7mxq0ivhbp56v57j1n5bjpi4daybdl37bbb4h4w6fxph") (f (quote (("webgl" "wgc") ("trace" "serde" "wgc/trace") ("replay" "serde" "wgc/replay") ("default") ("cross" "wgc/cross"))))))

(define-public crate-wgpu-0.8.1 (c (n "wgpu") (v "0.8.1") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "js-sys") (r "^0.3.50") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.4") (f (quote ("wgsl-in" "spv-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.4") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (d #t) (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7.2") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.73") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.23") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.50") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAdapterFeatures" "GpuAdapterLimits" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuBufferUsage" "GpuCanvasContext" "GpuColorDict" "GpuColorTargetState" "GpuColorWrite" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyImageBitmap" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuInputStepMode" "GpuLoadOp" "GpuMapMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPipelineStatisticName" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuShaderStage" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSwapChain" "GpuSwapChainDescriptor" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureUsage" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "HtmlCanvasElement" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.8") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.8.1") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.8") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.24") (f (quote ("web-sys"))) (d #t) (k 2)))) (h "1krzfkjy6pdgdhkh5pqgn5g2dgjkkc5hwziyd0bbv57pcq7dapr1") (f (quote (("webgl" "wgc") ("trace" "serde" "wgc/trace") ("replay" "serde" "wgc/replay") ("default") ("cross" "wgc/cross"))))))

(define-public crate-wgpu-0.9.0 (c (n "wgpu") (v "0.9.0") (d (list (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "js-sys") (r "^0.3.50") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.5") (f (quote ("wgsl-in" "spv-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.5") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (d #t) (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7.2") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.73") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.23") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.50") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAdapterFeatures" "GpuAdapterLimits" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuBufferUsage" "GpuCanvasContext" "GpuColorDict" "GpuColorTargetState" "GpuColorWrite" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyImageBitmap" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuInputStepMode" "GpuLoadOp" "GpuMapMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPipelineStatisticName" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuShaderStage" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSwapChain" "GpuSwapChainDescriptor" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureUsage" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "HtmlCanvasElement" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.9") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.9") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.9") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.24") (f (quote ("web-sys"))) (d #t) (k 2)))) (h "0x9jpqgrhfyc8nmryx7ghbbq8vnd4n03f39j5zpl4ggx4s5py95x") (f (quote (("webgl" "wgc") ("trace" "serde" "wgc/trace") ("replay" "serde" "wgc/replay") ("default") ("cross" "wgc/cross"))))))

(define-public crate-wgpu-0.10.0 (c (n "wgpu") (v "0.10.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hal") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.50") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7.2") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.73") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.23") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.51") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAdapterFeatures" "GpuAdapterLimits" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuBufferUsage" "GpuCanvasContext" "GpuColorDict" "GpuColorTargetState" "GpuColorWrite" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyImageBitmap" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuInputStepMode" "GpuLoadOp" "GpuMapMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPipelineStatisticName" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuShaderStage" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSwapChain" "GpuSwapChainDescriptor" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureUsage" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "HtmlCanvasElement" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.10") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.10") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.25") (f (quote ("web-sys"))) (d #t) (k 2)))) (h "12im87dipw6rb2d82897rwi5y8i9i2i27vc62s9lajpma2m9yvl5") (f (quote (("webgl" "wgc") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("default"))))))

(define-public crate-wgpu-0.10.1 (c (n "wgpu") (v "0.10.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hal") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.50") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7.2") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.73") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.23") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.51") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAdapterFeatures" "GpuAdapterLimits" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuBufferUsage" "GpuCanvasContext" "GpuColorDict" "GpuColorTargetState" "GpuColorWrite" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyImageBitmap" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuInputStepMode" "GpuLoadOp" "GpuMapMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPipelineStatisticName" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuShaderStage" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSwapChain" "GpuSwapChainDescriptor" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureUsage" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "HtmlCanvasElement" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.10") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.10") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.25") (f (quote ("web-sys"))) (d #t) (k 2)))) (h "0i9b8i3p9hi0z9pbzdfdhynz3jsqjbaar3ckk7pxgrxifgza94ix") (f (quote (("webgl" "wgc") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("default"))))))

(define-public crate-wgpu-0.10.2 (c (n "wgpu") (v "0.10.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hal") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.50") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7.2") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.73") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.23") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.51") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAdapterFeatures" "GpuAdapterLimits" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuBufferUsage" "GpuCanvasContext" "GpuColorDict" "GpuColorTargetState" "GpuColorWrite" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyImageBitmap" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuInputStepMode" "GpuLoadOp" "GpuMapMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPipelineStatisticName" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuShaderStage" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSwapChain" "GpuSwapChainDescriptor" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureUsage" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "HtmlCanvasElement" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.10") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.10") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.25") (f (quote ("web-sys"))) (d #t) (k 2)))) (h "0is0a0f2iprjkz8lph4q3hrm34rdplb0qjy1zi3dpc3gkcnc04nb") (f (quote (("webgl" "wgc") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("default"))))))

(define-public crate-wgpu-0.11.0 (c (n "wgpu") (v "0.11.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hal") (r "^0.11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.50") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.76") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.23") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.53") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuBufferUsage" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuColorWrite" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "GpuMapMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPipelineStatisticName" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuShaderStage" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureUsage" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.53") (f (quote ("Location"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.11") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.11") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.25") (d #t) (k 2)) (d (n "winit") (r "^0.25") (f (quote ("web-sys"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0c1fdqhmy71xbgs13708vwmyskmjxyacb2l7cplvk4k99z67wmyi") (f (quote (("webgl" "wgc") ("trace" "serde" "wgc/trace") ("spirv-web" "spirv" "naga/wgsl-out") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("default"))))))

(define-public crate-wgpu-0.11.1 (c (n "wgpu") (v "0.11.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hal") (r "^0.11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.50") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.76") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.23") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.53") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuBufferUsage" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuColorWrite" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "GpuMapMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPipelineStatisticName" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuShaderStage" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureUsage" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.53") (f (quote ("Location"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.11") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.11") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.25") (d #t) (k 2)) (d (n "winit") (r "^0.25") (f (quote ("web-sys"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0s3x1hc4pyb3q1rfyzf8ar8mar1ajagcqych59ilnpxswqgiirza") (f (quote (("webgl" "wgc") ("trace" "serde" "wgc/trace") ("spirv-web" "spirv" "naga/wgsl-out") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("default"))))))

(define-public crate-wgpu-0.12.0 (c (n "wgpu") (v "0.12.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hal") (r "^0.12") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.50") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.8") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.8") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.16") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.76") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.23") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.53") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuBufferUsage" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuColorWrite" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "GpuMapMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPipelineStatisticName" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuShaderStage" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureUsage" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.53") (f (quote ("Location"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.12") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.12") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.12") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "0rw5yywcnsc0ypdj3amgs5bykhij40hjwak3gdlnsk84zy0xfz5r") (f (quote (("webgl" "wgc") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("default") ("angle" "wgc/angle"))))))

(define-public crate-wgpu-0.13.0 (c (n "wgpu") (v "0.13.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.5") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-intrusive") (r "^0.4") (d #t) (k 2)) (d (n "glam") (r "^0.20.2") (d #t) (k 2)) (d (n "hal") (r "^0.13") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.58") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.9") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.9") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "nanorand") (r "^0.7") (f (quote ("wyrand"))) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.17") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.81") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.31") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.58") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.58") (f (quote ("Location"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.13") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.13") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.13") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "135awhjmcx7m2vxavn4rwr037b1q0wby88lkc0pc06gxkz3ffa7x") (f (quote (("webgl" "wgc") ("vulkan-portability" "wgc/vulkan-portability") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("emscripten" "webgl") ("default") ("angle" "wgc/angle"))))))

(define-public crate-wgpu-0.13.1 (c (n "wgpu") (v "0.13.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.1.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.5") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-intrusive") (r "^0.4") (d #t) (k 2)) (d (n "glam") (r "^0.20.2") (d #t) (k 2)) (d (n "hal") (r "^0.13") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.58") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.9") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.9") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "nanorand") (r "^0.7") (f (quote ("wyrand"))) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.17") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.81") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.31") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.58") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyTexture" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.58") (f (quote ("Location"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.13") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.13") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.13") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "0bc9m3ypbsp3v212w152zlr1rlxvx2yaci96hmv0m0mpz1xrczi7") (f (quote (("webgl" "wgc") ("vulkan-portability" "wgc/vulkan-portability") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("emscripten" "webgl") ("default") ("angle" "wgc/angle"))))))

(define-public crate-wgpu-0.14.0 (c (n "wgpu") (v "0.14.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.5") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-intrusive") (r "^0.4") (d #t) (k 2)) (d (n "glam") (r "^0.21.3") (d #t) (k 2)) (d (n "hal") (r "^0.14") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.60") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.10") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.10") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.10") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "nanorand") (r "^0.7") (f (quote ("wyrand"))) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.17") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.83") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.33") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("Location" "Blob" "RequestInit" "RequestMode" "Request" "Response"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.14") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.14") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.14") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "03zw239d3f6dx7dfh51sgp48gd8xgkd3ax49adyhr2pwpwbjn9y2") (f (quote (("webgl" "wgc") ("vulkan-portability" "wgc/vulkan-portability") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("emscripten" "webgl") ("default") ("angle" "wgc/angle"))))))

(define-public crate-wgpu-0.14.2 (c (n "wgpu") (v "0.14.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.5") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-intrusive") (r "^0.4") (d #t) (k 2)) (d (n "glam") (r "^0.21.3") (d #t) (k 2)) (d (n "hal") (r "^0.14") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.60") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.10") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.10") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.10") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "nanorand") (r "^0.7") (f (quote ("wyrand"))) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.17") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.83") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.33") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("Location" "Blob" "RequestInit" "RequestMode" "Request" "Response"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.14") (f (quote ("raw-window-handle"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.14.2") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.14") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "0dr9jdsfri2f2xhhbm8ba823fnsddjsjmvf5c0mdd3r21l8l7xl1") (f (quote (("webgl" "wgc") ("vulkan-portability" "wgc/vulkan-portability") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("emscripten" "webgl") ("default") ("angle" "wgc/angle"))))))

(define-public crate-wgpu-0.15.0 (c (n "wgpu") (v "0.15.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.5") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures-intrusive") (r "^0.4") (d #t) (k 2)) (d (n "glam") (r "^0.21.3") (d #t) (k 2)) (d (n "hal") (r "^0.15") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.15") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.15") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.15") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "image") (r "^0.24") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.60") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.11") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "nanorand") (r "^0.7") (f (quote ("wyrand"))) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.17.5") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (k 2)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.83") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.33") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "web-sys") (r "^0.3.60") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("Location" "Blob" "RequestInit" "RequestMode" "Request" "Response" "WebGl2RenderingContext" "CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.15") (f (quote ("raw-window-handle" "gles"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.15") (f (quote ("emscripten"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.15") (f (quote ("raw-window-handle" "gles"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.15") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "1wmq5syf82kj3bk64vlp6hlmy2iwana5ka92ymrl43xiygy6nk6i") (f (quote (("webgl" "hal" "wgc") ("vulkan-portability" "wgc/vulkan") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("expose-ids") ("emscripten" "webgl") ("default" "wgsl") ("angle" "wgc/angle")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts"))))))

(define-public crate-wgpu-0.15.1 (c (n "wgpu") (v "0.15.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.5") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures-intrusive") (r "^0.4") (d #t) (k 2)) (d (n "glam") (r "^0.21.3") (d #t) (k 2)) (d (n "hal") (r "^0.15") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.15") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.15") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.15") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "image") (r "^0.24") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.11") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "nanorand") (r "^0.7") (f (quote ("wyrand"))) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.17.5") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (k 2)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.34") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Location" "Blob" "RequestInit" "RequestMode" "Request" "Response" "WebGl2RenderingContext" "CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.15") (f (quote ("raw-window-handle" "gles"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.15") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.15") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_arch = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.15") (f (quote ("emscripten"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.15") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.15") (f (quote ("raw-window-handle" "gles"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.15") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "1mrjs44n1wmsyr5y31yr2hk1s3j5w3pg0advxwyw718xv6va2ifp") (f (quote (("webgl" "hal" "wgc") ("vulkan-portability" "wgc/vulkan") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("expose-ids") ("emscripten" "webgl") ("default" "wgsl") ("angle" "wgc/angle")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts"))))))

(define-public crate-wgpu-0.16.0 (c (n "wgpu") (v "0.16.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^2") (d #t) (k 2)) (d (n "bytemuck") (r "^1.13") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.5") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures-intrusive") (r "^0.4") (d #t) (k 2)) (d (n "glam") (r "^0.21.3") (d #t) (k 2)) (d (n "hal") (r "^0.16") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "image") (r "^0.24") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "nanorand") (r "^0.7") (f (quote ("wyrand"))) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.17.8") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (k 2)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.34") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Location" "Blob" "RequestInit" "RequestMode" "Request" "Response" "WebGl2RenderingContext" "CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.16") (f (quote ("raw-window-handle" "gles"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("raw-window-handle" "gles"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.16") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "048bx3pcwb7z8jc03s9dxxqcigghwf77fznxg5qmnq88gcndgv8k") (f (quote (("webgl" "hal" "wgc") ("vulkan-portability" "wgc/vulkan") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("expose-ids") ("default" "wgsl") ("angle" "wgc/angle")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts"))))))

(define-public crate-wgpu-0.16.1 (c (n "wgpu") (v "0.16.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^2") (d #t) (k 2)) (d (n "bytemuck") (r "^1.13") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.5") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures-intrusive") (r "^0.4") (d #t) (k 2)) (d (n "glam") (r "^0.21.3") (d #t) (k 2)) (d (n "hal") (r "^0.16") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "image") (r "^0.24") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "nanorand") (r "^0.7") (f (quote ("wyrand"))) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.17.8") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (k 2)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.34") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Location" "Blob" "RequestInit" "RequestMode" "Request" "Response" "WebGl2RenderingContext" "CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.16") (f (quote ("raw-window-handle" "gles"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("raw-window-handle" "gles"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.16") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "15fazjxbjvsjxmkkh9wiiw58rqz7cnpy4cv86m7s2764vr6yln9h") (f (quote (("webgl" "hal" "wgc") ("vulkan-portability" "wgc/vulkan") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("expose-ids") ("default" "wgsl") ("angle" "wgc/angle")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts"))))))

(define-public crate-wgpu-0.16.2 (c (n "wgpu") (v "0.16.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^2") (d #t) (k 2)) (d (n "bytemuck") (r "^1.13") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.5") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures-intrusive") (r "^0.4") (d #t) (k 2)) (d (n "glam") (r "^0.21.3") (d #t) (k 2)) (d (n "hal") (r "^0.16") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "image") (r "^0.24") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "nanorand") (r "^0.7") (f (quote ("wyrand"))) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.17.8") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (k 2)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.34") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Location" "Blob" "RequestInit" "RequestMode" "Request" "Response" "WebGl2RenderingContext" "CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.16") (f (quote ("raw-window-handle" "gles"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("raw-window-handle" "gles"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.16") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "1scn4xz3320z3y87caly0bdrpar8va7ix80da8lg1ybg88d3d94a") (f (quote (("webgl" "hal" "wgc") ("vulkan-portability" "wgc/vulkan") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("expose-ids") ("default" "wgsl") ("angle" "wgc/angle")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts"))))))

(define-public crate-wgpu-0.16.3 (c (n "wgpu") (v "0.16.3") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-executor") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "bitflags") (r "^2") (d #t) (k 2)) (d (n "bytemuck") (r "^1.13") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "ddsfile") (r "^0.5") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures-intrusive") (r "^0.4") (d #t) (k 2)) (d (n "glam") (r "^0.21.3") (d #t) (k 2)) (d (n "hal") (r "^0.16") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.16") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "image") (r "^0.24") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "nanorand") (r "^0.7") (f (quote ("wyrand"))) (k 2)) (d (n "noise") (r "^0.7") (k 2)) (d (n "obj") (r "^0.10") (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "png") (r "^0.17.8") (d #t) (k 2)) (d (n "pollster") (r "^0.2") (d #t) (k 2)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.34") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Location" "Blob" "RequestInit" "RequestMode" "Request" "Response" "WebGl2RenderingContext" "CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wgc") (r "^0.16") (f (quote ("raw-window-handle" "gles"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.16") (f (quote ("raw-window-handle" "gles"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.16") (d #t) (k 0) (p "wgpu-types")) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "1kaiq3fd6h7qgwfycmsdnsl5bgjk955mx9az4nv2x1q6jdf9c328") (f (quote (("webgl" "hal" "wgc") ("vulkan-portability" "wgc/vulkan") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("expose-ids") ("default" "wgsl") ("angle" "wgc/angle")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts"))))))

(define-public crate-wgpu-0.17.0 (c (n "wgpu") (v "0.17.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "hal") (r "^0.17") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.17") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.17") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.17") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.34") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.17") (f (quote ("raw-window-handle" "gles"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("raw-window-handle" "gles"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.17") (d #t) (k 0) (p "wgpu-types")))) (h "1kinnxbmichcql9m7i56j8nr0ipqnq2ivi3f7w3sxa29jjvg6wkl") (f (quote (("webgl" "hal" "wgc") ("vulkan-portability" "wgc/vulkan") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("expose-ids") ("default" "wgsl") ("angle" "wgc/angle")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts"))))))

(define-public crate-wgpu-0.17.1 (c (n "wgpu") (v "0.17.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "hal") (r "^0.17") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.17") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.17") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.17") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.34") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.17") (f (quote ("raw-window-handle" "gles"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("raw-window-handle" "gles"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.17") (d #t) (k 0) (p "wgpu-types")))) (h "0b4s3a9fpyyl7bzmpw6jlmjqh175ban3higvkaicfmjwaqh7jm7d") (f (quote (("webgl" "hal" "wgc") ("vulkan-portability" "wgc/vulkan") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("expose-ids") ("default" "wgsl") ("angle" "wgc/angle")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts"))))))

(define-public crate-wgpu-0.18.0 (c (n "wgpu") (v "0.18.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "flume") (r "^0.11") (d #t) (k 0)) (d (n "hal") (r "^0.18.0") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.18.0") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.18.0") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.18.0") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.14.0") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.14.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.14.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.34") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePassTimestampWrite" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.18.0") (f (quote ("gles"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.18.0") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.18.0") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.18.0") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.18.0") (f (quote ("dx11" "dx12" "gles"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.18.0") (f (quote ("raw-window-handle"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.18.0") (d #t) (k 0) (p "wgpu-types")))) (h "097gjin9snc32y9x1vanw0vyzw2dpl7wpx163h3g4qgrr4kx5rrh") (f (quote (("webgl" "hal" "wgc/gles") ("vulkan-portability" "wgc/vulkan") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("expose-ids") ("default" "wgsl") ("angle" "wgc/gles")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts"))))))

(define-public crate-wgpu-0.17.2 (c (n "wgpu") (v "0.17.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "hal") (r "^0.17") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.17") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.17") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.17") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("wgsl-out"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.34") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.65") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.17") (f (quote ("raw-window-handle" "gles"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("metal"))) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("dx11" "dx12"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.17") (f (quote ("raw-window-handle" "gles"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.17") (d #t) (k 0) (p "wgpu-types")))) (h "0h8bga151y40nl5dpbnlwki2irhkllysvl8dhdqmzwwfk79l8bkm") (f (quote (("webgl" "hal" "wgc") ("vulkan-portability" "wgc/vulkan") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("glsl" "naga/glsl-in") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("expose-ids") ("default" "wgsl") ("angle" "wgc/angle")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts"))))))

(define-public crate-wgpu-0.19.0 (c (n "wgpu") (v "0.19.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "hal") (r "^0.19.0") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.67") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (f (quote ("std"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.40") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePassTimestampWrites" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.19.0") (f (quote ("gles"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("gles"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("raw-window-handle"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")))) (h "1a118xmz6vx6iyln8j5rgaykgh22rgb33dqanlfidqi9xlnivdyh") (f (quote (("webgl" "hal" "wgc/gles") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("naga-ir" "naga") ("glsl" "naga/glsl-in") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("default" "wgsl" "dx12" "metal" "webgpu") ("api_log_info" "wgc/api_log_info")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("webgpu" "naga?/wgsl-out") ("vulkan-portability" "wgc?/vulkan") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts") ("metal" "wgc?/metal") ("dx12" "wgc?/dx12") ("angle" "wgc?/gles"))))))

(define-public crate-wgpu-0.19.1 (c (n "wgpu") (v "0.19.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "hal") (r "^0.19.0") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.67") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (f (quote ("std"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.40") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePassTimestampWrites" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.19.0") (f (quote ("gles"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("gles"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("raw-window-handle"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")))) (h "0b9kh8s4qw3s9g6ix6p2m3588hdgmsd0aihcy22nnbng1lqrmzhb") (f (quote (("webgl" "hal" "wgc/gles") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("naga-ir" "naga") ("glsl" "naga/glsl-in") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("default" "wgsl" "dx12" "metal" "webgpu") ("api_log_info" "wgc/api_log_info")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("webgpu" "naga?/wgsl-out") ("vulkan-portability" "wgc?/vulkan") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts") ("metal" "wgc?/metal") ("dx12" "wgc?/dx12") ("angle" "wgc?/gles"))))))

(define-public crate-wgpu-0.19.2 (c (n "wgpu") (v "0.19.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "hal") (r "^0.19.0") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.67") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (f (quote ("std"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.40") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("Document" "Navigator" "Node" "NodeList" "Gpu" "GpuAdapter" "GpuAddressMode" "GpuAutoLayoutMode" "GpuBindGroup" "GpuBindGroupDescriptor" "GpuBindGroupEntry" "GpuBindGroupLayout" "GpuBindGroupLayoutDescriptor" "GpuBindGroupLayoutEntry" "GpuBlendComponent" "GpuBlendFactor" "GpuBlendOperation" "GpuBlendState" "GpuBuffer" "GpuBufferBinding" "GpuBufferBindingLayout" "GpuBufferBindingType" "GpuBufferDescriptor" "GpuCanvasAlphaMode" "GpuCanvasContext" "GpuCanvasConfiguration" "GpuColorDict" "GpuColorTargetState" "GpuCommandBuffer" "GpuCommandBufferDescriptor" "GpuCommandEncoder" "GpuCommandEncoderDescriptor" "GpuCompareFunction" "GpuCompilationInfo" "GpuCompilationMessage" "GpuCompilationMessageType" "GpuComputePassDescriptor" "GpuComputePassEncoder" "GpuComputePassTimestampWrites" "GpuComputePipeline" "GpuComputePipelineDescriptor" "GpuCullMode" "GpuDepthStencilState" "GpuDevice" "GpuDeviceDescriptor" "GpuDeviceLostInfo" "GpuDeviceLostReason" "GpuError" "GpuErrorFilter" "GpuExtent3dDict" "GpuFeatureName" "GpuFilterMode" "GpuFragmentState" "GpuFrontFace" "GpuImageCopyBuffer" "GpuImageCopyExternalImage" "GpuImageCopyTexture" "GpuImageCopyTextureTagged" "GpuImageDataLayout" "GpuIndexFormat" "GpuLoadOp" "gpu_map_mode" "GpuMipmapFilterMode" "GpuMultisampleState" "GpuObjectDescriptorBase" "GpuOrigin2dDict" "GpuOrigin3dDict" "GpuOutOfMemoryError" "GpuPipelineDescriptorBase" "GpuPipelineLayout" "GpuPipelineLayoutDescriptor" "GpuPowerPreference" "GpuPrimitiveState" "GpuPrimitiveTopology" "GpuProgrammableStage" "GpuQuerySet" "GpuQuerySetDescriptor" "GpuQueryType" "GpuQueue" "GpuRenderBundle" "GpuRenderBundleDescriptor" "GpuRenderBundleEncoder" "GpuRenderBundleEncoderDescriptor" "GpuRenderPassColorAttachment" "GpuRenderPassDepthStencilAttachment" "GpuRenderPassDescriptor" "GpuRenderPassEncoder" "GpuRenderPipeline" "GpuRenderPipelineDescriptor" "GpuRequestAdapterOptions" "GpuSampler" "GpuSamplerBindingLayout" "GpuSamplerBindingType" "GpuSamplerDescriptor" "GpuShaderModule" "GpuShaderModuleDescriptor" "GpuStencilFaceState" "GpuStencilOperation" "GpuStorageTextureAccess" "GpuStorageTextureBindingLayout" "GpuStoreOp" "GpuSupportedFeatures" "GpuSupportedLimits" "GpuTexture" "GpuTextureAspect" "GpuTextureBindingLayout" "GpuTextureDescriptor" "GpuTextureDimension" "GpuTextureFormat" "GpuTextureSampleType" "GpuTextureView" "GpuTextureViewDescriptor" "GpuTextureViewDimension" "GpuUncapturedErrorEvent" "GpuUncapturedErrorEventInit" "GpuValidationError" "GpuVertexAttribute" "GpuVertexBufferLayout" "GpuVertexFormat" "GpuVertexState" "GpuVertexStepMode" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.19.0") (f (quote ("gles"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("gles"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("raw-window-handle"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")))) (h "0p2rf4gaapzss7ma7jrlq76cj5snh7sd6xf5adnas37v7c3ls9zr") (f (quote (("webgl" "hal" "wgc/gles") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("naga-ir" "naga") ("glsl" "naga/glsl-in") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("default" "wgsl" "dx12" "metal" "webgpu") ("api_log_info" "wgc/api_log_info")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("webgpu" "naga?/wgsl-out") ("vulkan-portability" "wgc?/vulkan") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts") ("metal" "wgc?/metal") ("dx12" "wgc?/dx12") ("angle" "wgc?/gles"))))))

(define-public crate-wgpu-0.19.3 (c (n "wgpu") (v "0.19.3") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "hal") (r "^0.19.0") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.67") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (f (quote ("std"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.40") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("Document" "Navigator" "Node" "NodeList" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator" "Event" "EventTarget"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.19.0") (f (quote ("gles"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("gles"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("raw-window-handle"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")))) (h "1jzhgnda58mc94xlxvvqql1bqhpnv0z591z3sqqpd2j7a8xj3cd4") (f (quote (("webgl" "hal" "wgc/gles") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("naga-ir" "naga") ("glsl" "naga/glsl-in") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("default" "wgsl" "dx12" "metal" "webgpu") ("api_log_info" "wgc/api_log_info")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("webgpu" "naga?/wgsl-out") ("vulkan-portability" "wgc?/vulkan") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts") ("metal" "wgc?/metal") ("dx12" "wgc?/dx12") ("angle" "wgc?/gles"))))))

(define-public crate-wgpu-0.19.4 (c (n "wgpu") (v "0.19.4") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "hal") (r "^0.19.0") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.19.0") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.67") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (f (quote ("std"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.40") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("Document" "Navigator" "Node" "NodeList" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator" "Event" "EventTarget"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.19.0") (f (quote ("gles"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("gles"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.19.0") (f (quote ("raw-window-handle"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")))) (h "009cfqxabinkwmk93wm08gj8nz7d4hl1m17imfxgxg1aplfk3myb") (f (quote (("webgl" "hal" "wgc/gles") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in") ("replay" "serde" "wgc/replay") ("naga-ir" "naga") ("glsl" "naga/glsl-in") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("default" "wgsl" "dx12" "metal" "webgpu") ("api_log_info" "wgc/api_log_info")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("webgpu" "naga?/wgsl-out") ("vulkan-portability" "wgc?/vulkan") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts") ("metal" "wgc?/metal") ("dx12" "wgc?/dx12") ("angle" "wgc?/gles"))))))

(define-public crate-wgpu-0.20.0 (c (n "wgpu") (v "0.20.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "document-features") (r "^0.2.8") (d #t) (k 0)) (d (n "hal") (r "^0.20.0") (f (quote ("renderdoc"))) (d #t) (t "cfg(all(not(target_arch = \"wasm32\"), unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.20.0") (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.20.0") (f (quote ("dxc_shader_compiler" "renderdoc" "windows_rs"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-hal")) (d (n "hal") (r "^0.20.0") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "wgpu-hal")) (d (n "js-sys") (r "^0.3.69") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "naga") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "naga") (r "^0.20.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "raw-window-handle") (r "^0.6") (f (quote ("std"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.42") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.69") (f (quote ("Document" "Navigator" "Node" "NodeList" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator" "Event" "EventTarget"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgc") (r "^0.20.0") (f (quote ("gles"))) (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.20.0") (f (quote ("raw-window-handle"))) (d #t) (t "cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.20.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.20.0") (f (quote ("vulkan"))) (d #t) (t "cfg(any(windows, all(unix, not(target_os = \"emscripten\"), not(target_os = \"ios\"), not(target_os = \"macos\"))))") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.20.0") (f (quote ("gles"))) (d #t) (t "cfg(windows)") (k 0) (p "wgpu-core")) (d (n "wgc") (r "^0.20.0") (f (quote ("raw-window-handle"))) (o #t) (d #t) (k 0) (p "wgpu-core")) (d (n "wgt") (r "^0.20.0") (d #t) (k 0) (p "wgpu-types")))) (h "0gjxp99l8lq56grzbjww0md8mc4q5p9zdjrs5s705q88wkz1pzrj") (f (quote (("webgl" "hal" "wgc/gles") ("trace" "serde" "wgc/trace") ("spirv" "naga/spv-in" "wgc/spirv") ("replay" "serde" "wgc/replay") ("naga-ir" "naga") ("glsl" "naga/glsl-in" "wgc/glsl") ("fragile-send-sync-non-atomic-wasm" "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("default" "wgsl" "dx12" "metal" "webgpu") ("api_log_info" "wgc/api_log_info")))) (s 2) (e (quote (("wgsl" "wgc?/wgsl") ("webgpu" "naga?/wgsl-out") ("vulkan-portability" "wgc?/vulkan") ("strict_asserts" "wgc?/strict_asserts" "wgt/strict_asserts") ("serde" "dep:serde" "wgc/serde") ("metal" "wgc?/metal") ("dx12" "wgc?/dx12") ("angle" "wgc?/gles"))))))

