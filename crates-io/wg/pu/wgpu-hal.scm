(define-module (crates-io wg pu wgpu-hal) #:use-module (crates-io))

(define-public crate-wgpu-hal-0.0.1 (c (n "wgpu-hal") (v "0.0.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1q91pcxc38cmnim4gcc5nyfbjbsl3df9c1111caz9qrgzfsnxqss") (f (quote (("default"))))))

(define-public crate-wgpu-hal-0.10.0 (c (n "wgpu-hal") (v "0.10.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.6") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "1yzl3dd1a6c6172w8k60rrypf9qw3rvjc0hn9li1l6z3jq39avs9") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default")))) (y #t)))

(define-public crate-wgpu-hal-0.10.1 (c (n "wgpu-hal") (v "0.10.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.6") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "152yz8qqm2pz8qd6i69rfb1pnl5glivsnpxwr3885nz1r4p53clh") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.10.2 (c (n "wgpu-hal") (v "0.10.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.6") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "0ij2iz29kl22sjr5v65d8rslkgd4i1kiysznpybnjhd1i3pqvg1i") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.10.3 (c (n "wgpu-hal") (v "0.10.3") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.6") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "1kj5zgym9gs00ifaybqid6glri8sq7bbk7dhkd04p3dprhagb6yd") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.10.4 (c (n "wgpu-hal") (v "0.10.4") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.6.3") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "0lyyrb345xqif8jjxzb4l612y194b1jqc203ml58q4b8zxgaygdk") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.10.5 (c (n "wgpu-hal") (v "0.10.5") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.6.3") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "1lg26q7091zzwbkd6gcy9j13gcvciks4d3rig704ik9lmrj4nxai") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.10.6 (c (n "wgpu-hal") (v "0.10.6") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.6.3") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "0xlglffaww36dq6g7h0jzhjq9mnnvq7ynyqd7xwmci6mz6781w45") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.10.7 (c (n "wgpu-hal") (v "0.10.7") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.6.3") (d #t) (k 0)) (d (n "naga") (r "^0.6") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wgt") (r "^0.10") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "1qkzsgs5af20lz94nvblcybgjjyn3ycwr89xx679bwdz2x5qkk97") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.11.0 (c (n "wgpu-hal") (v "0.11.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.7") (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "19mpbrqfg1r3zpbp99jcgp4aws6g3kqks62npg96b05d6h7sy4m4") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.11.1 (c (n "wgpu-hal") (v "0.11.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.7") (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "0dnxga8nab0iyaz6lzdlmgwi2issqr1a3rqg6l4hv9nsb8q4ms6r") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.11.2 (c (n "wgpu-hal") (v "0.11.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.7") (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "05x5mk3yvcq7bcp8yib29qv9sh08cmfw6zdb9mciwss0yj0ml28i") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.11.3 (c (n "wgpu-hal") (v "0.11.3") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.7") (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "1z3j8l8rj2gs3r25vpi2371v8a75svpabgskz71y830rsknizxbr") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.11.4 (c (n "wgpu-hal") (v "0.11.4") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.7") (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "1v6ka6qcflqlpq8a21xpvlrbw7c1w4bd1n59r3am7cgdv4skhj8f") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.11.5 (c (n "wgpu-hal") (v "0.11.5") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.7") (d #t) (k 0)) (d (n "naga") (r "^0.7") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.11") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 2)))) (h "0a73mdz6760ihwsa53gm8bgqg9nmp54l6pc9v4nx4k5ly2gb4a5g") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.12.0 (c (n "wgpu-hal") (v "0.12.0") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.33") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.8") (d #t) (k 0)) (d (n "naga") (r "^0.8") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.12") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "1haz6ds8n9vdpfs451jym1pkp0ip6ij6yxyx0afdnq9x9wgxbfqs") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.12.1 (c (n "wgpu-hal") (v "0.12.1") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.34") (f (quote ("debug" "loaded"))) (o #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.8") (d #t) (k 0)) (d (n "naga") (r "^0.8") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.12") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "0kgzrywcx2w6byq5kf34sry1j4kw6kq6rfidp241lzjps02cjbkl") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.12.2 (c (n "wgpu-hal") (v "0.12.2") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.34") (f (quote ("debug" "loaded"))) (o #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.8") (d #t) (k 0)) (d (n "naga") (r "^0.8") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.12") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "1639g9hv6kbipn87xd6yy8ngfilnml8wbpqnydk13pc0qfwkrqwj") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.12.3 (c (n "wgpu-hal") (v "0.12.3") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.34") (f (quote ("debug" "loaded"))) (o #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.8") (d #t) (k 0)) (d (n "naga") (r "^0.8") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.12") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "0lwyx05w6iziirkqi58l050zj2n3yf3dbw4rld8nncxz0d4m5yk2") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.12.4 (c (n "wgpu-hal") (v "0.12.4") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.34") (f (quote ("debug" "loaded"))) (o #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.8") (d #t) (k 0)) (d (n "naga") (r "^0.8") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.12") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "0w699c8d251zvmfpfffn6c3df58h76dbn2fr9pfk4zwd1r0akcck") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.12.5 (c (n "wgpu-hal") (v "0.12.5") (d (list (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.34") (f (quote ("debug" "loaded"))) (o #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.23.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.8") (d #t) (k 0)) (d (n "naga") (r "^0.8") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.4.1") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wgt") (r "^0.12") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "1hjnw3w4s8mi9dbpl62gbkbj4bm624yiiz8xkz0jyjlp6imfm16n") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default"))))))

(define-public crate-wgpu-hal-0.13.0 (c (n "wgpu-hal") (v "0.13.0") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "khronos-egl")) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.28") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.9") (d #t) (k 0)) (d (n "naga") (r "^0.9") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.5.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.13") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "0wwfhk8c8frsslhsbx3r2pf98j9k90rq53gs98hsvqh9f8vcpyd9") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("emscripten" "gles") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "native" "libloading" "winapi/d3d11" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.59")))

(define-public crate-wgpu-hal-0.13.1 (c (n "wgpu-hal") (v "0.13.1") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "khronos-egl")) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.28") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.9") (d #t) (k 0)) (d (n "naga") (r "^0.9") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.5.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.13") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "0pg6sdhxmk815g3j3azbadjcjxwb5y8qmljjz9cbjzich540xxdy") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("emscripten" "gles") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "native" "libloading" "winapi/d3d11" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.59")))

(define-public crate-wgpu-hal-0.13.2 (c (n "wgpu-hal") (v "0.13.2") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "khronos-egl")) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.28") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "inplace_it") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.9") (d #t) (k 0)) (d (n "naga") (r "^0.9") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.5.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.4") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.13") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "0ipnv40s8q4mxvjiw3kgp6h26q6jygg3mf9nalyvlzb3s31xzjr0") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "inplace_it") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("emscripten" "gles") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "native" "libloading" "winapi/d3d11" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.59")))

(define-public crate-wgpu-hal-0.14.0 (c (n "wgpu-hal") (v "0.14.0") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "khronos-egl")) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.10") (f (quote ("clone"))) (d #t) (k 0)) (d (n "native") (r "^0.5.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.14") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "1b5s1s27vamghffmx9pfdaabx43inc8b6m7q08zk89f7vf06mbnd") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("emscripten" "gles") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "native" "libloading" "winapi/d3d11" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.59")))

(define-public crate-wgpu-hal-0.14.1 (c (n "wgpu-hal") (v "0.14.1") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "khronos-egl")) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.10") (f (quote ("clone"))) (d #t) (k 0)) (d (n "native") (r "^0.5.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.14") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "0byi931k4k2777n678zyzcis442w819ip6wwai7vw9nb3ak21hrw") (f (quote (("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("emscripten" "gles") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "native" "libloading" "winapi/d3d11" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.59")))

(define-public crate-wgpu-hal-0.15.0 (c (n "wgpu-hal") (v "0.15.0") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.2") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "khronos-egl")) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-allocator") (r "^0.21") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hassle-rs") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.60") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.11") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.5.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.83") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.15") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "18v5sgbjpnskyjvqkq7x1l91c07pm3vmli5w27wwxz9qva73ldfj") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("emscripten" "gles") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "native" "libloading" "winapi/d3d11" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (y #t) (r "1.60")))

(define-public crate-wgpu-hal-0.15.1 (c (n "wgpu-hal") (v "0.15.1") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.2") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "khronos-egl")) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-allocator") (r "^0.21") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hassle-rs") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.60") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.11") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.6.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.83") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.15") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "0578m3v20wqd7wijs3jppki4b8faj6hw59dra24xbqszja95gsc2") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("emscripten" "gles") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "native" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.60")))

(define-public crate-wgpu-hal-0.15.2 (c (n "wgpu-hal") (v "0.15.2") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.2") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "khronos-egl")) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-allocator") (r "^0.22") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hassle-rs") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.11") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.6.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.15") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "1xl0h4fqpyszm8yfhz26if9nsr4vxrhxi6jp812wl3k901pq39rp") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("emscripten" "gles") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "native" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.60")))

(define-public crate-wgpu-hal-0.15.3 (c (n "wgpu-hal") (v "0.15.3") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.2") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "khronos-egl")) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-allocator") (r "^0.22") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hassle-rs") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.11") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.6.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.15") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "0ifch9dlr12q6ifvggvzfsksnap8jh0sp1s9bldkr506rizswqkp") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("emscripten" "gles") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "native" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.60")))

(define-public crate-wgpu-hal-0.15.4 (c (n "wgpu-hal") (v "0.15.4") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.2") (o #t) (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0) (p "khronos-egl")) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "khronos-egl")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "glow") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "gpu-allocator") (r "^0.22") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hassle-rs") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mtl") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0) (p "metal")) (d (n "naga") (r "^0.11") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "native") (r "^0.6.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0) (p "d3d12")) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.15") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "12r8w1577ivkdhf6c9xhlrf6vy7kj7m8ipakajxl9ixdhfi63kxx") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "egl" "libloading") ("emscripten" "gles") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "native" "bit-set" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "native" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.60")))

(define-public crate-wgpu-hal-0.16.0 (c (n "wgpu-hal") (v "0.16.0") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "d3d12") (r "^0.6.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "glow") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.22") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.10") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r "^0.8") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.8") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.16") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "0bkkqwsgzcz35r5m8zzl1414j9kwbwnjaikilg81mm3vv2kjxbs1") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "khronos-egl" "libloading") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "d3d12" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.60")))

(define-public crate-wgpu-hal-0.16.1 (c (n "wgpu-hal") (v "0.16.1") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "d3d12") (r "^0.6.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "glow") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.22") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.10") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r "^0.8") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.8") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.16") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "196gc9rp2x9rx36xxp259a91rcsn0qdx8hf2fhp6b5sxiqn1r1bl") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "khronos-egl" "libloading") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "d3d12" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.60")))

(define-public crate-wgpu-hal-0.16.2 (c (n "wgpu-hal") (v "0.16.2") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "d3d12") (r "^0.6.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "foreign-types") (r "^0.3") (o #t) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "glow") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.22") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.10") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.61") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r "^0.8") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.8") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.12.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.61") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.16") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "0j24xgjjx391c35nbwgybyxrpzhwpvzf1m2gw7p6v4wf0xc35jqy") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block" "foreign-types") ("gles" "naga/glsl-out" "glow" "khronos-egl" "libloading") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "d3d12" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default")))) (r "1.60")))

(define-public crate-wgpu-hal-0.17.0 (c (n "wgpu-hal") (v "0.17.0") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "d3d12") (r "^0.7") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "glow") (r "^0.12.3") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.22") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.10") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.26.0") (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.17") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "00817lapn1z2il7k6lw3m6m7lvcqqrnv9vr4hdg4fzx1hlwa2m36") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("gles" "naga/glsl-out" "glow" "khronos-egl" "libloading") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "d3d12" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default" "link")))) (r "1.60")))

(define-public crate-wgpu-hal-0.17.1 (c (n "wgpu-hal") (v "0.17.1") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "d3d12") (r "^0.7") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "glow") (r "^0.12.3") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.22") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.10") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.26.0") (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.17") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "04lmv47wp3r360izyx4znjk48rgxf4dqzzzh5jjn1i531ljgrx0d") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("gles" "naga/glsl-out" "glow" "khronos-egl" "libloading") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "d3d12" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default" "link")))) (r "1.60")))

(define-public crate-wgpu-hal-0.17.2 (c (n "wgpu-hal") (v "0.17.2") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "d3d12") (r "^0.7") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "glow") (r "^0.12.3") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.22") (f (quote ("d3d12" "windows" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.10") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^4.1") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.26.0") (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.13.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.17") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.27.1") (d #t) (k 2)))) (h "05yv89f15y5yaf1dvfgwbhyhgbcvmwq0ijsh52srnfbp7h7bz04s") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("gles" "naga/glsl-out" "glow" "khronos-egl" "libloading") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "d3d12" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default" "link")))) (r "1.60")))

(define-public crate-wgpu-hal-0.18.0 (c (n "wgpu-hal") (v "0.18.0") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "d3d12") (r "^0.7") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "glow") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "glutin_wgl_sys") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.23") (f (quote ("d3d12" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.10") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "naga") (r "^0.14.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.14.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.18.0") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.28.7") (f (quote ("android-native-activity"))) (d #t) (k 2)))) (h "1n62gxks2s61izg9bx9f3nbc7rlxi77d7id8ha78d0sw2nlbjc0y") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("gles" "naga/glsl-out" "glow" "glutin_wgl_sys" "khronos-egl" "libloading") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "d3d12" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default" "link")))) (r "1.65")))

(define-public crate-wgpu-hal-0.18.1 (c (n "wgpu-hal") (v "0.18.1") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "d3d12") (r "^0.7") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "glow") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "glutin_wgl_sys") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.23") (f (quote ("d3d12" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.10") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "naga") (r "^0.14.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.14.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.18.0") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.28.7") (f (quote ("android-native-activity"))) (d #t) (k 2)))) (h "1nfdqsf8m1j069f9ri762gplgfsvwipymn9xrys6gsx35n0cqkmq") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("gles" "naga/glsl-out" "glow" "glutin_wgl_sys" "khronos-egl" "libloading") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("dx11" "naga/hlsl-out" "d3d12" "libloading" "winapi/d3d11" "winapi/std" "winapi/d3d11_1" "winapi/d3d11_2" "winapi/d3d11sdklayers" "winapi/dxgi1_6") ("default" "link")))) (r "1.65")))

(define-public crate-wgpu-hal-0.19.0 (c (n "wgpu-hal") (v "0.19.0") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "d3d12") (r "^0.19.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "glam") (r "^0.25.0") (d #t) (k 2)) (d (n "glow") (r "^0.13.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "glutin_wgl_sys") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.25") (f (quote ("d3d12" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.11") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.67") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.6") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.29.9") (f (quote ("android-native-activity"))) (d #t) (k 2)))) (h "0qcx55knyqj3pnbf7ybp9avvbgawi8pxj251gl4zn9v7np75kwhi") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("gles" "naga/glsl-out" "glow" "glutin_wgl_sys" "khronos-egl" "libloading") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default" "link")))) (r "1.70")))

(define-public crate-wgpu-hal-0.19.1 (c (n "wgpu-hal") (v "0.19.1") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "d3d12") (r "^0.19.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "glam") (r "^0.25.0") (d #t) (k 2)) (d (n "glow") (r "^0.13.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "glutin_wgl_sys") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.25") (f (quote ("d3d12" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.11") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.67") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.6") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.29.9") (f (quote ("android-native-activity"))) (d #t) (k 2)))) (h "0wkggrz7lgimzx3s893nk36ikb1nn1g946jrpk0azgrnca2lgfz3") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("gles" "naga/glsl-out" "glow" "glutin_wgl_sys" "khronos-egl" "libloading") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default" "link")))) (r "1.70")))

(define-public crate-wgpu-hal-0.19.2 (c (n "wgpu-hal") (v "0.19.2") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "d3d12") (r "^0.19.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "glam") (r "^0.25.0") (d #t) (k 2)) (d (n "glow") (r "^0.13.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "glutin_wgl_sys") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.25") (f (quote ("d3d12" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.11") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.67") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.6") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.29.9") (f (quote ("android-native-activity"))) (d #t) (k 2)))) (h "1w7dw9qlfazahrbzsy5ippjgcp5gv1g8nbxza47wqla8sib9lyyb") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("gles" "naga/glsl-out" "glow" "glutin_wgl_sys" "khronos-egl" "libloading") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default" "link")))) (r "1.70")))

(define-public crate-wgpu-hal-0.19.3 (c (n "wgpu-hal") (v "0.19.3") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "d3d12") (r "^0.19.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "glam") (r "^0.25.0") (d #t) (k 2)) (d (n "glow") (r "^0.13.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "glutin_wgl_sys") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.25") (f (quote ("d3d12" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.11") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.67") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.6") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.29.9") (f (quote ("android-native-activity"))) (d #t) (k 2)))) (h "0bh88yd9ki4zdcian501mxc4pmfr2ds4ms8pzqpvanjhh3175ya9") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("gles" "naga/glsl-out" "glow" "glutin_wgl_sys" "khronos-egl" "libloading") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default" "link")))) (r "1.70")))

(define-public crate-wgpu-hal-0.19.4 (c (n "wgpu-hal") (v "0.19.4") (d (list (d (n "android_system_properties") (r "^0.1.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "d3d12") (r "^0.19.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "glam") (r "^0.25.0") (d #t) (k 2)) (d (n "glow") (r "^0.13.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "glutin_wgl_sys") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.25") (f (quote ("d3d12" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.11") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.67") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.6") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.0.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.67") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.19.0") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.29.9") (f (quote ("android-native-activity"))) (d #t) (k 2)))) (h "1hrr9qjhyc0fjfwp4gsvm8qk5wzi6ijnsm6qlm0spxvd6qj4j6pw") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec") ("renderdoc" "libloading" "renderdoc-sys") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("gles" "naga/glsl-out" "glow" "glutin_wgl_sys" "khronos-egl" "libloading") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("default" "link")))) (r "1.70")))

(define-public crate-wgpu-hal-0.20.0 (c (n "wgpu-hal") (v "0.20.0") (d (list (d (n "android_system_properties") (r "^0.1.1") (o #t) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ash") (r "^0.37.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bit-set") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (o #t) (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "cfg_aliases") (r "^0.1") (d #t) (k 1)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "d3d12") (r "^0.20.0") (f (quote ("libloading"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "glam") (r "^0.27.0") (d #t) (k 2)) (d (n "glow") (r "^0.13.1") (o #t) (d #t) (k 0)) (d (n "glutin") (r "^0.29.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "glutin_wgl_sys") (r "^0.5") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "gpu-alloc") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-allocator") (r "^0.25") (f (quote ("d3d12" "public-winapi"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "gpu-descriptor") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hassle-rs") (r "^0.11") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "js-sys") (r "^0.3.69") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("static" "no-pkg-config"))) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "khronos-egl") (r "^6") (f (quote ("dynamic"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r ">=0.7, <0.9") (o #t) (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.28.0") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "naga") (r "^0.20.0") (d #t) (k 0)) (d (n "naga") (r "^0.20.0") (f (quote ("wgsl-in"))) (d #t) (k 2)) (d (n "ndk-sys") (r "^0.5.0") (o #t) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os=\"macos\", target_os=\"ios\"))") (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "profiling") (r "^1") (k 0)) (d (n "range-alloc") (r "^0.1") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "raw-window-handle") (r "^0.6") (d #t) (k 0)) (d (n "renderdoc-sys") (r "^1.1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "web-sys") (r "^0.3.69") (f (quote ("Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))") (k 0)) (d (n "wgt") (r "^0.20.0") (d #t) (k 0) (p "wgpu-types")) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "libloaderapi" "windef" "winuser" "dcomp"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "winit") (r "^0.29.14") (f (quote ("android-native-activity"))) (d #t) (k 2)))) (h "132c1pmgimf98174zf6xx6rw1z9rv0pmdvk5kc28618p0npchwad") (f (quote (("windows_rs" "gpu-allocator") ("vulkan" "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec" "android_system_properties") ("renderdoc" "libloading" "renderdoc-sys") ("oom_panic") ("metal" "naga/msl-out" "block") ("link" "metal/link") ("internal_error_panic") ("gles" "naga/glsl-out" "glow" "glutin_wgl_sys" "khronos-egl" "libloading" "ndk-sys") ("fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm") ("dxc_shader_compiler" "hassle-rs") ("dx12" "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6") ("device_lost_panic") ("default" "link")))) (r "1.74")))

