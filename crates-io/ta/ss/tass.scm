(define-module (crates-io ta ss tass) #:use-module (crates-io))

(define-public crate-tass-0.1.0 (c (n "tass") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "crossterm") (r "^0.18") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "grep-matcher") (r "^0.1") (d #t) (k 0)) (d (n "grep-regex") (r "^0.1") (d #t) (k 0)) (d (n "grep-searcher") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "ndarray-csv") (r "^0.4") (d #t) (k 0)) (d (n "pad") (r "^0.1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 0)))) (h "10yw19lq3l5c6ibl120m1dcz324l7dkz608mfksk6awzjvwyjjgx")))

(define-public crate-tass-0.2.0 (c (n "tass") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "crossterm") (r "^0.18") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "grep-matcher") (r "^0.1") (d #t) (k 0)) (d (n "grep-regex") (r "^0.1") (d #t) (k 0)) (d (n "grep-searcher") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "ndarray-csv") (r "^0.4") (d #t) (k 0)) (d (n "pad") (r "^0.1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 0)))) (h "0hjkjw47rl47p4vmlc72b4cib9yl47xcpcrh5h5l5l8sh10hdkr0")))

(define-public crate-tass-0.3.0 (c (n "tass") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "crossterm") (r "^0.19") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "grep-matcher") (r "^0.1") (d #t) (k 0)) (d (n "grep-regex") (r "^0.1") (d #t) (k 0)) (d (n "grep-searcher") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.14") (d #t) (k 0)) (d (n "pad") (r "^0.1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 0)))) (h "0baxajfsqw3sg3y6lm06ynsndlvg7s0ml4i8ci8n70qid261rsma")))

(define-public crate-tass-0.4.0 (c (n "tass") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "crossterm") (r "^0.19") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "grep-matcher") (r "^0.1") (d #t) (k 0)) (d (n "grep-regex") (r "^0.1") (d #t) (k 0)) (d (n "grep-searcher") (r "^0.1") (d #t) (k 0)) (d (n "hsl") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.14") (d #t) (k 0)) (d (n "pad") (r "^0.1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 0)))) (h "0al71729j819yj00xdgbrqf1dls1lcw8wkr6ga9vp4sbwl2awpqx")))

(define-public crate-tass-0.5.0 (c (n "tass") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "clap") (r "^3.0.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "crossterm") (r "^0.22.1") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "grep-matcher") (r "^0.1") (d #t) (k 0)) (d (n "grep-regex") (r "^0.1") (d #t) (k 0)) (d (n "grep-searcher") (r "^0.1") (d #t) (k 0)) (d (n "hsl") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.0") (d #t) (k 0)) (d (n "pad") (r "^0.1") (d #t) (k 0)) (d (n "tempfile") (r "^3.1") (d #t) (k 0)))) (h "1hhdcllz8h741b92prl84bijzkxdaz4c6gs7yg7hr1mjvyal1x1l")))

(define-public crate-tass-0.6.0 (c (n "tass") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0.75") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arrow") (r "^49") (f (quote ("chrono-tz"))) (d #t) (k 0)) (d (n "bpaf") (r "^0.9.6") (f (quote ("derive"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.8.4") (d #t) (k 0)) (d (n "crossterm") (r "^0.27.0") (d #t) (k 0)) (d (n "fileslice") (r "^0.3.0") (k 0)) (d (n "hsl") (r "^0.1.1") (d #t) (k 0)) (d (n "memchr") (r "^2.6.4") (d #t) (k 0)) (d (n "parquet") (r "^49") (d #t) (k 0)) (d (n "tempfile") (r "^3.8.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter"))) (d #t) (k 0)))) (h "0labl9d8n1l5xjnff62f1ymk6ymvnmyhbf8si0fnc0l301yfqm9b")))

(define-public crate-tass-0.7.0 (c (n "tass") (v "0.7.0") (d (list (d (n "anyhow") (r "^1.0.75") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arrow") (r "^49") (f (quote ("chrono-tz"))) (d #t) (k 0)) (d (n "bpaf") (r "^0.9.6") (f (quote ("derive"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.8.4") (d #t) (k 0)) (d (n "crossterm") (r "^0.27.0") (d #t) (k 0)) (d (n "fileslice") (r "^0.4.0") (k 0)) (d (n "hsl") (r "^0.1.1") (d #t) (k 0)) (d (n "memchr") (r "^2.6.4") (d #t) (k 0)) (d (n "parquet") (r "^49") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.8.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter"))) (d #t) (k 0)))) (h "1k2036fhl2nhzagfg85f9nwjd3hr3hr1jlvyy9651ga6lfcndjw7") (f (quote (("json" "serde_json") ("default" "parquet"))))))

(define-public crate-tass-0.8.0 (c (n "tass") (v "0.8.0") (d (list (d (n "anyhow") (r "^1.0.75") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arrow") (r "^49") (f (quote ("chrono-tz"))) (d #t) (k 0)) (d (n "bpaf") (r "^0.9.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.8.4") (d #t) (k 0)) (d (n "crossterm") (r "^0.27.0") (d #t) (k 0)) (d (n "fileslice") (r "^0.4.0") (k 0)) (d (n "hsl") (r "^0.1.1") (d #t) (k 0)) (d (n "memchr") (r "^2.6.4") (d #t) (k 0)) (d (n "parquet") (r "^49") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.8.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter"))) (d #t) (k 0)))) (h "1xkam4vy0b4y7ln85rrs7jl7sdy21a3gxigia9jily794jbz54p5") (f (quote (("json" "serde_json") ("default" "parquet"))))))

(define-public crate-tass-0.9.0 (c (n "tass") (v "0.9.0") (d (list (d (n "anyhow") (r "^1.0.75") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arrow") (r "^50") (f (quote ("chrono-tz"))) (d #t) (k 0)) (d (n "bpaf") (r "^0.9.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.8.4") (d #t) (k 0)) (d (n "crossterm") (r "^0.27.0") (d #t) (k 0)) (d (n "datafusion") (r "^36.0.0") (o #t) (d #t) (k 0)) (d (n "fileslice") (r "^0.4.0") (k 0)) (d (n "hsl") (r "^0.1.1") (d #t) (k 0)) (d (n "memchr") (r "^2.6.4") (d #t) (k 0)) (d (n "parquet") (r "^50") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.8.1") (d #t) (k 0)) (d (n "tokio") (r "^1.35.0") (f (quote ("rt" "rt-multi-thread"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter"))) (d #t) (k 0)))) (h "1595nmg4bmkv8zr8g2c6zxszf3cm217by9m3s39fds2zn64hnqzp") (f (quote (("virt" "datafusion" "tokio") ("json" "serde_json") ("default" "parquet"))))))

(define-public crate-tass-0.10.0 (c (n "tass") (v "0.10.0") (d (list (d (n "anyhow") (r "^1.0.75") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arrow") (r "^51") (f (quote ("chrono-tz"))) (d #t) (k 0)) (d (n "bpaf") (r "^0.9.11") (f (quote ("derive"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.8.4") (d #t) (k 0)) (d (n "crossterm") (r "^0.27.0") (d #t) (k 0)) (d (n "datafusion") (r "^37") (o #t) (d #t) (k 0)) (d (n "fileslice") (r "^0.4.0") (k 0)) (d (n "hsl") (r "^0.1.1") (d #t) (k 0)) (d (n "memchr") (r "^2.6.4") (d #t) (k 0)) (d (n "parquet") (r "^51") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.8.1") (d #t) (k 0)) (d (n "tokio") (r "^1.35.0") (f (quote ("rt" "rt-multi-thread"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter"))) (d #t) (k 0)))) (h "1h2vb59x3kp6c01rcjwfjysvrydrn19wrcqp9zmrdx4hamb7apbd") (f (quote (("default" "parquet")))) (s 2) (e (quote (("virt" "dep:datafusion" "dep:tokio") ("parquet" "dep:parquet") ("json" "dep:serde_json"))))))

