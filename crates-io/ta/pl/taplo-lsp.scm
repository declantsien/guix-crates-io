(define-module (crates-io ta pl taplo-lsp) #:use-module (crates-io))

(define-public crate-taplo-lsp-0.1.0 (c (n "taplo-lsp") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.1.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.85.0") (f (quote ("proposed"))) (d #t) (k 0) (p "tamasfe-lsp-types")) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.10.0") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.5.1") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.3.0") (d #t) (k 0)) (d (n "time") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-compat-02") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1kz9zm0jcsfvr15f7d3wba9wabxsz7vgmzkaxxn4faq9slisr92f") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.1.4 (c (n "taplo-lsp") (v "0.1.4") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.1.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.85.0") (f (quote ("proposed"))) (d #t) (k 0) (p "tamasfe-lsp-types")) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.10.0") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.5.2") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.3.2") (d #t) (k 0)) (d (n "time") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-compat-02") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "057r3k7krqybqgn0amla3djsh2ypqdg2aq6cxdlfa11434kqnypb") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.1.5 (c (n "taplo-lsp") (v "0.1.5") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.1.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.85.0") (f (quote ("proposed"))) (d #t) (k 0) (p "tamasfe-lsp-types")) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.10.0") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.5.3") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.3.2") (d #t) (k 0)) (d (n "time") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-compat-02") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1varf9w6xjyh55zyw9nyj9fdfv95ck6089hipmbgqsa0322qhpnq") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.1.6 (c (n "taplo-lsp") (v "0.1.6") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.1.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.85.0") (f (quote ("proposed"))) (d #t) (k 0) (p "tamasfe-lsp-types")) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.10.0") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.5.3") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.3.2") (d #t) (k 0)) (d (n "time") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-compat-02") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "0a5m0pjxfzkgp43003xrzrfa7652ydncrlw5ng08sbvcd7sbbwrw") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.1.7 (c (n "taplo-lsp") (v "0.1.7") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.1.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.85.0") (f (quote ("proposed"))) (d #t) (k 0) (p "tamasfe-lsp-types")) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.10.0") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.5.3") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.3.2") (d #t) (k 0)) (d (n "time") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-compat-02") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1181xkc7b7bd88bqjxi12bnv492h4dsn1dl3zsa2i3rgrq45q4kz") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.2.0 (c (n "taplo-lsp") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.1.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.85.0") (f (quote ("proposed"))) (d #t) (k 0) (p "tamasfe-lsp-types")) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.12.6") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.6.0") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.4.0") (d #t) (k 0)) (d (n "time") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1xj1xb8mpcf1185aff0msyjqaja37yb4zjygss8hqi34zlamggf2") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.2.1 (c (n "taplo-lsp") (v "0.2.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.1.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.85.0") (f (quote ("proposed"))) (d #t) (k 0) (p "tamasfe-lsp-types")) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.12.6") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.6.2") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.4.0") (d #t) (k 0)) (d (n "time") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "19l5mk0cgfxzmz7pixhk8m63ldpm8fvw7agnnf0idh559w9dxwp1") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.2.3 (c (n "taplo-lsp") (v "0.2.3") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.1.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.85.0") (f (quote ("proposed"))) (d #t) (k 0) (p "tamasfe-lsp-types")) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.12.6") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.6.3") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.4.0") (d #t) (k 0)) (d (n "time") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "14vlgfbj5c2q310hr40bwkhnkn9yar0v3d9cdf6lgkxp0bsqajjs") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.2.4 (c (n "taplo-lsp") (v "0.2.4") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.1.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.85.0") (f (quote ("proposed"))) (d #t) (k 0) (p "tamasfe-lsp-types")) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.12.6") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.6.3") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.4.0") (d #t) (k 0)) (d (n "time") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "0524r7skb7bhrifxbwr910fnl0w25gaid22z8wl6ljdssilmxszc") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.2.5 (c (n "taplo-lsp") (v "0.2.5") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.1.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.85.0") (f (quote ("proposed"))) (d #t) (k 0) (p "tamasfe-lsp-types")) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.12.6") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.6.3") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.4.0") (d #t) (k 0)) (d (n "time") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "0nppp8wh1qxgw99l8gk55rbq4lllhig7239kf5bcf5dhrw6fvr8a") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.2.6 (c (n "taplo-lsp") (v "0.2.6") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ctrlc") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lsp-async-stub") (r "^0.2.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.90.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "notify") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pathdiff") (r "^0.2") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "rowan") (r "^0.14.1") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.5") (d #t) (k 0)) (d (n "taplo") (r "^0.7.0") (f (quote ("serde" "verify" "schema"))) (d #t) (k 0)) (d (n "taplo-cli") (r "^0.4.1") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros" "fs" "io-util" "io-std" "sync" "net" "time" "process"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "verify") (r "^0.3") (f (quote ("schemars"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "0p46km0lanslg7a7qib093kmy7nqfcsnp5wr682gjxcibjviafsc") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.3.0 (c (n "taplo-lsp") (v "0.3.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.5.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.92.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.8.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.1.0") (d #t) (k 0)) (d (n "taplo-plugin-crates") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "14plmwmi4b8m3103ky24fsfn13kcb8925r6qjf2r6vxs7pxishg1") (f (quote (("plugin-crates" "taplo-plugin-crates") ("default"))))))

(define-public crate-taplo-lsp-0.3.1 (c (n "taplo-lsp") (v "0.3.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.5.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.92.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.8.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.1.2") (d #t) (k 0)) (d (n "taplo-plugin-crates") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "1gl7wcdna78yzsxnli4qskyga4ac7sw5fm644ska3hha0acm365x") (f (quote (("plugin-crates" "taplo-plugin-crates") ("default"))))))

(define-public crate-taplo-lsp-0.4.0 (c (n "taplo-lsp") (v "0.4.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.9.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.2.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "09x8v7bxqwn523ib2qnwlgvcmjjk36npdjjf7qgzyc1073nh3czr") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.4.1 (c (n "taplo-lsp") (v "0.4.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.9.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.2.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "1hrl3av5q0w7ysxr6h89aak72ak677xdcvl6v3h27ycskv7a9gmd") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.4.2 (c (n "taplo-lsp") (v "0.4.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.9.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.2.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "0wzg7zqq329x2gyvaa6v196ah35d5iw3msyjv57a1v3gpkj7wh61") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.4.3 (c (n "taplo-lsp") (v "0.4.3") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.9.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.2.1") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "0w9hdcvbz6xzk2qpg8z68ayr3i96ibbqaddmmv88sm9249gwmwwc") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.4.4 (c (n "taplo-lsp") (v "0.4.4") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.9.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.2.1") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "096kvzkpxbnijbhv8j5mkgc9z9jhyi9hkq9gk5rpdgv5paak89c7") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.4.5 (c (n "taplo-lsp") (v "0.4.5") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.9.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.2.1") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "1arjl447vg5r1dngbkqr070xq5jl7d7l5d0wdfcyg9p7k64n17aa") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.4.6 (c (n "taplo-lsp") (v "0.4.6") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.4") (f (quote ("json"))) (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.10.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.2.2") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "0r633ipygm2yjldlrwy465v9dbv0gkbrcg10yw0rrxvn0gxn18rs") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.5.0 (c (n "taplo-lsp") (v "0.5.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.9") (f (quote ("json" "rustls-tls"))) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.11.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.3.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "0yz4icpdvk0gg0nfp4r4yib6ynyfgiykw235q3n0wm8zjdc7hwni") (f (quote (("default"))))))

(define-public crate-taplo-lsp-0.5.1 (c (n "taplo-lsp") (v "0.5.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.9") (f (quote ("json"))) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.11.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.3.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "1g7sppgxd4z43jrbpfckhyqbfs240459l19i3q7pqcfi32swpav4") (f (quote (("rustls-tls" "taplo-common/rustls-tls") ("native-tls" "taplo-common/native-tls") ("default" "rustls-tls"))))))

(define-public crate-taplo-lsp-0.6.0 (c (n "taplo-lsp") (v "0.6.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.0") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.9") (f (quote ("json"))) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.4.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "0b187hkvvnq0iz32zbk5935mraxz693lyis59nx2rns9kxy470qa") (f (quote (("rustls-tls" "taplo-common/rustls-tls") ("native-tls" "taplo-common/native-tls") ("default" "rustls-tls"))))))

(define-public crate-taplo-lsp-0.6.1 (c (n "taplo-lsp") (v "0.6.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.9") (f (quote ("json"))) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.12.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.4.1") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "09c6yjj8rzdv4as9fjdscs7z9irwbpvvzb6y9yhx5fxbhgid0rf3") (f (quote (("rustls-tls" "taplo-common/rustls-tls") ("native-tls" "taplo-common/native-tls") ("default" "rustls-tls"))))))

(define-public crate-taplo-lsp-0.7.0 (c (n "taplo-lsp") (v "0.7.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "figment") (r "^0.10.6") (f (quote ("json"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lsp-async-stub") (r "^0.6.1") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (f (quote ("proposed"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.9") (f (quote ("json"))) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "tap") (r "^1.0.1") (d #t) (k 0)) (d (n "taplo") (r "^0.13.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "taplo-common") (r "^0.5.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.7") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)))) (h "003p597ppyfs6i4dkgqd8jbyw368rg65sw0jwnpp2lhhvklzxs6f") (f (quote (("rustls-tls" "taplo-common/rustls-tls") ("native-tls" "taplo-common/native-tls") ("default" "rustls-tls"))))))

