(define-module (crates-io ma pu mapuche-embedded) #:use-module (crates-io))

(define-public crate-mapuche-embedded-0.1.0 (c (n "mapuche-embedded") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "async-stream") (r "^0.3.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.64") (d #t) (k 0)) (d (n "atoi") (r "^2.0.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "crc") (r "^3.0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "glob") (r "^0.3.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "rocksdb") (r "^0.20.1") (f (quote ("multi-threaded-cf"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.57") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.1") (f (quote ("rt"))) (d #t) (k 0)) (d (n "uuid") (r "^1.3.0") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "13xiykv35d6yn9d6x78cyhlz6m6nim7rbh7r16vrlwhgh30iijzf")))

