(define-module (crates-io ma ds madsim-tokio-postgres) #:use-module (crates-io))

(define-public crate-madsim-tokio-postgres-0.2.0-alpha.5 (c (n "madsim-tokio-postgres") (v "0.2.0-alpha.5") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bit-vec-06") (r "^0.6") (d #t) (k 2) (p "bit-vec")) (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono-04") (r "^0.4") (k 2) (p "chrono")) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "eui48-04") (r "^0.4") (d #t) (k 2) (p "eui48")) (d (n "eui48-1") (r "^1.0") (d #t) (k 2) (p "eui48")) (d (n "fallible-iterator") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "geo-types-06") (r "^0.6") (d #t) (k 2) (p "geo-types")) (d (n "geo-types-07") (r "^0.7") (d #t) (k 2) (p "geo-types")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "madsim") (r "=0.2.0-alpha.5") (d #t) (t "cfg(madsim)") (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (k 0)) (d (n "phf") (r "^0.10") (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2") (d #t) (k 0)) (d (n "postgres-protocol") (r "^0.6.4") (d #t) (k 0)) (d (n "postgres-types") (r "^0.2.3") (d #t) (k 0)) (d (n "serde-1") (r "^1.0") (d #t) (k 2) (p "serde")) (d (n "serde_json-1") (r "^1.0") (d #t) (k 2) (p "serde_json")) (d (n "socket2") (r "^0.4") (d #t) (k 0)) (d (n "time-02") (r "^0.2") (d #t) (k 2) (p "time")) (d (n "time-03") (r "^0.3") (f (quote ("parsing"))) (d #t) (k 2) (p "time")) (d (n "tokio") (r "=0.2.0-alpha.5") (f (quote ("io-util"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tokio") (r "=0.2.0-alpha.5") (f (quote ("full"))) (d #t) (k 2) (p "madsim-tokio")) (d (n "tokio-util") (r "^0.7") (f (quote ("codec"))) (d #t) (k 0)) (d (n "uuid-08") (r "^0.8") (d #t) (k 2) (p "uuid")) (d (n "uuid-1") (r "^1.0") (d #t) (k 2) (p "uuid")))) (h "1awb8l1r9v7h429l9qgb5z6kiqjfqzmm3jcal245qr1nd5ylbj4l") (f (quote (("with-uuid-1" "postgres-types/with-uuid-1") ("with-uuid-0_8" "postgres-types/with-uuid-0_8") ("with-time-0_3" "postgres-types/with-time-0_3") ("with-time-0_2" "postgres-types/with-time-0_2") ("with-serde_json-1" "postgres-types/with-serde_json-1") ("with-geo-types-0_7" "postgres-types/with-geo-types-0_7") ("with-geo-types-0_6" "postgres-types/with-geo-types-0_6") ("with-eui48-1" "postgres-types/with-eui48-1") ("with-eui48-0_4" "postgres-types/with-eui48-0_4") ("with-chrono-0_4" "postgres-types/with-chrono-0_4") ("with-bit-vec-0_6" "postgres-types/with-bit-vec-0_6") ("runtime" "tokio/net" "tokio/time") ("default" "runtime") ("array-impls" "postgres-types/array-impls"))))))

(define-public crate-madsim-tokio-postgres-0.2.0-alpha.6 (c (n "madsim-tokio-postgres") (v "0.2.0-alpha.6") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bit-vec-06") (r "^0.6") (d #t) (k 2) (p "bit-vec")) (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono-04") (r "^0.4") (k 2) (p "chrono")) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "eui48-04") (r "^0.4") (d #t) (k 2) (p "eui48")) (d (n "eui48-1") (r "^1.0") (d #t) (k 2) (p "eui48")) (d (n "fallible-iterator") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "geo-types-06") (r "^0.6") (d #t) (k 2) (p "geo-types")) (d (n "geo-types-07") (r "^0.7") (d #t) (k 2) (p "geo-types")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "madsim") (r "=0.2.0-alpha.6") (d #t) (t "cfg(madsim)") (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (k 0)) (d (n "phf") (r "^0.10") (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2") (d #t) (k 0)) (d (n "postgres-protocol") (r "^0.6.4") (d #t) (k 0)) (d (n "postgres-types") (r "^0.2.3") (d #t) (k 0)) (d (n "serde-1") (r "^1.0") (d #t) (k 2) (p "serde")) (d (n "serde_json-1") (r "^1.0") (d #t) (k 2) (p "serde_json")) (d (n "socket2") (r "^0.4") (d #t) (k 0)) (d (n "time-02") (r "^0.2") (d #t) (k 2) (p "time")) (d (n "time-03") (r "^0.3") (f (quote ("parsing"))) (d #t) (k 2) (p "time")) (d (n "tokio") (r "=0.2.0-alpha.6") (f (quote ("io-util"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tokio") (r "=0.2.0-alpha.6") (f (quote ("full"))) (d #t) (k 2) (p "madsim-tokio")) (d (n "tokio-util") (r "^0.7") (f (quote ("codec"))) (d #t) (k 0)) (d (n "uuid-08") (r "^0.8") (d #t) (k 2) (p "uuid")) (d (n "uuid-1") (r "^1.0") (d #t) (k 2) (p "uuid")))) (h "16rgwc4g9xb1hcpc5h2i4jbl6s41c28s9ycz2vbns2fv7ghlpwhb") (f (quote (("with-uuid-1" "postgres-types/with-uuid-1") ("with-uuid-0_8" "postgres-types/with-uuid-0_8") ("with-time-0_3" "postgres-types/with-time-0_3") ("with-time-0_2" "postgres-types/with-time-0_2") ("with-serde_json-1" "postgres-types/with-serde_json-1") ("with-geo-types-0_7" "postgres-types/with-geo-types-0_7") ("with-geo-types-0_6" "postgres-types/with-geo-types-0_6") ("with-eui48-1" "postgres-types/with-eui48-1") ("with-eui48-0_4" "postgres-types/with-eui48-0_4") ("with-chrono-0_4" "postgres-types/with-chrono-0_4") ("with-bit-vec-0_6" "postgres-types/with-bit-vec-0_6") ("runtime" "tokio/net" "tokio/time") ("default" "runtime") ("array-impls" "postgres-types/array-impls"))))))

(define-public crate-madsim-tokio-postgres-0.2.0-alpha.7 (c (n "madsim-tokio-postgres") (v "0.2.0-alpha.7") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bit-vec-06") (r "^0.6") (d #t) (k 2) (p "bit-vec")) (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono-04") (r "^0.4") (k 2) (p "chrono")) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "eui48-04") (r "^0.4") (d #t) (k 2) (p "eui48")) (d (n "eui48-1") (r "^1.0") (d #t) (k 2) (p "eui48")) (d (n "fallible-iterator") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "geo-types-06") (r "^0.6") (d #t) (k 2) (p "geo-types")) (d (n "geo-types-07") (r "^0.7") (d #t) (k 2) (p "geo-types")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "madsim") (r "=0.2.0-alpha.7") (d #t) (t "cfg(madsim)") (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (k 0)) (d (n "phf") (r "^0.10") (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2") (d #t) (k 0)) (d (n "postgres-protocol") (r "^0.6.4") (d #t) (k 0)) (d (n "postgres-types") (r "^0.2.3") (d #t) (k 0)) (d (n "serde-1") (r "^1.0") (d #t) (k 2) (p "serde")) (d (n "serde_json-1") (r "^1.0") (d #t) (k 2) (p "serde_json")) (d (n "socket2") (r "^0.4") (d #t) (k 0)) (d (n "time-02") (r "^0.2") (d #t) (k 2) (p "time")) (d (n "time-03") (r "^0.3") (f (quote ("parsing"))) (d #t) (k 2) (p "time")) (d (n "tokio") (r "=0.2.0-alpha.7") (f (quote ("io-util"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tokio") (r "=0.2.0-alpha.7") (f (quote ("full"))) (d #t) (k 2) (p "madsim-tokio")) (d (n "tokio-util") (r "^0.7") (f (quote ("codec"))) (d #t) (k 0)) (d (n "uuid-08") (r "^0.8") (d #t) (k 2) (p "uuid")) (d (n "uuid-1") (r "^1.0") (d #t) (k 2) (p "uuid")))) (h "05845zxhpdz8nxw9n3g9klxrhr390mdd2x1i48cndjijnmhb6jq7") (f (quote (("with-uuid-1" "postgres-types/with-uuid-1") ("with-uuid-0_8" "postgres-types/with-uuid-0_8") ("with-time-0_3" "postgres-types/with-time-0_3") ("with-time-0_2" "postgres-types/with-time-0_2") ("with-serde_json-1" "postgres-types/with-serde_json-1") ("with-geo-types-0_7" "postgres-types/with-geo-types-0_7") ("with-geo-types-0_6" "postgres-types/with-geo-types-0_6") ("with-eui48-1" "postgres-types/with-eui48-1") ("with-eui48-0_4" "postgres-types/with-eui48-0_4") ("with-chrono-0_4" "postgres-types/with-chrono-0_4") ("with-bit-vec-0_6" "postgres-types/with-bit-vec-0_6") ("runtime" "tokio/net" "tokio/time") ("default" "runtime") ("array-impls" "postgres-types/array-impls"))))))

(define-public crate-madsim-tokio-postgres-0.2.0 (c (n "madsim-tokio-postgres") (v "0.2.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bit-vec-06") (r "^0.6") (d #t) (k 2) (p "bit-vec")) (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono-04") (r "^0.4") (k 2) (p "chrono")) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "eui48-04") (r "^0.4") (d #t) (k 2) (p "eui48")) (d (n "eui48-1") (r "^1.0") (d #t) (k 2) (p "eui48")) (d (n "fallible-iterator") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "geo-types-06") (r "^0.6") (d #t) (k 2) (p "geo-types")) (d (n "geo-types-07") (r "^0.7") (d #t) (k 2) (p "geo-types")) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (k 0)) (d (n "phf") (r "^0.10") (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2") (d #t) (k 0)) (d (n "postgres-protocol") (r "^0.6.4") (d #t) (k 0)) (d (n "postgres-types") (r "^0.2.3") (d #t) (k 0)) (d (n "serde-1") (r "^1.0") (d #t) (k 2) (p "serde")) (d (n "serde_json-1") (r "^1.0") (d #t) (k 2) (p "serde_json")) (d (n "socket2") (r "^0.4") (d #t) (k 0)) (d (n "time-02") (r "^0.2") (d #t) (k 2) (p "time")) (d (n "time-03") (r "^0.3") (f (quote ("parsing"))) (d #t) (k 2) (p "time")) (d (n "tokio") (r "^0.2") (f (quote ("io-util"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 2) (p "madsim-tokio")) (d (n "tokio-util") (r "^0.7") (f (quote ("codec"))) (d #t) (k 0)) (d (n "uuid-08") (r "^0.8") (d #t) (k 2) (p "uuid")) (d (n "uuid-1") (r "^1.0") (d #t) (k 2) (p "uuid")))) (h "03rf204cnym70pfq2xb1qn99p0xrbfsahhzrrmf33fcgl1figp3c") (f (quote (("with-uuid-1" "postgres-types/with-uuid-1") ("with-uuid-0_8" "postgres-types/with-uuid-0_8") ("with-time-0_3" "postgres-types/with-time-0_3") ("with-time-0_2" "postgres-types/with-time-0_2") ("with-serde_json-1" "postgres-types/with-serde_json-1") ("with-geo-types-0_7" "postgres-types/with-geo-types-0_7") ("with-geo-types-0_6" "postgres-types/with-geo-types-0_6") ("with-eui48-1" "postgres-types/with-eui48-1") ("with-eui48-0_4" "postgres-types/with-eui48-0_4") ("with-chrono-0_4" "postgres-types/with-chrono-0_4") ("with-bit-vec-0_6" "postgres-types/with-bit-vec-0_6") ("runtime" "tokio/net" "tokio/time") ("default" "runtime") ("array-impls" "postgres-types/array-impls"))))))

