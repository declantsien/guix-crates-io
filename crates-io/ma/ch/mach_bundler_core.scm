(define-module (crates-io ma ch mach_bundler_core) #:use-module (crates-io))

(define-public crate-mach_bundler_core-0.0.0-local (c (n "mach_bundler_core") (v "0.0.0-local") (d (list (d (n "clap") (r "4.*") (f (quote ("derive" "env"))) (o #t) (d #t) (k 0)) (d (n "glob-match") (r "0.*") (d #t) (k 0)) (d (n "html5ever") (r "0.*") (d #t) (k 0)) (d (n "ipc_channel_adapter") (r "0.*") (o #t) (d #t) (k 0)) (d (n "markup5ever_rcdom") (r "0.*") (d #t) (k 0)) (d (n "napi") (r "2.*") (f (quote ("napi8" "tokio_rt" "serde-json" "async"))) (o #t) (k 0)) (d (n "normalize-path") (r "0.*") (d #t) (k 0)) (d (n "num_cpus") (r "1.*") (d #t) (k 0)) (d (n "once_cell") (r "1.*") (d #t) (k 0)) (d (n "oxc_resolver") (r "1.*") (d #t) (k 0)) (d (n "pathdiff") (r "0.*") (d #t) (k 0)) (d (n "serde") (r "1.*") (d #t) (k 0)) (d (n "serde_json") (r "1.*") (d #t) (k 0)) (d (n "sha2") (r "0.*") (d #t) (k 0)) (d (n "swc_core") (r "=0.90.23") (f (quote ("ecma_ast" "ecma_parser" "common" "ecma_visit" "ecma_transforms" "common_concurrent" "ecma_codegen" "ecma_transforms_typescript" "ecma_transforms_react" "ecma_transforms_optimization" "ecma_minifier"))) (d #t) (k 0)))) (h "1g5kbbwfl380rxb7qkn08s66vlsqgax5ndq3rdcigbz69qxv50b2") (f (quote (("cli_parser" "clap") ("adapters_nodejs_napi" "napi") ("adapters_nodejs_ipc_host" "ipc_channel_adapter") ("adapters_nodejs_ipc_client" "napi" "ipc_channel_adapter")))) (y #t)))

(define-public crate-mach_bundler_core-0.0.68 (c (n "mach_bundler_core") (v "0.0.68") (d (list (d (n "clap") (r "4.*") (f (quote ("derive" "env"))) (o #t) (d #t) (k 0)) (d (n "glob-match") (r "0.*") (d #t) (k 0)) (d (n "html5ever") (r "0.*") (d #t) (k 0)) (d (n "ipc_channel_adapter") (r "0.*") (o #t) (d #t) (k 0)) (d (n "markup5ever_rcdom") (r "0.*") (d #t) (k 0)) (d (n "napi") (r "2.*") (f (quote ("napi8" "tokio_rt" "serde-json" "async"))) (o #t) (k 0)) (d (n "normalize-path") (r "0.*") (d #t) (k 0)) (d (n "num_cpus") (r "1.*") (d #t) (k 0)) (d (n "once_cell") (r "1.*") (d #t) (k 0)) (d (n "oxc_resolver") (r "1.*") (d #t) (k 0)) (d (n "pathdiff") (r "0.*") (d #t) (k 0)) (d (n "serde") (r "1.*") (d #t) (k 0)) (d (n "serde_json") (r "1.*") (d #t) (k 0)) (d (n "sha2") (r "0.*") (d #t) (k 0)) (d (n "swc_core") (r "=0.90.23") (f (quote ("ecma_ast" "ecma_parser" "common" "ecma_visit" "ecma_transforms" "common_concurrent" "ecma_codegen" "ecma_transforms_typescript" "ecma_transforms_react" "ecma_transforms_optimization" "ecma_minifier"))) (d #t) (k 0)))) (h "0cn4bxr8jmlwgfg08s0cqq7h5i2dywan2abkj8vgjx88i8mdpiq3") (f (quote (("cli_parser" "clap") ("adapters_nodejs_napi" "napi") ("adapters_nodejs_ipc_host" "ipc_channel_adapter") ("adapters_nodejs_ipc_client" "napi" "ipc_channel_adapter"))))))

(define-public crate-mach_bundler_core-0.0.71 (c (n "mach_bundler_core") (v "0.0.71") (d (list (d (n "clap") (r "4.*") (f (quote ("derive" "env"))) (o #t) (d #t) (k 0)) (d (n "glob-match") (r "0.*") (d #t) (k 0)) (d (n "html5ever") (r "0.*") (d #t) (k 0)) (d (n "ipc_channel_adapter") (r "0.*") (o #t) (d #t) (k 0)) (d (n "markup5ever_rcdom") (r "0.*") (d #t) (k 0)) (d (n "napi") (r "2.*") (f (quote ("napi8" "tokio_rt" "serde-json" "async"))) (o #t) (k 0)) (d (n "normalize-path") (r "0.*") (d #t) (k 0)) (d (n "num_cpus") (r "1.*") (d #t) (k 0)) (d (n "once_cell") (r "1.*") (d #t) (k 0)) (d (n "oxc_resolver") (r "1.*") (d #t) (k 0)) (d (n "pathdiff") (r "0.*") (d #t) (k 0)) (d (n "serde") (r "1.*") (d #t) (k 0)) (d (n "serde_json") (r "1.*") (d #t) (k 0)) (d (n "sha2") (r "0.*") (d #t) (k 0)) (d (n "swc_core") (r "=0.90.23") (f (quote ("ecma_ast" "ecma_parser" "common" "ecma_visit" "ecma_transforms" "common_concurrent" "ecma_codegen" "ecma_transforms_typescript" "ecma_transforms_react" "ecma_transforms_optimization" "ecma_minifier"))) (d #t) (k 0)))) (h "1mj0bximvvibyrd02fhnicb4kis8cj43ysd895a47plnga9wc1zp") (f (quote (("cli_parser" "clap") ("adapters_nodejs_napi" "napi") ("adapters_nodejs_ipc_host" "ipc_channel_adapter") ("adapters_nodejs_ipc_client" "napi" "ipc_channel_adapter"))))))

