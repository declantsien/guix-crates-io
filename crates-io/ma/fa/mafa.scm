(define-module (crates-io ma fa mafa) #:use-module (crates-io))

(define-public crate-mafa-0.1.0-beta1 (c (n "mafa") (v "0.1.0-beta1") (d (list (d (n "bwrap") (r "^0.1.0-beta3") (f (quote ("use_std"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.0") (f (quote ("cargo"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.146") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.29.0") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.8.2") (d #t) (k 0)) (d (n "rustyline") (r "^12.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "wda") (r "^0.1.0-beta8") (f (quote ("firefox"))) (d #t) (k 0)))) (h "17j0yldj03m0vz2w6ya8g9dzb160z87yh1aslfw9c9snkjc1pf9y") (f (quote (("gtrans") ("dev" "wda/dev") ("default")))) (s 2) (e (quote (("twtl" "dep:quick-xml") ("imode" "dep:rustyline"))))))

(define-public crate-mafa-0.1.0-beta2 (c (n "mafa") (v "0.1.0-beta2") (d (list (d (n "bwrap") (r "^0.1.0-beta3") (f (quote ("use_std"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.0") (f (quote ("cargo"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.146") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.29.0") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.8.2") (d #t) (k 0)) (d (n "rustyline") (r "^12.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "wda") (r "^0.1.0-beta8") (f (quote ("firefox"))) (d #t) (k 0)))) (h "0rghjp1ainrxbdnhgd1njd1vgzn3zsj4mk88i0nnss4vyxgjcm1c") (f (quote (("gtrans") ("dev" "wda/dev") ("default")))) (s 2) (e (quote (("twtl" "dep:quick-xml") ("imode" "dep:rustyline"))))))

(define-public crate-mafa-0.1.0-beta3 (c (n "mafa") (v "0.1.0-beta3") (d (list (d (n "bwrap") (r "^0.1.0-beta4") (f (quote ("use_std"))) (d #t) (k 0)) (d (n "clap") (r "^4.0.0") (f (quote ("cargo"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.0.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.29.0") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^12.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.0") (d #t) (k 0)) (d (n "wda") (r "^0.1.0-beta8") (f (quote ("firefox"))) (d #t) (k 0)))) (h "0bwak3b0grpc7q0gwk5sx8i76d30saghqll6q9kca63nxjfqdkwf") (f (quote (("tst_twtl_logined") ("gtrans") ("dev" "wda/dev") ("default") ("camd")))) (s 2) (e (quote (("twtl" "dep:quick-xml") ("imode" "dep:rustyline")))) (r "1.66.0")))

(define-public crate-mafa-0.1.0-beta4 (c (n "mafa") (v "0.1.0-beta4") (d (list (d (n "bwrap") (r "^0.1.0-beta6") (f (quote ("use_std"))) (d #t) (k 0)) (d (n "clap") (r "^4.0.0") (f (quote ("cargo"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.0.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.29.0") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^12.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.0") (d #t) (k 0)) (d (n "wda") (r "^0.1.0-beta8") (f (quote ("firefox"))) (d #t) (k 0)))) (h "11h74kixy65hywgwz8xr9cl5i1gdyvc90cp3zy6pm0g6kzdf6v0d") (f (quote (("tst_twtl_logined") ("gtrans") ("dev" "wda/dev") ("default") ("camd")))) (s 2) (e (quote (("twtl" "dep:quick-xml") ("imode" "dep:rustyline")))) (r "1.66.0")))

(define-public crate-mafa-0.1.0 (c (n "mafa") (v "0.1.0") (d (list (d (n "bwrap") (r "^1.0.0") (f (quote ("use_std"))) (d #t) (k 0)) (d (n "clap") (r "^4.0.0") (f (quote ("cargo"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.0.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.29.0") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^12.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.0") (d #t) (k 0)) (d (n "wda") (r "^0.1.0-beta8") (f (quote ("firefox"))) (d #t) (k 0)))) (h "1dznfyb5d24qannfg33kymxxp8030jviyawwshw13c97lwbbdj58") (f (quote (("tst_twtl_logined") ("gtrans") ("dev" "wda/dev") ("default") ("camd")))) (s 2) (e (quote (("twtl" "dep:quick-xml") ("imode" "dep:rustyline")))) (r "1.66.0")))

(define-public crate-mafa-0.2.1 (c (n "mafa") (v "0.2.1") (d (list (d (n "bwrap") (r "^1.0.0") (f (quote ("use_std"))) (d #t) (k 0)) (d (n "clap") (r "^4.0.0") (f (quote ("cargo"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.0.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.29.0") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^12.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.0") (d #t) (k 0)) (d (n "wda") (r "^0.1.0-beta8") (f (quote ("firefox"))) (d #t) (k 0)))) (h "11rbd02zc4jh0yzh5fijll9c50535k9cbqs56kzfm4gqsx9kal0d") (f (quote (("tst_twtl_logined") ("gtrans") ("dev" "wda/dev") ("default") ("camd")))) (s 2) (e (quote (("twtl" "dep:quick-xml") ("imode" "dep:rustyline")))) (r "1.66.0")))

(define-public crate-mafa-0.2.2 (c (n "mafa") (v "0.2.2") (d (list (d (n "bwrap") (r "^1.0.0") (f (quote ("use_std"))) (d #t) (k 0)) (d (n "clap") (r "^4.0.0") (f (quote ("cargo"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.0.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.29.0") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^12.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.0") (d #t) (k 0)) (d (n "wda") (r "^0.1.0-beta8") (f (quote ("firefox"))) (d #t) (k 0)))) (h "17bqiq9a3dbq5dq5lxddygrqg348wr08fnblp20mc1dnwisdnhnr") (f (quote (("tst_twtl_logined") ("gtrans") ("dev" "wda/dev") ("default" "imode" "gtrans" "camd" "twtl") ("camd")))) (s 2) (e (quote (("twtl" "dep:quick-xml") ("imode" "dep:rustyline")))) (r "1.66.0")))

(define-public crate-mafa-0.2.3 (c (n "mafa") (v "0.2.3") (d (list (d (n "bwrap") (r "^1.0.0") (f (quote ("use_std"))) (d #t) (k 0)) (d (n "clap") (r "^4.0.0") (f (quote ("cargo"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.0.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.29.0") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^12.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.0") (d #t) (k 0)) (d (n "wda") (r "^0.1.0-beta8") (f (quote ("firefox"))) (d #t) (k 0)))) (h "0xi17hghwg8pdb1h2yg0hvhhigjhf7gsp6yg9jd60ks3hyvy75pf") (f (quote (("tst_twtl_logined") ("gtrans") ("dev" "wda/dev") ("default" "imode" "gtrans" "camd" "twtl") ("camd")))) (s 2) (e (quote (("twtl" "dep:quick-xml") ("imode" "dep:rustyline")))) (r "1.66.0")))

(define-public crate-mafa-0.3.0 (c (n "mafa") (v "0.3.0") (d (list (d (n "bwrap") (r "^1.0.0") (f (quote ("use_std"))) (d #t) (k 0)) (d (n "clap") (r "^4.0.0") (f (quote ("cargo"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.0.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.29.0") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^12.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.0") (d #t) (k 0)) (d (n "wda") (r "^0.5.0") (f (quote ("firefox"))) (d #t) (k 0)))) (h "1rxil8hql6fwb2apl5zb3gjglwr4l5y1q4i60xlins2iyd1ncvi2") (f (quote (("tst_twtl_logined") ("gtrans") ("dev" "wda/dev") ("default" "imode" "gtrans" "camd" "twtl") ("camd")))) (s 2) (e (quote (("twtl" "dep:quick-xml") ("imode" "dep:rustyline")))) (r "1.66.0")))

(define-public crate-mafa-0.3.1 (c (n "mafa") (v "0.3.1") (d (list (d (n "bwrap") (r "^1.0.0") (f (quote ("use_std"))) (d #t) (k 0)) (d (n "clap") (r "^4.0.0") (f (quote ("cargo"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.0.0") (d #t) (k 0)) (d (n "os_info") (r "^3.7.0") (k 0)) (d (n "quick-xml") (r "^0.29.0") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^12.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.0") (d #t) (k 0)) (d (n "wda") (r "^0.5.0") (f (quote ("firefox"))) (d #t) (k 0)))) (h "18qx51mchxfrwgk3dw9yd160f2yk27vdj71il67fhn525z2rgc57") (f (quote (("tst_twtl_logined") ("gtrans") ("dev" "wda/dev") ("default" "imode" "gtrans" "camd" "twtl") ("camd")))) (s 2) (e (quote (("twtl" "dep:quick-xml") ("imode" "dep:rustyline")))) (r "1.66.0")))

