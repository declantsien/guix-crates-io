(define-module (crates-io ma tr matrixcompare) #:use-module (crates-io))

(define-public crate-matrixcompare-0.1.0 (c (n "matrixcompare") (v "0.1.0") (d (list (d (n "matrixcompare-core") (r "^0.1") (d #t) (k 0)) (d (n "matrixcompare-mock") (r "^0.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)))) (h "0qq1v0b467g2qljsblpjmil5lv2kd78n8khvc2lcgw89nflli96l")))

(define-public crate-matrixcompare-0.1.1 (c (n "matrixcompare") (v "0.1.1") (d (list (d (n "matrixcompare-core") (r "^0.1") (d #t) (k 0)) (d (n "matrixcompare-mock") (r "^0.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)))) (h "056wkij2afalg9z7lrjvy666m85r3832xx2migmba0hm4rc12mf1")))

(define-public crate-matrixcompare-0.1.2 (c (n "matrixcompare") (v "0.1.2") (d (list (d (n "matrixcompare-core") (r "^0.1") (d #t) (k 0)) (d (n "matrixcompare-mock") (r "^0.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)))) (h "1vy86qfaicq0sbb4s8rx526zqihzkhfi860k3kcha5hkk1qhbvy2")))

(define-public crate-matrixcompare-0.1.3 (c (n "matrixcompare") (v "0.1.3") (d (list (d (n "matrixcompare-core") (r "^0.1") (d #t) (k 0)) (d (n "matrixcompare-mock") (r "^0.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)))) (h "1jspvha52glsdgpvxmh8jic18hdd6c8wn30aycpy2qxw9grvziw0")))

(define-public crate-matrixcompare-0.1.4 (c (n "matrixcompare") (v "0.1.4") (d (list (d (n "matrixcompare-core") (r "^0.1") (d #t) (k 0)) (d (n "matrixcompare-mock") (r "^0.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)))) (h "1bzzbzcfxlddwkk2fnxmjgng811api9srbrjgw5285j6sylpbw7q") (f (quote (("proptest-support" "proptest"))))))

(define-public crate-matrixcompare-0.2.0 (c (n "matrixcompare") (v "0.2.0") (d (list (d (n "matrixcompare-core") (r "^0.1") (d #t) (k 0)) (d (n "matrixcompare-mock") (r "^0.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)))) (h "110p07pqgnx7z364ms0drhkrx3zx0dvwa8zakfdl2rklqg7zy5lx") (f (quote (("proptest-support" "proptest"))))))

(define-public crate-matrixcompare-0.2.1 (c (n "matrixcompare") (v "0.2.1") (d (list (d (n "matrixcompare-core") (r "^0.1") (d #t) (k 0)) (d (n "matrixcompare-mock") (r "^0.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)))) (h "046x25j9v42syns6g8sp3lv4kad55cr4p2bvvs6kyj85dbcz8hiv") (f (quote (("proptest-support" "proptest"))))))

(define-public crate-matrixcompare-0.3.0 (c (n "matrixcompare") (v "0.3.0") (d (list (d (n "matrixcompare-core") (r "^0.1") (d #t) (k 0)) (d (n "matrixcompare-mock") (r "^0.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)))) (h "0i84m1jlxmgyw4farhxbfhyb815hrj6ijq23dgb96z7442l2p0rp") (f (quote (("proptest-support" "proptest"))))))

