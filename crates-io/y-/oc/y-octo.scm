(define-module (crates-io y- oc y-octo) #:use-module (crates-io))

(define-public crate-y-octo-0.0.1 (c (n "y-octo") (v "0.0.1") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (d #t) (t "cfg(fuzzing)") (k 0)) (d (n "assert-json-diff") (r "^2.0") (d #t) (k 2)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "lib0") (r "^0.16") (f (quote ("lib0-serde"))) (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "loom") (r "^0.6") (f (quote ("checkpoint"))) (d #t) (t "cfg(loom)") (k 0)) (d (n "nanoid") (r "^0.4") (d #t) (k 0)) (d (n "nom") (r "^7.1") (d #t) (k 0)) (d (n "ordered-float") (r "^3.8") (d #t) (k 0)) (d (n "ordered-float") (r "^3.8") (f (quote ("arbitrary"))) (d #t) (t "cfg(fuzzing)") (k 0)) (d (n "ordered-float") (r "^3.8") (f (quote ("proptest"))) (d #t) (k 2)) (d (n "path-ext") (r "^0.1") (d #t) (k 2)) (d (n "proptest") (r "^1.1") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "y-sync") (r "=0.3.0") (d #t) (k 2)) (d (n "yrs") (r "=0.16.5") (d #t) (k 2)))) (h "17ava6xfljxacrsxrs6hbb470xmwm75nf9wf39cy5fd4a7377kr6") (f (quote (("bench"))))))

