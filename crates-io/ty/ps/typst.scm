(define-module (crates-io ty ps typst) #:use-module (crates-io))

(define-public crate-typst-0.1.0 (c (n "typst") (v "0.1.0") (h "16b4yvqzp5r96f305bawyilh7l2jlvlakysl39ygjj8yxrbw3apa")))

(define-public crate-typst-0.1.1 (c (n "typst") (v "0.1.1") (h "1rp36sbpdqpdhvvppmv0ygppvg137xyi3g1jmd0r1rdk7zwmwfjk")))

(define-public crate-typst-0.11.0-rc1 (c (n "typst") (v "0.11.0-rc1") (d (list (d (n "az") (r "^1.2") (d #t) (k 0)) (d (n "bitflags") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chinese-number") (r "^0.7.2") (f (quote ("number-to-chinese"))) (k 0)) (d (n "ciborium") (r "^0.2.1") (d #t) (k 0)) (d (n "comemo") (r "^0.4") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "ecow") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "fontdb") (r "^0.16") (k 0)) (d (n "hayagriva") (r "^0.5.2") (d #t) (k 0)) (d (n "hypher") (r "^0.1.4") (d #t) (k 0)) (d (n "icu_properties") (r "^1.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "icu_provider") (r "^1.4") (f (quote ("sync"))) (d #t) (k 0)) (d (n "icu_provider_adapters") (r "^1.4") (d #t) (k 0)) (d (n "icu_provider_blob") (r "^1.4") (d #t) (k 0)) (d (n "icu_segmenter") (r "^1.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "if_chain") (r "^1") (d #t) (k 0)) (d (n "image") (r "^0.24") (f (quote ("png" "jpeg" "gif"))) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "kamadak-exif") (r "^0.5") (d #t) (k 0)) (d (n "kurbo") (r "^0.9") (d #t) (k 0)) (d (n "lipsum") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "palette") (r "^0.7.3") (f (quote ("approx" "libm"))) (k 0)) (d (n "phf") (r "^0.11") (f (quote ("macros"))) (d #t) (k 0)) (d (n "png") (r "^0.17") (d #t) (k 0)) (d (n "portable-atomic") (r "^1.6") (d #t) (k 0)) (d (n "qcms") (r "^0.3.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "roxmltree") (r "^0.19") (d #t) (k 0)) (d (n "rustybuzz") (r "^0.12.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.184") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 0)) (d (n "siphasher") (r "^1") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.1") (f (quote ("union" "const_generics" "const_new"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "syntect") (r "^5") (f (quote ("parsing" "regex-fancy" "plist-load" "yaml-load"))) (k 0)) (d (n "time") (r "^0.3.20") (f (quote ("formatting" "macros" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.8") (f (quote ("parse" "display"))) (k 0)) (d (n "ttf-parser") (r "^0.20.0") (d #t) (k 0)) (d (n "two-face") (r "^0.3.0") (f (quote ("syntect-fancy"))) (k 0)) (d (n "typed-arena") (r "^2") (d #t) (k 0)) (d (n "typst-assets") (r "^0.11.0-rc1") (d #t) (k 0)) (d (n "typst-macros") (r "^0.11.0-rc1") (d #t) (k 0)) (d (n "typst-syntax") (r "^0.11.0-rc1") (d #t) (k 0)) (d (n "typst-timing") (r "^0.11.0-rc1") (d #t) (k 0)) (d (n "unicode-bidi") (r "^0.3.13") (d #t) (k 0)) (d (n "unicode-math-class") (r "^0.1") (d #t) (k 0)) (d (n "unicode-script") (r "^0.5") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1") (d #t) (k 0)) (d (n "usvg") (r "^0.38.0") (f (quote ("text"))) (k 0)) (d (n "wasmi") (r "^0.31.0") (d #t) (k 0)))) (h "1a5drhmgyphxkn7hw1ijcyiyf0iasgl9vrcjaan21nzqmg13hc8g") (r "1.74")))

(define-public crate-typst-0.11.0 (c (n "typst") (v "0.11.0") (d (list (d (n "az") (r "^1.2") (d #t) (k 0)) (d (n "bitflags") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chinese-number") (r "^0.7.2") (f (quote ("number-to-chinese"))) (k 0)) (d (n "ciborium") (r "^0.2.1") (d #t) (k 0)) (d (n "comemo") (r "^0.4") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "ecow") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "fontdb") (r "^0.16") (k 0)) (d (n "hayagriva") (r "^0.5.2") (d #t) (k 0)) (d (n "hypher") (r "^0.1.4") (d #t) (k 0)) (d (n "icu_properties") (r "^1.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "icu_provider") (r "^1.4") (f (quote ("sync"))) (d #t) (k 0)) (d (n "icu_provider_adapters") (r "^1.4") (d #t) (k 0)) (d (n "icu_provider_blob") (r "^1.4") (d #t) (k 0)) (d (n "icu_segmenter") (r "^1.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "if_chain") (r "^1") (d #t) (k 0)) (d (n "image") (r "^0.24") (f (quote ("png" "jpeg" "gif"))) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "kamadak-exif") (r "^0.5") (d #t) (k 0)) (d (n "kurbo") (r "^0.9") (d #t) (k 0)) (d (n "lipsum") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "palette") (r "^0.7.3") (f (quote ("approx" "libm"))) (k 0)) (d (n "phf") (r "^0.11") (f (quote ("macros"))) (d #t) (k 0)) (d (n "png") (r "^0.17") (d #t) (k 0)) (d (n "portable-atomic") (r "^1.6") (d #t) (k 0)) (d (n "qcms") (r "^0.3.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "roxmltree") (r "^0.19") (d #t) (k 0)) (d (n "rustybuzz") (r "^0.12.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.184") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 0)) (d (n "siphasher") (r "^1") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.1") (f (quote ("union" "const_generics" "const_new"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "syntect") (r "^5") (f (quote ("parsing" "regex-fancy" "plist-load" "yaml-load"))) (k 0)) (d (n "time") (r "^0.3.20") (f (quote ("formatting" "macros" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.8") (f (quote ("parse" "display"))) (k 0)) (d (n "ttf-parser") (r "^0.20.0") (d #t) (k 0)) (d (n "two-face") (r "^0.3.0") (f (quote ("syntect-fancy"))) (k 0)) (d (n "typed-arena") (r "^2") (d #t) (k 0)) (d (n "typst-assets") (r "^0.11.0") (d #t) (k 0)) (d (n "typst-macros") (r "^0.11.0") (d #t) (k 0)) (d (n "typst-syntax") (r "^0.11.0") (d #t) (k 0)) (d (n "typst-timing") (r "^0.11.0") (d #t) (k 0)) (d (n "unicode-bidi") (r "^0.3.13") (d #t) (k 0)) (d (n "unicode-math-class") (r "^0.1") (d #t) (k 0)) (d (n "unicode-script") (r "^0.5") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1") (d #t) (k 0)) (d (n "usvg") (r "^0.38.0") (f (quote ("text"))) (k 0)) (d (n "wasmi") (r "^0.31.0") (d #t) (k 0)))) (h "14rrwiil9jall56gi1558s8qyp77caw0kc56xfsw8b1xlcrnbkl2") (r "1.74")))

(define-public crate-typst-0.11.1 (c (n "typst") (v "0.11.1") (d (list (d (n "az") (r "^1.2") (d #t) (k 0)) (d (n "bitflags") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chinese-number") (r "^0.7.2") (f (quote ("number-to-chinese"))) (k 0)) (d (n "ciborium") (r "^0.2.1") (d #t) (k 0)) (d (n "comemo") (r "^0.4") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "ecow") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "fontdb") (r "^0.16") (k 0)) (d (n "hayagriva") (r "^0.5.3") (d #t) (k 0)) (d (n "hypher") (r "^0.1.4") (d #t) (k 0)) (d (n "icu_properties") (r "^1.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "icu_provider") (r "^1.4") (f (quote ("sync"))) (d #t) (k 0)) (d (n "icu_provider_adapters") (r "^1.4") (d #t) (k 0)) (d (n "icu_provider_blob") (r "^1.4") (d #t) (k 0)) (d (n "icu_segmenter") (r "^1.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "if_chain") (r "^1") (d #t) (k 0)) (d (n "image") (r "^0.24") (f (quote ("png" "jpeg" "gif"))) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "kamadak-exif") (r "^0.5") (d #t) (k 0)) (d (n "kurbo") (r "^0.9") (d #t) (k 0)) (d (n "lipsum") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "palette") (r "^0.7.3") (f (quote ("approx" "libm"))) (k 0)) (d (n "phf") (r "^0.11") (f (quote ("macros"))) (d #t) (k 0)) (d (n "png") (r "^0.17") (d #t) (k 0)) (d (n "portable-atomic") (r "^1.6") (d #t) (k 0)) (d (n "qcms") (r "^0.3.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "roxmltree") (r "^0.19") (d #t) (k 0)) (d (n "rustybuzz") (r "^0.12.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.184") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 0)) (d (n "siphasher") (r "^1") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.1") (f (quote ("union" "const_generics" "const_new"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "syntect") (r "^5") (f (quote ("parsing" "regex-fancy" "plist-load" "yaml-load"))) (k 0)) (d (n "time") (r "^0.3.20") (f (quote ("formatting" "macros" "parsing"))) (d #t) (k 0)) (d (n "toml") (r "^0.8") (f (quote ("parse" "display"))) (k 0)) (d (n "ttf-parser") (r "^0.20.0") (d #t) (k 0)) (d (n "two-face") (r "^0.3.0") (f (quote ("syntect-fancy"))) (k 0)) (d (n "typed-arena") (r "^2") (d #t) (k 0)) (d (n "typst-assets") (r "^0.11.1") (d #t) (k 0)) (d (n "typst-macros") (r "^0.11.1") (d #t) (k 0)) (d (n "typst-syntax") (r "^0.11.1") (d #t) (k 0)) (d (n "typst-timing") (r "^0.11.1") (d #t) (k 0)) (d (n "unicode-bidi") (r "^0.3.13") (d #t) (k 0)) (d (n "unicode-math-class") (r "^0.1") (d #t) (k 0)) (d (n "unicode-script") (r "^0.5") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1") (d #t) (k 0)) (d (n "usvg") (r "^0.38.0") (f (quote ("text"))) (k 0)) (d (n "wasmi") (r "^0.31.0") (d #t) (k 0)))) (h "16psqnwkzrrgqpqnl2dl4zcx6pwy6gpm1bj3057ljdq9sabj4j8j") (r "1.74")))

