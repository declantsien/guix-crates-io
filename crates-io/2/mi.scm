(define-module (crates-io #{2}# mi) #:use-module (crates-io))

(define-public crate-mi-0.1.2-alpha.0 (c (n "mi") (v "0.1.2-alpha.0") (d (list (d (n "anyhow") (r "^1.0.36") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 2)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "lru_time_cache") (r "^0.11.3") (d #t) (k 0)) (d (n "names") (r "^0.11.0") (d #t) (k 2)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "procfs") (r "^0.9.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.2") (d #t) (k 0)) (d (n "rusqlite") (r "^0.24.2") (f (quote ("functions" "blob" "bundled" "array"))) (d #t) (k 0) (p "rusqlite-le")) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.60") (d #t) (k 0)) (d (n "structopt") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.6.0") (d #t) (k 0)) (d (n "zstd-safe") (r "^3.0.0") (d #t) (k 0)))) (h "0mpq3frnndw93iaharfkj5vc2fzdqhh6x9r16r0rgw9yzw3qr4wj") (f (quote (("default") ("build_extension" "rusqlite/loadable_extension") ("benchmark" "structopt" "procfs" "rusqlite/backup" "rusqlite/load_extension") ("all" "benchmark"))))))

