(define-module (crates-io su bs substrate-wasmtime-runtime) #:use-module (crates-io))

(define-public crate-substrate-wasmtime-runtime-0.13.0-threadsafe.1 (c (n "substrate-wasmtime-runtime") (v "0.13.0-threadsafe.1") (d (list (d (n "backtrace") (r "^0.3.42") (d #t) (k 0)) (d (n "cc") (r "^1.0") (d #t) (k 1)) (d (n "cfg-if") (r "^0.1.9") (d #t) (k 0)) (d (n "indexmap") (r "^1.0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2.60") (k 0)) (d (n "memoffset") (r "^0.5.3") (d #t) (k 0)) (d (n "more-asserts") (r "^0.2.1") (d #t) (k 0)) (d (n "region") (r "^2.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.4") (d #t) (k 0)) (d (n "wasmtime-environ") (r "^0.12.0") (d #t) (k 0)) (d (n "wasmtime-profiling") (r "^0.12.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3.7") (f (quote ("winbase" "memoryapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1f6f10g21kpkq7794l8gw971nbnac9ig0c7bgv17yfi90ipq823d")))

(define-public crate-substrate-wasmtime-runtime-0.16.0-threadsafe.1 (c (n "substrate-wasmtime-runtime") (v "0.16.0-threadsafe.1") (d (list (d (n "backtrace") (r "^0.3.42") (d #t) (k 0)) (d (n "cc") (r "^1.0") (d #t) (k 1)) (d (n "cfg-if") (r "^0.1.9") (d #t) (k 0)) (d (n "indexmap") (r "^1.0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2.60") (k 0)) (d (n "memoffset") (r "^0.5.3") (d #t) (k 0)) (d (n "more-asserts") (r "^0.2.1") (d #t) (k 0)) (d (n "region") (r "^2.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.4") (d #t) (k 0)) (d (n "wasmtime-environ") (r "^0.16.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3.7") (f (quote ("winbase" "memoryapi" "errhandlingapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "11d1lb8aw28hmz653qj7bfzkfc088bv89y8lm822kgb6qiyd5k5a")))

(define-public crate-substrate-wasmtime-runtime-0.16.0-threadsafe.2 (c (n "substrate-wasmtime-runtime") (v "0.16.0-threadsafe.2") (d (list (d (n "backtrace") (r "^0.3.42") (d #t) (k 0)) (d (n "cc") (r "^1.0") (d #t) (k 1)) (d (n "cfg-if") (r "^0.1.9") (d #t) (k 0)) (d (n "indexmap") (r "^1.0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2.60") (k 0)) (d (n "memoffset") (r "^0.5.3") (d #t) (k 0)) (d (n "more-asserts") (r "^0.2.1") (d #t) (k 0)) (d (n "region") (r "^2.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.4") (d #t) (k 0)) (d (n "wasmtime-environ") (r "^0.16.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3.7") (f (quote ("winbase" "memoryapi" "errhandlingapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1fk0aj4mgnsv1jyqgql2rwqgjr90hyabyyj8xr6ns8fr0hghh21p")))

(define-public crate-substrate-wasmtime-runtime-0.16.0-threadsafe.3 (c (n "substrate-wasmtime-runtime") (v "0.16.0-threadsafe.3") (d (list (d (n "backtrace") (r "^0.3.42") (d #t) (k 0)) (d (n "cc") (r "^1.0") (d #t) (k 1)) (d (n "cfg-if") (r "^0.1.9") (d #t) (k 0)) (d (n "indexmap") (r "^1.0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2.60") (k 0)) (d (n "memoffset") (r "^0.5.3") (d #t) (k 0)) (d (n "more-asserts") (r "^0.2.1") (d #t) (k 0)) (d (n "region") (r "^2.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.4") (d #t) (k 0)) (d (n "wasmtime-environ") (r "^0.16.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3.7") (f (quote ("winbase" "memoryapi" "errhandlingapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0z0csbdpxcvz2yy7xy1f8gnm7h9mmqjr46chqk8idazgw5gqjnd5")))

(define-public crate-substrate-wasmtime-runtime-0.16.0-threadsafe.4 (c (n "substrate-wasmtime-runtime") (v "0.16.0-threadsafe.4") (d (list (d (n "backtrace") (r "^0.3.42") (d #t) (k 0)) (d (n "cc") (r "^1.0") (d #t) (k 1)) (d (n "cfg-if") (r "^0.1.9") (d #t) (k 0)) (d (n "indexmap") (r "^1.0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2.60") (k 0)) (d (n "memoffset") (r "^0.5.3") (d #t) (k 0)) (d (n "more-asserts") (r "^0.2.1") (d #t) (k 0)) (d (n "region") (r "^2.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.4") (d #t) (k 0)) (d (n "wasmtime-environ") (r "^0.16.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3.7") (f (quote ("winbase" "memoryapi" "errhandlingapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1hid7qld40pwfzqnx9im8jjxygp1diml79ss5ijrnzaalvq6lla6")))

