(define-module (crates-io li ve livesplit-hotkey) #:use-module (crates-io))

(define-public crate-livesplit-hotkey-0.1.0 (c (n "livesplit-hotkey") (v "0.1.0") (d (list (d (n "kernel32-sys") (r "^0.2.2") (d #t) (t "cfg(windows)") (k 0)) (d (n "user32-sys") (r "^0.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "winapi") (r "^0.2.8") (d #t) (t "cfg(windows)") (k 0)))) (h "0njrsrpch31ddh0n4yry9kyqcw9mcnrvw697mf945ykfhlbmn6hf")))

(define-public crate-livesplit-hotkey-0.2.0 (c (n "livesplit-hotkey") (v "0.2.0") (d (list (d (n "kernel32-sys") (r "^0.2.2") (d #t) (t "cfg(windows)") (k 0)) (d (n "mio") (r "^0.6.6") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "parking_lot") (r "^0.4.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "promising-future") (r "^0.2.4") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "user32-sys") (r "^0.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "winapi") (r "^0.2.8") (d #t) (t "cfg(windows)") (k 0)) (d (n "x11-dl") (r "^2.13.0") (d #t) (t "cfg(target_os = \"linux\")") (k 0)))) (h "0l5pa39wdpwidpymam5qvkr2sspds0ghmdidcs6g7zwajdw8gq97")))

(define-public crate-livesplit-hotkey-0.3.0 (c (n "livesplit-hotkey") (v "0.3.0") (d (list (d (n "mio") (r "^0.6.6") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "parking_lot") (r "^0.5.3") (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "parking_lot") (r "^0.5.3") (d #t) (t "cfg(windows)") (k 0)) (d (n "promising-future") (r "^0.2.4") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "quick-error") (r "^1.2.0") (d #t) (k 0)) (d (n "stdweb") (r "^0.3.0") (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "winapi") (r "^0.3.2") (f (quote ("libloaderapi" "processthreadsapi" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "x11-dl") (r "^2.13.0") (d #t) (t "cfg(target_os = \"linux\")") (k 0)))) (h "1792i3pf9lygbv5n66qmw9r2dggf3fhyb9cgc459hk91w7xq7xg1")))

(define-public crate-livesplit-hotkey-0.4.0 (c (n "livesplit-hotkey") (v "0.4.0") (d (list (d (n "mio") (r "^0.6.16") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "parking_lot") (r "^0.6.4") (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "parking_lot") (r "^0.6.4") (d #t) (t "cfg(windows)") (k 0)) (d (n "promising-future") (r "^0.2.4") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "quick-error") (r "^1.2.2") (d #t) (k 0)) (d (n "stdweb") (r "^0.3.0") (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "winapi") (r "^0.3.2") (f (quote ("libloaderapi" "processthreadsapi" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(target_os = \"linux\")") (k 0)))) (h "0fabiv1564af42i9w3hv1zk562rm3n4zvs742km31p2y48s2awqk")))

(define-public crate-livesplit-hotkey-0.5.0 (c (n "livesplit-hotkey") (v "0.5.0") (d (list (d (n "mio") (r "^0.6.16") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "parking_lot") (r "^0.8.0") (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "parking_lot") (r "^0.8.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "promising-future") (r "^0.2.4") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "quick-error") (r "^1.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.55") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.55") (d #t) (k 0)) (d (n "stdweb") (r "^0.3.0") (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "winapi") (r "^0.3.2") (f (quote ("libloaderapi" "processthreadsapi" "winuser"))) (d #t) (t "cfg(windows)") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(target_os = \"linux\")") (k 0)))) (h "09h44f8c92i0balldyp0vid1pzhyd22vb6zvvglfmymryyfri7v1")))

(define-public crate-livesplit-hotkey-0.6.0 (c (n "livesplit-hotkey") (v "0.6.0") (d (list (d (n "bitflags") (r "^1.2.1") (o #t) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "evdev") (r "^0.11.1") (o #t) (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "mio") (r "^0.7.7") (f (quote ("os-ext" "os-poll"))) (o #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "parking_lot") (r "^0.11.0") (o #t) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.11.0") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "promising-future") (r "^0.2.4") (o #t) (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "serde") (r "^1.0.98") (f (quote ("derive" "alloc"))) (k 0)) (d (n "snafu") (r "^0.6.0") (k 0)) (d (n "wasm-bindgen") (r "^0.2.54") (o #t) (d #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 0)) (d (n "web-sys") (r "^0.3.28") (f (quote ("Gamepad" "GamepadButton" "EventTarget" "KeyboardEvent" "Navigator" "Window"))) (o #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 0)) (d (n "winapi") (r "^0.3.2") (f (quote ("libloaderapi" "processthreadsapi" "winuser"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "0lk0jr6mhmkhy1kagjrh34mv2jkbzs580ybbmch3rj2byxk7szid") (f (quote (("wasm-web" "wasm-bindgen" "web-sys" "parking_lot/wasm-bindgen") ("std" "snafu/std" "serde/std" "parking_lot" "evdev" "mio" "promising-future" "winapi" "bitflags") ("default" "std"))))))

(define-public crate-livesplit-hotkey-0.7.0 (c (n "livesplit-hotkey") (v "0.7.0") (d (list (d (n "bitflags") (r "^1.2.1") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "evdev") (r "^0.12.1") (o #t) (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "js-sys") (r "^0.3.28") (o #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 0)) (d (n "mio") (r "^0.8.0") (f (quote ("os-ext" "os-poll"))) (o #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "nix") (r "^0.26.1") (f (quote ("user"))) (o #t) (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "promising-future") (r "^0.2.4") (o #t) (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "serde") (r "^1.0.98") (f (quote ("derive" "alloc"))) (k 0)) (d (n "snafu") (r "^0.7.0") (k 0)) (d (n "wasm-bindgen") (r "^0.2.54") (o #t) (d #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 0)) (d (n "web-sys") (r "^0.3.28") (f (quote ("Gamepad" "GamepadButton" "EventTarget" "KeyboardEvent" "Navigator" "Window"))) (o #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 0)) (d (n "winapi") (r "^0.3.2") (f (quote ("libloaderapi" "processthreadsapi" "winuser"))) (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "x11-dl") (r "^2.20.0") (o #t) (d #t) (t "cfg(target_os = \"linux\")") (k 0)))) (h "0ircd6yxpgbp8qywq149pc566ikwabvf3ijq8k62pkfqbifz3dw1") (f (quote (("wasm-web" "wasm-bindgen" "web-sys" "js-sys") ("std" "snafu/std" "serde/std" "evdev" "mio" "nix" "promising-future" "winapi" "x11-dl") ("default" "std"))))))

