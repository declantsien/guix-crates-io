(define-module (crates-io li bd libdeadmock) #:use-module (crates-io))

(define-public crate-libdeadmock-0.1.0 (c (n "libdeadmock") (v "0.1.0") (d (list (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "dirs") (r "^1") (d #t) (k 0)) (d (n "failure") (r "^0") (d #t) (k 0)) (d (n "getset") (r "^0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "tomlenv") (r "^0") (d #t) (k 0)))) (h "15wq3h195vk4ybijib4hnprsh092q04grwmr8hlp1cw430yi11kv")))

(define-public crate-libdeadmock-0.1.1 (c (n "libdeadmock") (v "0.1.1") (d (list (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "dirs") (r "^1") (d #t) (k 0)) (d (n "failure") (r "^0") (d #t) (k 0)) (d (n "getset") (r "^0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "tomlenv") (r "^0") (d #t) (k 0)))) (h "10xr5zls342k5k2rzc6fn90m2yqw6jwmq9wbvkhi8y4r5815jac7")))

(define-public crate-libdeadmock-0.1.2 (c (n "libdeadmock") (v "0.1.2") (d (list (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "dirs") (r "^1") (d #t) (k 0)) (d (n "failure") (r "^0") (d #t) (k 0)) (d (n "getset") (r "^0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "tomlenv") (r "^0") (d #t) (k 0)))) (h "1c8igfswndm6ljd9vi6k6fivdq7r8636qpvdrpibx8lyd20q3p0v")))

(define-public crate-libdeadmock-0.1.3 (c (n "libdeadmock") (v "0.1.3") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0") (d #t) (k 0)) (d (n "cached") (r "^0") (d #t) (k 0)) (d (n "chrono") (r "^0") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "colored") (r "^1") (d #t) (k 0)) (d (n "failure") (r "^0") (d #t) (k 0)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "getset") (r "^0") (d #t) (k 0)) (d (n "http") (r "^0") (d #t) (k 0)) (d (n "httparse") (r "^1") (d #t) (k 0)) (d (n "hyper") (r "^0") (d #t) (k 0)) (d (n "hyper-proxy") (r "^0") (d #t) (k 0)) (d (n "hyper-tls") (r "^0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libeither") (r "^0") (f (quote ("serde" "unstable"))) (d #t) (k 0)) (d (n "rand") (r "^0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slog") (r "^2") (f (quote ("max_level_trace" "release_max_level_trace"))) (d #t) (k 0)) (d (n "slog-async") (r "^2") (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 0)) (d (n "slog-try") (r "^0") (d #t) (k 0)) (d (n "tokio") (r "^0") (f (quote ("async-await-preview"))) (d #t) (k 0)) (d (n "tokio-codec") (r "^0") (d #t) (k 0)) (d (n "tokio-io") (r "^0") (d #t) (k 0)) (d (n "toml") (r "^0") (d #t) (k 0)) (d (n "tomlenv") (r "^0") (d #t) (k 0)) (d (n "typed-headers") (r "^0") (d #t) (k 0)) (d (n "uuid") (r "^0") (f (quote ("serde" "u128" "v4"))) (d #t) (k 0)) (d (n "vergen") (r "^3") (d #t) (k 1)))) (h "0p7bav9423bi3ngjnhdyvm08xbf4rn3j9sr8zy4rgna3njl7mx8w") (f (quote (("url") ("pattern_match" "url") ("method") ("headers") ("header") ("exact_match" "url" "method" "header" "headers") ("default" "exact_match" "pattern_match"))))))

(define-public crate-libdeadmock-0.1.4 (c (n "libdeadmock") (v "0.1.4") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0") (d #t) (k 0)) (d (n "cached") (r "^0") (d #t) (k 0)) (d (n "chrono") (r "^0") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "failure") (r "^0") (d #t) (k 0)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "getset") (r "^0") (d #t) (k 0)) (d (n "http") (r "^0") (d #t) (k 0)) (d (n "httparse") (r "^1") (d #t) (k 0)) (d (n "hyper") (r "^0") (d #t) (k 0)) (d (n "hyper-proxy") (r "^0") (d #t) (k 0)) (d (n "hyper-tls") (r "^0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libeither") (r "^0") (f (quote ("serde" "unstable"))) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slog") (r "^2") (f (quote ("max_level_trace" "release_max_level_trace"))) (d #t) (k 0)) (d (n "slog-async") (r "^2") (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 0)) (d (n "slog-try") (r "^0") (d #t) (k 0)) (d (n "tokio") (r "^0") (f (quote ("async-await-preview"))) (d #t) (k 0)) (d (n "tokio-codec") (r "^0") (d #t) (k 0)) (d (n "tokio-io") (r "^0") (d #t) (k 0)) (d (n "toml") (r "^0") (d #t) (k 0)) (d (n "tomlenv") (r "^0") (d #t) (k 0)) (d (n "typed-headers") (r "^0") (d #t) (k 0)) (d (n "uuid") (r "^0") (f (quote ("serde" "u128" "v4"))) (d #t) (k 0)))) (h "1fqy2vz20s6mzji3lr0yl83nw0zq7ag43rrspk7klw8z07h4kxyn") (f (quote (("url") ("pattern_match" "url") ("method") ("headers") ("header") ("exact_match" "url" "method" "header" "headers") ("default" "exact_match" "pattern_match"))))))

(define-public crate-libdeadmock-0.1.5 (c (n "libdeadmock") (v "0.1.5") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0") (d #t) (k 0)) (d (n "cached") (r "^0") (d #t) (k 0)) (d (n "chrono") (r "^0") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "failure") (r "^0") (d #t) (k 0)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "getset") (r "^0") (d #t) (k 0)) (d (n "http") (r "^0") (d #t) (k 0)) (d (n "httparse") (r "^1") (d #t) (k 0)) (d (n "hyper") (r "^0") (d #t) (k 0)) (d (n "hyper-proxy") (r "^0") (d #t) (k 0)) (d (n "hyper-tls") (r "^0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libeither") (r "^0") (f (quote ("serde" "unstable"))) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slog") (r "^2") (f (quote ("max_level_trace" "release_max_level_trace"))) (d #t) (k 0)) (d (n "slog-async") (r "^2") (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 0)) (d (n "slog-try") (r "^0") (d #t) (k 0)) (d (n "tokio") (r "^0") (f (quote ("async-await-preview"))) (d #t) (k 0)) (d (n "tokio-codec") (r "^0") (d #t) (k 0)) (d (n "tokio-io") (r "^0") (d #t) (k 0)) (d (n "toml") (r "^0") (d #t) (k 0)) (d (n "tomlenv") (r "^0") (d #t) (k 0)) (d (n "typed-headers") (r "^0") (d #t) (k 0)) (d (n "uuid") (r "^0") (f (quote ("serde" "u128" "v4"))) (d #t) (k 0)))) (h "0xdh4vp4dmiy51ykqc2b5vmzrhqfhlflfhadhlkkrbv9np6dcc8l") (f (quote (("url") ("pattern_match" "url") ("method") ("headers") ("header") ("exact_match" "url" "method" "header" "headers") ("default" "exact_match" "pattern_match"))))))

(define-public crate-libdeadmock-0.1.6 (c (n "libdeadmock") (v "0.1.6") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0") (d #t) (k 0)) (d (n "cached") (r "^0") (d #t) (k 0)) (d (n "chrono") (r "^0") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "failure") (r "^0") (d #t) (k 0)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "getset") (r "^0") (d #t) (k 0)) (d (n "http") (r "^0") (d #t) (k 0)) (d (n "httparse") (r "^1") (d #t) (k 0)) (d (n "hyper") (r "^0") (d #t) (k 0)) (d (n "hyper-proxy") (r "^0") (d #t) (k 0)) (d (n "hyper-tls") (r "^0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libeither") (r "^0") (f (quote ("serde" "unstable"))) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slog") (r "^2") (f (quote ("max_level_trace" "release_max_level_trace"))) (d #t) (k 0)) (d (n "slog-async") (r "^2") (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 0)) (d (n "slog-try") (r "^0") (d #t) (k 0)) (d (n "tokio") (r "^0") (f (quote ("async-await-preview"))) (d #t) (k 0)) (d (n "tokio-codec") (r "^0") (d #t) (k 0)) (d (n "tokio-io") (r "^0") (d #t) (k 0)) (d (n "toml") (r "^0") (d #t) (k 0)) (d (n "tomlenv") (r "^0") (d #t) (k 0)) (d (n "typed-headers") (r "^0") (d #t) (k 0)) (d (n "uuid") (r "^0") (f (quote ("serde" "u128" "v4"))) (d #t) (k 0)))) (h "1w464lynrk1fczsj0qqwgvx76kdb0g0i9wracczfs15craxkpg2h") (f (quote (("url") ("pattern_match" "url") ("method") ("headers") ("header") ("exact_match" "url" "method" "header" "headers") ("default" "exact_match" "pattern_match"))))))

