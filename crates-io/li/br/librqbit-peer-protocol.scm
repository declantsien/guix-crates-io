(define-module (crates-io li br librqbit-peer-protocol) #:use-module (crates-io))

(define-public crate-librqbit-peer-protocol-2.2.1 (c (n "librqbit-peer-protocol") (v "2.2.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^2.2.1") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^2.2.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "0n9nfqyd0z679vsrplsnmxqdanixgs8zx6bfffsnmiiv2grbgn7i") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-peer-protocol-2.2.2 (c (n "librqbit-peer-protocol") (v "2.2.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^2.2.1") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^2.2.2") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "0qbhfldjdfbs9l0kxrr3mzbscxjhlrh7pwl6nm6llfc1kvi44abb") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-peer-protocol-3.0.0 (c (n "librqbit-peer-protocol") (v "3.0.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^2.2.1") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^3.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "1pkrr81aa9hvpm0y66xri8rlnm9ajpizdk59867jf3jl3c0m62a0") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-peer-protocol-3.1.0 (c (n "librqbit-peer-protocol") (v "3.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^2.2.1") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^3.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "0y2f1w4b99ll6cdfg12qxw41kxg5q7b15slxvah11rmcvvrx24s3") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-peer-protocol-3.2.1 (c (n "librqbit-peer-protocol") (v "3.2.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^2.2.1") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^3.2.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "024kryikrmmblhgjmpbjssbd8p9zhd3xi35lqh3hcb0clx7hcq17") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-peer-protocol-3.3.0 (c (n "librqbit-peer-protocol") (v "3.3.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^2.2.1") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^3.3.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "08pmfp5zxvr3d4xk0w9740z8v11mqbkgv6wvhv41grp9nv9clvah") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-peer-protocol-3.4.0 (c (n "librqbit-peer-protocol") (v "3.4.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^2.2.1") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^3.4.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "1hqgg1mcf4rk0hsl2vj07d95clygliwzws40f6zb0898mg4xgdx1") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-peer-protocol-3.5.0 (c (n "librqbit-peer-protocol") (v "3.5.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^2.2.1") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^3.6.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "1mfqa50x7j53y7vimh95r5119rg9h8pn0ajlfyn2bclzijh76380") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-peer-protocol-3.5.1 (c (n "librqbit-peer-protocol") (v "3.5.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.2") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^3.0.0") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^3.6.2") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "0njfasaqrgpvbzblm9pvgzqm3p41j1i5dgcdwln4icybwhqmiqc1")))

(define-public crate-librqbit-peer-protocol-3.5.2 (c (n "librqbit-peer-protocol") (v "3.5.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.2") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^3.0.0") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^3.7.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "08r30hvpvbipm6grx17z98cgsl3cmrwvi4isqhyr4smi9r1czzkc")))

(define-public crate-librqbit-peer-protocol-3.5.3 (c (n "librqbit-peer-protocol") (v "3.5.3") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.2") (k 0) (p "librqbit-bencode")) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "buffers") (r "^3.0.0") (d #t) (k 0) (p "librqbit-buffers")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "librqbit-core") (r "^3.7.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)))) (h "0mbxhd00n7n6v2104037smx57z9i6dgrvr82c4amkskssnzbyhyn")))

