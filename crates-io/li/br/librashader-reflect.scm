(define-module (crates-io li br librashader-reflect) #:use-module (crates-io))

(define-public crate-librashader-reflect-0.1.0-alpha.1 (c (n "librashader-reflect") (v "0.1.0-alpha.1") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-alpha.1") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-alpha.1") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.0") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1ngw7brhgwfbnk4zfp40dv4qlaiq5s2a9j4v5y43ygzhxyw5bdvh") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-alpha.2 (c (n "librashader-reflect") (v "0.1.0-alpha.2") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-alpha.2") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-alpha.2") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.0") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "080wpxc3wm8rsrsyfwq87iw3p1qi80zsjfkbp4v76jayqvqqjf9w") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-alpha.3 (c (n "librashader-reflect") (v "0.1.0-alpha.3") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-alpha.3") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-alpha.3") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.0") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "16j6b5lf2c9q1bycnkmy13hbwswwxj2gnycw1cj4k2vaqk45n0fw") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-alpha.4 (c (n "librashader-reflect") (v "0.1.0-alpha.4") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.0") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "10fhvcgk3w5knsx5g0c7pccc56wjrv49w482jjqcd4n866a5hp20") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-alpha.5 (c (n "librashader-reflect") (v "0.1.0-alpha.5") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-alpha.5") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-alpha.5") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.1") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1zamrgwd5az9pxkk5anxycvpsdq8nnq18dd0s41wjaf0fhya73m8") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-alpha.6 (c (n "librashader-reflect") (v "0.1.0-alpha.6") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-alpha.6") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-alpha.6") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.1") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1vi4y2j7qmxwhbimy7z996anrabml0812xrn6d7gldmy8c6gxdz1") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.1 (c (n "librashader-reflect") (v "0.1.0-beta.1") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.1") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.1") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.1") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1bynhmpww9n06y9ly243qf9y51v1fdqn25wrqpnaf147n9djpavh") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.2 (c (n "librashader-reflect") (v "0.1.0-beta.2") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.2") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.2") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.1") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "16phzdbhxxi70mhqg9n6jbyd95xr6zy8i65ffkq0bjdj1xbmh672") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.3 (c (n "librashader-reflect") (v "0.1.0-beta.3") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.3") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.3") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.1") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0p15kzk5fcs92mqdcgsk65mvqlg9sjk4skya84brcgbjcg1hr7mi") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.4 (c (n "librashader-reflect") (v "0.1.0-beta.4") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.4") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.4") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.1") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "125fqmxgc2l1v7ibqr6qlmdwpx8gkiwqwz8s60zx40qwpczdmynk") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.5 (c (n "librashader-reflect") (v "0.1.0-beta.5") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.5") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.5") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.1") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0kfypcx2i164kchh7322kp4kwqfqakm7l3n37xjh6c07hlzh5b3h") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.6 (c (n "librashader-reflect") (v "0.1.0-beta.6") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.6") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.6") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rspirv-reflect") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.1") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "14rn5kjd50zsfg4pixl9k62x94lz6jysagkn436fqy74fr6ll953") (f (quote (("unstable-rust-pipeline" "naga" "rspirv" "rspirv-reflect") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.7 (c (n "librashader-reflect") (v "0.1.0-beta.7") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.7") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.7") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.1") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23.1") (f (quote ("glsl" "hlsl"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0zz5slssx0yz5k2hg1pv1yvib146xc2w58nikb8lfj3anb8wbd0b") (f (quote (("unstable-naga" "naga") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.8 (c (n "librashader-reflect") (v "0.1.0-beta.8") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.8") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.8") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-beta.8") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (f (quote ("glsl" "hlsl"))) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "01nam86c4ivd7j35d0m76pfadm4djyblvb39i3py2ylf0rc9cy2j") (f (quote (("unstable-naga" "naga") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.9 (c (n "librashader-reflect") (v "0.1.0-beta.9") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.9") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.9") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-beta.9") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (f (quote ("glsl" "hlsl"))) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1hjrbhrxzgg7qpqfqirir1krgf8n71c75r1mk3fzdw4vklv1c1fn") (f (quote (("unstable-naga" "naga") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.10 (c (n "librashader-reflect") (v "0.1.0-beta.10") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.10") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.10") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-beta.10") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (f (quote ("glsl" "hlsl"))) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1yd4a31lnnyzbv3yy6560hdfhvwc40n6wg5ksc3ksj88hxxx08ff") (f (quote (("unstable-naga" "naga") ("standalone" "shaderc/build-from-source") ("default"))))))

(define-public crate-librashader-reflect-0.1.0-beta.11 (c (n "librashader-reflect") (v "0.1.0-beta.11") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.11") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.11") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-beta.11") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (f (quote ("glsl" "hlsl"))) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "12ghwf4i4zaijf46imjdysfmrcjw03zdddz61h11x4vd3a9nf2wc") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("dxil" "spirv-to-dxil") ("default" "dxil"))))))

(define-public crate-librashader-reflect-0.1.0-beta.12 (c (n "librashader-reflect") (v "0.1.0-beta.12") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.12") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.12") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-beta.12") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (f (quote ("glsl" "hlsl"))) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0240h0g7wxax1w4rxx2vkqy6h34cg7lxb8a9zvvc90c03h1zcvsl") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("dxil" "spirv-to-dxil") ("default" "dxil"))))))

(define-public crate-librashader-reflect-0.1.0-beta.13 (c (n "librashader-reflect") (v "0.1.0-beta.13") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.13") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.13") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-beta.13") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (f (quote ("glsl" "hlsl"))) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "16v1xz8ckswpxvz8v1kljvi6s885vcj1p2vxymakbffcbv3dicfp") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("dxil" "spirv-to-dxil") ("default" "dxil"))))))

(define-public crate-librashader-reflect-0.1.0-beta.14 (c (n "librashader-reflect") (v "0.1.0-beta.14") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.14") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.14") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-beta.14") (d #t) (k 0)) (d (n "naga") (r "^0.10.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (f (quote ("glsl" "hlsl"))) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0kim9yvka8lsa6kcpxcrlrwfikclm7p7bw230n8snhqllhyzql4y") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("dxil" "spirv-to-dxil") ("default" "dxil"))))))

(define-public crate-librashader-reflect-0.1.0-beta.15 (c (n "librashader-reflect") (v "0.1.0-beta.15") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.15") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.15") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-beta.15") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0sf55zgcqp14kp3755hmw32hs6y0w2wvrhcjsczhzhmw7apgmsji") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("dxil" "spirv-to-dxil") ("default" "cross" "dxil") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.0-beta.16 (c (n "librashader-reflect") (v "0.1.0-beta.16") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.16") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.16") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-beta.16") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0iz9zkcg0ylaa20x8y6k53shjw23sqn4acc1hbs938nkk8ygkja6") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("dxil" "spirv-to-dxil") ("default" "cross" "dxil") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.0-beta.21 (c (n "librashader-reflect") (v "0.1.0-beta.21") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-beta.21") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-beta.21") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-beta.21") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "11gvr7y73pwby96mms4jd197jj15v6spl8dqni89viwbqmkmp130") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("dxil" "cross" "spirv-to-dxil") ("default" "cross") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.0-rc.1 (c (n "librashader-reflect") (v "0.1.0-rc.1") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-rc.1") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-rc.1") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-rc.1") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0a3cx7psm9frqgv6javm4n06bdzvygjqs7hqindmbbpmfrix75wk") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("dxil" "cross" "spirv-to-dxil") ("default" "cross") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.0-rc.2 (c (n "librashader-reflect") (v "0.1.0-rc.2") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-rc.2") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-rc.2") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-rc.2") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0fx1xd5np1bn23cqqmf4msdf523sr5sfwm8ignji5l024rmcd13s") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("dxil" "cross" "spirv-to-dxil") ("default" "cross") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.0-rc.3 (c (n "librashader-reflect") (v "0.1.0-rc.3") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "03s0dn5645rz8lfjy4vf7pp6ilphg0p9b3wlqj7wa5jlv0wwz84n") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("dxil" "cross" "spirv-to-dxil") ("default" "cross") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.0-rc.4 (c (n "librashader-reflect") (v "0.1.0-rc.4") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-rc.4") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-rc.4") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-rc.4") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1rk1k7q5h8ghfgrrhzik5j3q7vssbxgmgk3iqg2rcnjl1nx5sgjb") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.0-rc.5 (c (n "librashader-reflect") (v "0.1.0-rc.5") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-rc.5") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-rc.5") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-rc.5") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "05avw6n9p7069z6j1jyzd4q8aljvby5c8h40crkksn9lddlyqf4k") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.0-rc.6 (c (n "librashader-reflect") (v "0.1.0-rc.6") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-rc.6") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-rc.6") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-rc.6") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1zlzgc7gm06i6nnim5968vzjaga23kxj20qkhiqmnlkpa31wjidj") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.0-rc.7 (c (n "librashader-reflect") (v "0.1.0-rc.7") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0-rc.7") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0-rc.7") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0-rc.7") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0pq6661f5g9f6pdz44vf5lrl14ciq9r0plibjvqb3ipd0jj4pp8m") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.0 (c (n "librashader-reflect") (v "0.1.0") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.0") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.0") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.0") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "12z4pdknfmi9c4zd9db5mh26p30hbg5r0325gkyd5lvm49jyv1db") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.1 (c (n "librashader-reflect") (v "0.1.1") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.1") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.1") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.1") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1zmnbxj7195zg4vix0c9abzz06jk9j2z4znfirb80m5am1xmm17c") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.2 (c (n "librashader-reflect") (v "0.1.2") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.2") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.2") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.2") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1564ar7yy0080rg5hzwnhdznfy5s6qs73g51azncby9r5m1z8x8g") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.3 (c (n "librashader-reflect") (v "0.1.3") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.3") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.3") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.3") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1jf9xr5c243j6fbgbdmbvw4zfvrk32axmj4c30s9iidhkwqrx94f") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.1.4 (c (n "librashader-reflect") (v "0.1.4") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.1.4") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.1.4") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.1.4") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.2") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1ripa026b4pl9yqdbig5ldsrkasi0hpxwkz6g5pxjlwb8xj8ribr") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.2 (c (n "librashader-reflect") (v "0.2.0-beta.2") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.2") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.2") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.2") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.3") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0cnqajzks4mr3l43p9sqn6sh5m36lcv5m0dkp0rmahk44xlj67lk") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/build-from-source" "shaderc/prefer-static-linking") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.3 (c (n "librashader-reflect") (v "0.2.0-beta.3") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.3") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.3") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.3") (d #t) (k 0)) (d (n "naga") (r "^0.11.0") (f (quote ("glsl-in" "spv-in" "spv-out" "glsl-out" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.3") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0r2xvf0w9ac2kmrjvzqklvdb6njr79gfnxidv5i9yjacy24722as") (f (quote (("unstable-naga" "naga" "rspirv") ("standalone" "shaderc/prefer-static-linking") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.4 (c (n "librashader-reflect") (v "0.2.0-beta.4") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.4") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.4") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.4") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("spv-in" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.3") (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1dnbqk4bmwadmrmqq8ry3bwhh5lywhzspy00m4pihkqabf4hgd38") (f (quote (("wgsl" "cross" "naga" "spirv" "rspirv") ("standalone" "shaderc/build-from-source" "shaderc/prefer-static-linking") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "wgsl" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.5 (c (n "librashader-reflect") (v "0.2.0-beta.5") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.5") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.5") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.5") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("spv-in" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.3") (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1smrv3gykmjf0wcjnn7dj1q892j59s1dmkj9ja64cn7n4xvxg5cn") (f (quote (("wgsl" "cross" "naga" "spirv" "rspirv") ("standalone" "shaderc/build-from-source" "shaderc/prefer-static-linking") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "wgsl" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.6 (c (n "librashader-reflect") (v "0.2.0-beta.6") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.6") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.6") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.6") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("spv-in" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "shaderc") (r "^0.8.3") (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0ypgnf6wjmf8lbzcd5056h0d7pqnvwc689iv0z1qawcwqlly74ga") (f (quote (("wgsl" "cross" "naga" "spirv" "rspirv") ("standalone" "shaderc/build-from-source" "shaderc/prefer-static-linking") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "wgsl" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.7 (c (n "librashader-reflect") (v "0.2.0-beta.7") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.7") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.7") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.7") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("spv-in" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1477hva7qlvf8bilpbsfclx64ynrlsai8dfzh0vcgbfppv2zg4rf") (f (quote (("wgsl" "cross" "naga" "spirv" "rspirv") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "wgsl" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.8 (c (n "librashader-reflect") (v "0.2.0-beta.8") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.8") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.8") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.8") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("spv-in" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1i0f91k6248rj3r6sh95804lqryd36afjvyjwqfgd01w90p0p0db") (f (quote (("wgsl" "cross" "naga" "spirv" "rspirv") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "wgsl" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.9 (c (n "librashader-reflect") (v "0.2.0-beta.9") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.9") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.9") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.9") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("spv-in" "wgsl-out"))) (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.23") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "076wnni2c1nwxrnmkdqia9y306zm74mcx8dbab4q1h8264hdvv0h") (f (quote (("wgsl" "cross" "naga" "spirv" "rspirv") ("serialize" "serde") ("dxil" "cross" "spirv-to-dxil") ("default" "cross" "wgsl" "serialize") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.10 (c (n "librashader-reflect") (v "0.2.0-beta.10") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.10") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.10") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.10") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1p1k6d0qzcczl066fy4xl39s0y664j1vw1r3m9x472fzjw4km1zm") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.11 (c (n "librashader-reflect") (v "0.2.0-beta.11") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.11") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.11") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.11") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1cx1rczix9aabxk97k44q0lmzsh8b72r8hkfixb2mf8i48awmhq6") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.14 (c (n "librashader-reflect") (v "0.2.0-beta.14") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.14") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.14") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.14") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (f (quote ("msl" "glsl" "hlsl"))) (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1qkaqajz5c7zbv13mx66lvr1jjw42wg65fcsqw1wbqxw036ki6g5") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.16 (c (n "librashader-reflect") (v "0.2.0-beta.16") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.16") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.16") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.16") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1dn2fifpqd6rzkx5qqqqlqqsw38938bfm44m903agzkn7ahs3i87") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.17 (c (n "librashader-reflect") (v "0.2.0-beta.17") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.17") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.17") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.17") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1mharmz86739aakywdk384ccygrzzah3klnyd1yxh2nn9zskqhn4") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.0-beta.18 (c (n "librashader-reflect") (v "0.2.0-beta.18") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-beta.18") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-beta.18") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-beta.18") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0j9iqd12dllds7gkxpjy9ns0w74c10zyvsb4hg1v1aygw248ws5b") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.0-rc.1 (c (n "librashader-reflect") (v "0.2.0-rc.1") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-rc.1") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-rc.1") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-rc.1") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1q47lvakf24c5q3m1kjqp0h2fz7gb8znan8inlhvrmjmcjpi9r8v") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.0-rc.2 (c (n "librashader-reflect") (v "0.2.0-rc.2") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-rc.2") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-rc.2") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-rc.2") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1byzrhm3n5n4wfi1hjgabw1yqpsdcm3rg1r9aw239bjski9ca5qp") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.0-rc.3 (c (n "librashader-reflect") (v "0.2.0-rc.3") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0-rc.3") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0-rc.3") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0-rc.3") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-linker") (r "^0.1.0") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0dq2idnk4hsaf0r9fqg9jvkfbq4j1bpqkj38s3s78l1pmxxrcbfl") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.0 (c (n "librashader-reflect") (v "0.2.0") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.0") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.0") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.0") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-linker") (r "^0.1.0") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "18lz0hk8pj4aqjnpbkh35hscwj1c3gwhzr4pwi1w37zkkxpshzxb") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.1 (c (n "librashader-reflect") (v "0.2.1") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.1") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.1") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.1") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-linker") (r "^0.1.0") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "15x3yqinvzj1mygxhrqwqrpqnz7s7z4gp32bp3c683ciql758nqy") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.2 (c (n "librashader-reflect") (v "0.2.2") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.2") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.2") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.2") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-linker") (r "^0.1.0") (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4.7") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "1wy0dnlhrm4rsfy0naj3rlgdwgqdfwvimipnkfd07gw33hqbib4s") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.3 (c (n "librashader-reflect") (v "0.2.3") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.3") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.3") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.3") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4.7") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "01gkmpq92wcmhx4w02v715ghj3cmb5smdg3nnq1m5lqc4wllnq3d") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.4 (c (n "librashader-reflect") (v "0.2.4") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.4") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.4") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.4") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4.7") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0v2f0m5r2div5fh367lcnrfmbcjs25v3lfcwddhlkb8na255s1yx") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.5 (c (n "librashader-reflect") (v "0.2.5") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.5") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.5") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.5") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4.7") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0vm991awhdlcyvxn0rnyl9mjfcs572by19m01m5gc1w53nh10a92") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.6 (c (n "librashader-reflect") (v "0.2.6") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.6") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.6") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.6") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4.7") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0p2wgys5kcgsvwscydxn38cafxdwkbhbbzd9y0dkm47cpr47w9wd") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

(define-public crate-librashader-reflect-0.2.7 (c (n "librashader-reflect") (v "0.2.7") (d (list (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (d #t) (k 0)) (d (n "glslang") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "librashader-common") (r "^0.2.7") (d #t) (k 0)) (d (n "librashader-preprocess") (r "^0.2.7") (d #t) (k 0)) (d (n "librashader-presets") (r "^0.2.7") (d #t) (k 0)) (d (n "matches") (r "^0.1.10") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "spirv-to-dxil") (r "^0.4.7") (o #t) (d #t) (t "cfg(windows)") (k 0)) (d (n "spirv_cross") (r "^0.25.1") (o #t) (d #t) (k 0) (p "librashader-spirv-cross")) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)))) (h "0lw4w68r09d9g90kdi38fwmhvfjgm5wwf8xp34lrzs7qkc1r5f58") (f (quote (("wgsl" "cross" "naga/wgsl-out" "spirv" "rspirv") ("serialize" "serde") ("naga" "rspirv" "spirv" "naga/spv-in" "naga/spv-out" "naga/wgsl-out" "naga/msl-out") ("msl" "spirv_cross/msl" "naga/msl-out") ("dxil" "spirv_cross/hlsl" "spirv-to-dxil") ("default" "cross" "naga" "serialize" "wgsl" "msl") ("cross" "spirv_cross" "spirv_cross/glsl" "spirv_cross/hlsl" "spirv_cross/msl"))))))

