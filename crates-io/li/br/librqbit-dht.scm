(define-module (crates-io li br librqbit-dht) #:use-module (crates-io))

(define-public crate-librqbit-dht-2.2.1 (c (n "librqbit-dht") (v "2.2.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "directories") (r "^4") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "librqbit-core") (r "^2.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)))) (h "0wqrlifi1lfgn8j8bv02sz7m6901kzmdwj7sibllb09l61ll9cxk") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-dht-2.2.2 (c (n "librqbit-dht") (v "2.2.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "directories") (r "^5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "librqbit-core") (r "^2.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)))) (h "19aqzqzwl5r98l0g9x1j11j58f208hqs148dpgf338y08qcfc2f6") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-dht-3.0.0 (c (n "librqbit-dht") (v "3.0.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "directories") (r "^5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "librqbit-core") (r "^3.0.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)))) (h "0a8sb00xbli5c5h27y4h22zykzh97lp9mwlsdpv86cfl5mg0fdng") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-dht-4.0.0-beta.1 (c (n "librqbit-dht") (v "4.0.0-beta.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "chrono") (r "^0.4.31") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "dashmap") (r "^5.5.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "directories") (r "^5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1") (d #t) (k 0)) (d (n "librqbit-core") (r "^3.1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)))) (h "06a4ww0r9mph951v0p689sibv3v3yhv729f1n2ps023838fa4d4w") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-dht-4.0.0-beta.2 (c (n "librqbit-dht") (v "4.0.0-beta.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "chrono") (r "^0.4.31") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "dashmap") (r "^5.5.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "directories") (r "^5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1") (d #t) (k 0)) (d (n "librqbit-core") (r "^3.1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)))) (h "1cay50wv54wznjxvdrcdb63g3bg2isnq70y9x223ksndv89yb8sq") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-dht-4.0.0 (c (n "librqbit-dht") (v "4.0.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "chrono") (r "^0.4.31") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "dashmap") (r "^5.5.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1") (d #t) (k 0)) (d (n "librqbit-core") (r "^3.2.1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)))) (h "0f7cdi37i40643mklgvazmysn6p8vin2qhxif0l91cz4vign8wym") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-dht-4.1.0 (c (n "librqbit-dht") (v "4.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "chrono") (r "^0.4.31") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "dashmap") (r "^5.5.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1") (d #t) (k 0)) (d (n "librqbit-core") (r "^3.3.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)))) (h "0pnk4wiyhlascq7y0mqiyv0z2qq87kc9jd6r4phl28rvsjf2dkba") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-dht-5.0.0 (c (n "librqbit-dht") (v "5.0.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "chrono") (r "^0.4.31") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "dashmap") (r "^5.5.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1") (d #t) (k 0)) (d (n "librqbit-core") (r "^3.4.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.10") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)))) (h "07yxsncjfrsimvf1kk1vpg644ln7n9klmix4f7gsjzlmfcv4wm75") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-dht-5.0.1 (c (n "librqbit-dht") (v "5.0.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (d #t) (k 0)) (d (n "bencode") (r "^2.2.1") (k 0) (p "librqbit-bencode")) (d (n "chrono") (r "^0.4.31") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "dashmap") (r "^5.5.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1") (d #t) (k 0)) (d (n "librqbit-core") (r "^3.6.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.10") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)))) (h "0iv2fi5plb0l0hnaxxj09wz0fq8pdypl7mh8lx847k6ccak9q3wl") (f (quote (("sha1-system" "bencode/sha1-system" "librqbit-core/sha1-system") ("sha1-rust" "bencode/sha1-rust" "librqbit-core/sha1-rust") ("sha1-openssl" "bencode/sha1-openssl" "librqbit-core/sha1-openssl") ("default" "sha1-system"))))))

(define-public crate-librqbit-dht-5.0.2 (c (n "librqbit-dht") (v "5.0.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (d #t) (k 0)) (d (n "bencode") (r "^2.2.2") (k 0) (p "librqbit-bencode")) (d (n "chrono") (r "^0.4.31") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "dashmap") (r "^5.5.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1") (d #t) (k 0)) (d (n "librqbit-core") (r "^3.6.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.10") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)))) (h "1r97q89m5c248ngrkjmv8jamyl70rxlrcad7krklcyfi5nib0vc0")))

(define-public crate-librqbit-dht-5.0.3 (c (n "librqbit-dht") (v "5.0.3") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "backoff") (r "^0.4.0") (d #t) (k 0)) (d (n "bencode") (r "^2.2.2") (k 0) (p "librqbit-bencode")) (d (n "chrono") (r "^0.4.31") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clone_to_owned") (r "^2.2.1") (d #t) (k 0) (p "librqbit-clone-to-owned")) (d (n "dashmap") (r "^5.5.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1") (d #t) (k 0)) (d (n "librqbit-core") (r "^3.7.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "sync"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.10") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)))) (h "0nh5fdsnmfl2k68w9hq7z40kf8xqxcj5fg20pfclvzha36d9bl8f")))

