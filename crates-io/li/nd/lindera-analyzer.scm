(define-module (crates-io li nd lindera-analyzer) #:use-module (crates-io))

(define-public crate-lindera-analyzer-0.24.0 (c (n "lindera-analyzer") (v "0.24.0") (d (list (d (n "anyhow") (r "^1.0.68") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "kanaria") (r "^0.2.0") (d #t) (k 0)) (d (n "lindera-cc-cedict-builder") (r "^0.24.0") (d #t) (k 0)) (d (n "lindera-core") (r "^0.24.0") (d #t) (k 0)) (d (n "lindera-dictionary") (r "^0.24.0") (d #t) (k 0)) (d (n "lindera-filter") (r "^0.24.0") (d #t) (k 0)) (d (n "lindera-ipadic-builder") (r "^0.24.0") (d #t) (k 0)) (d (n "lindera-ko-dic-builder") (r "^0.24.0") (d #t) (k 0)) (d (n "lindera-tokenizer") (r "^0.24.0") (d #t) (k 0)) (d (n "lindera-unidic-builder") (r "^0.24.0") (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.38") (d #t) (k 0)) (d (n "unicode-blocks") (r "^0.1.5") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "yada") (r "^0.5.0") (d #t) (k 0)))) (h "11nfyyg8jm5n2s1mklfs129v6xfr9pdiqnpfdas2xi2zi3qhww0y") (f (quote (("unidic-filter" "lindera-filter/unidic") ("unidic-compress" "lindera-tokenizer/unidic-compress") ("unidic" "lindera-tokenizer/unidic") ("ko-dic-filter" "lindera-filter/ko-dic") ("ko-dic-compress" "lindera-tokenizer/ko-dic-compress") ("ko-dic" "lindera-tokenizer/ko-dic") ("ipadic-filter" "lindera-filter/ipadic") ("ipadic-compress" "lindera-tokenizer/ipadic-compress") ("ipadic" "lindera-tokenizer/ipadic") ("default") ("cc-cedict-filter" "lindera-filter/cc-cedict") ("cc-cedict-compress" "lindera-tokenizer/cc-cedict-compress") ("cc-cedict" "lindera-tokenizer/cc-cedict"))))))

(define-public crate-lindera-analyzer-0.25.0 (c (n "lindera-analyzer") (v "0.25.0") (d (list (d (n "anyhow") (r "^1.0.68") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "kanaria") (r "^0.2.0") (d #t) (k 0)) (d (n "lindera-cc-cedict-builder") (r "^0.25.0") (d #t) (k 0)) (d (n "lindera-core") (r "^0.25.0") (d #t) (k 0)) (d (n "lindera-dictionary") (r "^0.25.0") (d #t) (k 0)) (d (n "lindera-filter") (r "^0.25.0") (d #t) (k 0)) (d (n "lindera-ipadic-builder") (r "^0.25.0") (d #t) (k 0)) (d (n "lindera-ko-dic-builder") (r "^0.25.0") (d #t) (k 0)) (d (n "lindera-tokenizer") (r "^0.25.0") (d #t) (k 0)) (d (n "lindera-unidic-builder") (r "^0.25.0") (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.38") (d #t) (k 0)) (d (n "unicode-blocks") (r "^0.1.5") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "yada") (r "^0.5.0") (d #t) (k 0)))) (h "1ai9vwq8knb4nzb18c90fk99qpcw84nqvyn9g79jfcp16kmp2d5w") (f (quote (("unidic-filter" "lindera-filter/unidic") ("unidic-compress" "lindera-tokenizer/unidic-compress") ("unidic" "lindera-tokenizer/unidic") ("ko-dic-filter" "lindera-filter/ko-dic") ("ko-dic-compress" "lindera-tokenizer/ko-dic-compress") ("ko-dic" "lindera-tokenizer/ko-dic") ("ipadic-neologd-filter" "lindera-filter/ipadic-neologd") ("ipadic-neologd-compress" "lindera-tokenizer/ipadic-neologd-compress") ("ipadic-neologd" "lindera-tokenizer/ipadic-neologd") ("ipadic-filter" "lindera-filter/ipadic") ("ipadic-compress" "lindera-tokenizer/ipadic-compress") ("ipadic" "lindera-tokenizer/ipadic") ("default") ("cc-cedict-filter" "lindera-filter/cc-cedict") ("cc-cedict-compress" "lindera-tokenizer/cc-cedict-compress") ("cc-cedict" "lindera-tokenizer/cc-cedict"))))))

(define-public crate-lindera-analyzer-0.26.0 (c (n "lindera-analyzer") (v "0.26.0") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "kanaria") (r "^0.2.0") (d #t) (k 0)) (d (n "lindera-cc-cedict-builder") (r "^0.26.0") (d #t) (k 0)) (d (n "lindera-core") (r "^0.26.0") (d #t) (k 0)) (d (n "lindera-dictionary") (r "^0.26.0") (d #t) (k 0)) (d (n "lindera-filter") (r "^0.26.0") (d #t) (k 0)) (d (n "lindera-ipadic-builder") (r "^0.26.0") (d #t) (k 0)) (d (n "lindera-ko-dic-builder") (r "^0.26.0") (d #t) (k 0)) (d (n "lindera-tokenizer") (r "^0.26.0") (d #t) (k 0)) (d (n "lindera-unidic-builder") (r "^0.26.0") (d #t) (k 0)) (d (n "regex") (r "^1.9.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.167") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.100") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.43") (d #t) (k 0)) (d (n "unicode-blocks") (r "^0.1.8") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "yada") (r "^0.5.0") (d #t) (k 0)))) (h "01fqdqxz9bc36g2vw6y7bibnkjh4j067mwi1qcxfslgm8aaf4r27") (f (quote (("unidic-filter" "lindera-filter/unidic") ("unidic-compress" "lindera-tokenizer/unidic-compress") ("unidic" "lindera-tokenizer/unidic") ("ko-dic-filter" "lindera-filter/ko-dic") ("ko-dic-compress" "lindera-tokenizer/ko-dic-compress") ("ko-dic" "lindera-tokenizer/ko-dic") ("ipadic-neologd-filter" "lindera-filter/ipadic-neologd") ("ipadic-neologd-compress" "lindera-tokenizer/ipadic-neologd-compress") ("ipadic-neologd" "lindera-tokenizer/ipadic-neologd") ("ipadic-filter" "lindera-filter/ipadic") ("ipadic-compress" "lindera-tokenizer/ipadic-compress") ("ipadic" "lindera-tokenizer/ipadic") ("default") ("cc-cedict-filter" "lindera-filter/cc-cedict") ("cc-cedict-compress" "lindera-tokenizer/cc-cedict-compress") ("cc-cedict" "lindera-tokenizer/cc-cedict"))))))

(define-public crate-lindera-analyzer-0.27.0 (c (n "lindera-analyzer") (v "0.27.0") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "kanaria") (r "^0.2.0") (d #t) (k 0)) (d (n "lindera-cc-cedict-builder") (r "^0.27.0") (d #t) (k 0)) (d (n "lindera-core") (r "^0.27.0") (d #t) (k 0)) (d (n "lindera-dictionary") (r "^0.27.0") (d #t) (k 0)) (d (n "lindera-ipadic-builder") (r "^0.27.0") (d #t) (k 0)) (d (n "lindera-ko-dic-builder") (r "^0.27.0") (d #t) (k 0)) (d (n "lindera-tokenizer") (r "^0.27.0") (d #t) (k 0)) (d (n "lindera-unidic-builder") (r "^0.27.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "regex") (r "^1.9.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.167") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.100") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.43") (d #t) (k 0)) (d (n "unicode-blocks") (r "^0.1.8") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.10.1") (d #t) (k 0)) (d (n "yada") (r "^0.5.0") (d #t) (k 0)))) (h "0j2zcnfwjzdca8ab34hy5mx9rpin4q1nciiagb6yqm2v5ih87rnq") (f (quote (("unidic-filter") ("unidic-compress" "lindera-tokenizer/unidic-compress") ("unidic" "lindera-tokenizer/unidic") ("ko-dic-filter") ("ko-dic-compress" "lindera-tokenizer/ko-dic-compress") ("ko-dic" "lindera-tokenizer/ko-dic") ("ipadic-neologd-filter") ("ipadic-neologd-compress" "lindera-tokenizer/ipadic-neologd-compress") ("ipadic-neologd" "lindera-tokenizer/ipadic-neologd") ("ipadic-filter") ("ipadic-compress" "lindera-tokenizer/ipadic-compress") ("ipadic" "lindera-tokenizer/ipadic") ("default") ("cc-cedict-filter") ("cc-cedict-compress" "lindera-tokenizer/cc-cedict-compress") ("cc-cedict" "lindera-tokenizer/cc-cedict"))))))

(define-public crate-lindera-analyzer-0.27.1 (c (n "lindera-analyzer") (v "0.27.1") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "kanaria") (r "^0.2.0") (d #t) (k 0)) (d (n "lindera-cc-cedict-builder") (r "^0.27.1") (d #t) (k 0)) (d (n "lindera-core") (r "^0.27.1") (d #t) (k 0)) (d (n "lindera-dictionary") (r "^0.27.1") (d #t) (k 0)) (d (n "lindera-ipadic-builder") (r "^0.27.1") (d #t) (k 0)) (d (n "lindera-ko-dic-builder") (r "^0.27.1") (d #t) (k 0)) (d (n "lindera-tokenizer") (r "^0.27.1") (d #t) (k 0)) (d (n "lindera-unidic-builder") (r "^0.27.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "regex") (r "^1.9.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.167") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.100") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.43") (d #t) (k 0)) (d (n "unicode-blocks") (r "^0.1.8") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.10.1") (d #t) (k 0)) (d (n "yada") (r "^0.5.0") (d #t) (k 0)))) (h "093044cm4k4yqw1s1zj1ybr74bhvlcyaj7spghh481qw1a8j2qwr") (f (quote (("unidic-filter") ("unidic-compress" "lindera-tokenizer/unidic-compress") ("unidic" "lindera-tokenizer/unidic") ("ko-dic-filter") ("ko-dic-compress" "lindera-tokenizer/ko-dic-compress") ("ko-dic" "lindera-tokenizer/ko-dic") ("ipadic-neologd-filter") ("ipadic-neologd-compress" "lindera-tokenizer/ipadic-neologd-compress") ("ipadic-neologd" "lindera-tokenizer/ipadic-neologd") ("ipadic-filter") ("ipadic-compress" "lindera-tokenizer/ipadic-compress") ("ipadic" "lindera-tokenizer/ipadic") ("default") ("cc-cedict-filter") ("cc-cedict-compress" "lindera-tokenizer/cc-cedict-compress") ("cc-cedict" "lindera-tokenizer/cc-cedict"))))))

(define-public crate-lindera-analyzer-0.27.2 (c (n "lindera-analyzer") (v "0.27.2") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "kanaria") (r "^0.2.0") (d #t) (k 0)) (d (n "lindera-cc-cedict-builder") (r "^0.27.2") (d #t) (k 0)) (d (n "lindera-core") (r "^0.27.2") (d #t) (k 0)) (d (n "lindera-dictionary") (r "^0.27.2") (d #t) (k 0)) (d (n "lindera-ipadic-builder") (r "^0.27.2") (d #t) (k 0)) (d (n "lindera-ko-dic-builder") (r "^0.27.2") (d #t) (k 0)) (d (n "lindera-tokenizer") (r "^0.27.2") (d #t) (k 0)) (d (n "lindera-unidic-builder") (r "^0.27.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "regex") (r "^1.9.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.167") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.100") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.43") (d #t) (k 0)) (d (n "unicode-blocks") (r "^0.1.8") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.10.1") (d #t) (k 0)) (d (n "yada") (r "^0.5.0") (d #t) (k 0)))) (h "0rqnkxs737rdjzy82vvz7kyf1lrnzd1hx41dcgyf9jsrrfkscwqh") (f (quote (("unidic-filter") ("unidic-compress" "lindera-tokenizer/unidic-compress") ("unidic" "lindera-tokenizer/unidic") ("ko-dic-filter") ("ko-dic-compress" "lindera-tokenizer/ko-dic-compress") ("ko-dic" "lindera-tokenizer/ko-dic") ("ipadic-neologd-filter") ("ipadic-neologd-compress" "lindera-tokenizer/ipadic-neologd-compress") ("ipadic-neologd" "lindera-tokenizer/ipadic-neologd") ("ipadic-filter") ("ipadic-compress" "lindera-tokenizer/ipadic-compress") ("ipadic" "lindera-tokenizer/ipadic") ("default") ("cc-cedict-filter") ("cc-cedict-compress" "lindera-tokenizer/cc-cedict-compress") ("cc-cedict" "lindera-tokenizer/cc-cedict"))))))

(define-public crate-lindera-analyzer-0.28.0 (c (n "lindera-analyzer") (v "0.28.0") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "kanaria") (r "^0.2.0") (d #t) (k 0)) (d (n "lindera-cc-cedict-builder") (r "^0.28.0") (d #t) (k 0)) (d (n "lindera-core") (r "^0.28.0") (d #t) (k 0)) (d (n "lindera-dictionary") (r "^0.28.0") (d #t) (k 0)) (d (n "lindera-ipadic-builder") (r "^0.28.0") (d #t) (k 0)) (d (n "lindera-ko-dic-builder") (r "^0.28.0") (d #t) (k 0)) (d (n "lindera-tokenizer") (r "^0.28.0") (d #t) (k 0)) (d (n "lindera-unidic-builder") (r "^0.28.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "unicode-blocks") (r "^0.1.9") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.23") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.11.0") (d #t) (k 0)) (d (n "yada") (r "^0.5.0") (d #t) (k 0)))) (h "0h4rlahk5d43rsv56mng36vyxz5cvd6vyxsgcqdsjbjfffz3f5sf") (f (quote (("unidic-filter") ("unidic-compress" "lindera-tokenizer/unidic-compress") ("unidic" "lindera-tokenizer/unidic") ("ko-dic-filter") ("ko-dic-compress" "lindera-tokenizer/ko-dic-compress") ("ko-dic" "lindera-tokenizer/ko-dic") ("ipadic-neologd-filter") ("ipadic-neologd-compress" "lindera-tokenizer/ipadic-neologd-compress") ("ipadic-neologd" "lindera-tokenizer/ipadic-neologd") ("ipadic-filter") ("ipadic-compress" "lindera-tokenizer/ipadic-compress") ("ipadic" "lindera-tokenizer/ipadic") ("default") ("cc-cedict-filter") ("cc-cedict-compress" "lindera-tokenizer/cc-cedict-compress") ("cc-cedict" "lindera-tokenizer/cc-cedict"))))))

(define-public crate-lindera-analyzer-0.29.0 (c (n "lindera-analyzer") (v "0.29.0") (d (list (d (n "anyhow") (r "^1.0.81") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "kanaria") (r "^0.2.0") (d #t) (k 0)) (d (n "lindera-cc-cedict-builder") (r "^0.29.0") (d #t) (k 0)) (d (n "lindera-core") (r "^0.29.0") (d #t) (k 0)) (d (n "lindera-dictionary") (r "^0.29.0") (d #t) (k 0)) (d (n "lindera-ipadic-builder") (r "^0.29.0") (d #t) (k 0)) (d (n "lindera-ko-dic-builder") (r "^0.29.0") (d #t) (k 0)) (d (n "lindera-tokenizer") (r "^0.29.0") (d #t) (k 0)) (d (n "lindera-unidic-builder") (r "^0.29.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.58") (d #t) (k 0)) (d (n "unicode-blocks") (r "^0.1.9") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.23") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.11.0") (d #t) (k 0)) (d (n "yada") (r "^0.5.1") (d #t) (k 0)))) (h "01p7wf54bk16kn8vqg7z47wsc8zwbfna9n409wg1w68kwkwmd145") (f (quote (("unidic-filter") ("unidic-compress" "lindera-tokenizer/unidic-compress") ("unidic" "lindera-tokenizer/unidic") ("ko-dic-filter") ("ko-dic-compress" "lindera-tokenizer/ko-dic-compress") ("ko-dic" "lindera-tokenizer/ko-dic") ("ipadic-neologd-filter") ("ipadic-neologd-compress" "lindera-tokenizer/ipadic-neologd-compress") ("ipadic-neologd" "lindera-tokenizer/ipadic-neologd") ("ipadic-filter") ("ipadic-compress" "lindera-tokenizer/ipadic-compress") ("ipadic" "lindera-tokenizer/ipadic") ("default") ("cc-cedict-filter") ("cc-cedict-compress" "lindera-tokenizer/cc-cedict-compress") ("cc-cedict" "lindera-tokenizer/cc-cedict"))))))

(define-public crate-lindera-analyzer-0.30.0 (c (n "lindera-analyzer") (v "0.30.0") (d (list (d (n "anyhow") (r "^1.0.81") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "kanaria") (r "^0.2.0") (d #t) (k 0)) (d (n "lindera-cc-cedict-builder") (r "^0.30.0") (d #t) (k 0)) (d (n "lindera-core") (r "^0.30.0") (d #t) (k 0)) (d (n "lindera-dictionary") (r "^0.30.0") (d #t) (k 0)) (d (n "lindera-filter") (r "^0.30.0") (d #t) (k 0)) (d (n "lindera-ipadic-builder") (r "^0.30.0") (d #t) (k 0)) (d (n "lindera-ko-dic-builder") (r "^0.30.0") (d #t) (k 0)) (d (n "lindera-tokenizer") (r "^0.30.0") (d #t) (k 0)) (d (n "lindera-unidic-builder") (r "^0.30.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.58") (d #t) (k 0)) (d (n "unicode-blocks") (r "^0.1.9") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.23") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.11.0") (d #t) (k 0)) (d (n "yada") (r "^0.5.1") (d #t) (k 0)))) (h "1mzdvk4h64rxir7v8r72nsqdsx5pcrpxv47vahhwwn981vnbzzl7") (f (quote (("unidic" "lindera-tokenizer/unidic" "lindera-filter/unidic") ("ko-dic" "lindera-tokenizer/ko-dic" "lindera-filter/ko-dic") ("ipadic-neologd" "lindera-tokenizer/ipadic-neologd" "lindera-filter/ipadic-neologd") ("ipadic" "lindera-tokenizer/ipadic" "lindera-filter/ipadic") ("filter" "lindera-filter/filter") ("default") ("compress" "lindera-tokenizer/compress") ("cc-cedict" "lindera-tokenizer/cc-cedict" "lindera-filter/cc-cedict"))))))

(define-public crate-lindera-analyzer-0.31.0 (c (n "lindera-analyzer") (v "0.31.0") (d (list (d (n "anyhow") (r "^1.0.81") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "kanaria") (r "^0.2.0") (d #t) (k 0)) (d (n "lindera-cc-cedict-builder") (r "^0.31.0") (d #t) (k 0)) (d (n "lindera-core") (r "^0.31.0") (d #t) (k 0)) (d (n "lindera-dictionary") (r "^0.31.0") (d #t) (k 0)) (d (n "lindera-filter") (r "^0.31.0") (d #t) (k 0)) (d (n "lindera-ipadic-builder") (r "^0.31.0") (d #t) (k 0)) (d (n "lindera-ko-dic-builder") (r "^0.31.0") (d #t) (k 0)) (d (n "lindera-tokenizer") (r "^0.31.0") (d #t) (k 0)) (d (n "lindera-unidic-builder") (r "^0.31.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.58") (d #t) (k 0)) (d (n "unicode-blocks") (r "^0.1.9") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.23") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.11.0") (d #t) (k 0)) (d (n "yada") (r "^0.5.1") (d #t) (k 0)))) (h "0cw1d8adqw1y5zamg5085bh732z4776fkzjcb56frf2w4zzagjy2") (f (quote (("unidic" "lindera-tokenizer/unidic" "lindera-filter/unidic") ("ko-dic" "lindera-tokenizer/ko-dic" "lindera-filter/ko-dic") ("ipadic-neologd" "lindera-tokenizer/ipadic-neologd" "lindera-filter/ipadic-neologd") ("ipadic" "lindera-tokenizer/ipadic" "lindera-filter/ipadic") ("filter" "lindera-filter/filter") ("default") ("compress" "lindera-tokenizer/compress") ("cc-cedict" "lindera-tokenizer/cc-cedict" "lindera-filter/cc-cedict"))))))

