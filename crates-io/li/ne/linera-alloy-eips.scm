(define-module (crates-io li ne linera-alloy-eips) #:use-module (crates-io))

(define-public crate-linera-alloy-eips-0.1.0 (c (n "linera-alloy-eips") (v "0.1.0") (d (list (d (n "alloy-rlp") (r "^0.3") (f (quote ("derive"))) (k 0)) (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (d #t) (k 2)) (d (n "c-kzg") (r "^1.0") (o #t) (k 0)) (d (n "derive_more") (r "^0.99.17") (o #t) (d #t) (k 0)) (d (n "ethereum_ssz") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ethereum_ssz_derive") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "linera-alloy-primitives") (r "^0.7.4") (f (quote ("rlp"))) (k 0)) (d (n "linera-alloy-primitives") (r "^0.7.4") (f (quote ("rand" "serde" "arbitrary"))) (k 2)) (d (n "linera-alloy-serde") (r "^0.1.0") (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("race" "alloc"))) (o #t) (k 0)) (d (n "proptest") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.4") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "sha2") (r "^0.10") (k 0)))) (h "0gijfx47ynyfg5f7329qzwi93l2ig6d4v7h27rz5p5kqnin8qdqd") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "linera-alloy-primitives/std" "alloy-rlp/std" "serde?/std" "c-kzg?/std" "once_cell?/std") ("ssz" "std" "dep:ethereum_ssz" "dep:ethereum_ssz_derive" "linera-alloy-primitives/ssz") ("serde" "dep:serde" "linera-alloy-primitives/serde" "c-kzg?/serde") ("kzg" "dep:derive_more" "dep:c-kzg" "dep:once_cell") ("arbitrary" "std" "dep:arbitrary" "dep:proptest-derive" "dep:proptest" "linera-alloy-primitives/arbitrary")))) (r "1.76")))

