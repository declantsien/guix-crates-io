(define-module (crates-io li ne linera-alloy-primitives) #:use-module (crates-io))

(define-public crate-linera-alloy-primitives-0.7.4 (c (n "linera-alloy-primitives") (v "0.7.4") (d (list (d (n "allocative") (r "^0.3.2") (o #t) (k 0)) (d (n "alloy-rlp") (r "^0.3") (o #t) (k 0)) (d (n "arbitrary") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 2)) (d (n "bytes") (r "^1") (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "derive_arbitrary") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ethereum_ssz") (r "^0.5.3") (o #t) (k 0)) (d (n "getrandom") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hex") (r "^1.10") (f (quote ("alloc"))) (k 0) (p "const-hex")) (d (n "hex-literal") (r "^0.4") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "k256") (r "^0.13") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "keccak-asm") (r "^0.1.0") (o #t) (k 0)) (d (n "postgres-types") (r "^0.2.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom"))) (o #t) (k 0)) (d (n "ruint") (r "^1.11.1") (f (quote ("alloc"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "tiny-keccak") (r "^2.0") (f (quote ("keccak"))) (d #t) (k 0)))) (h "1v23yw5c1mclym11qm38jzc0j590kq86bxcvcv65rh604r35axap") (f (quote (("tiny-keccak") ("native-keccak") ("hex-compat" "hex/hex") ("default" "std")))) (s 2) (e (quote (("std" "bytes/std" "hex/std" "ruint/std" "alloy-rlp?/std" "keccak-asm?/std" "proptest?/std" "rand?/std" "serde?/std" "k256?/std") ("ssz" "std" "dep:ethereum_ssz" "ruint/ssz") ("serde" "dep:serde" "bytes/serde" "hex/serde" "ruint/serde") ("rlp" "dep:alloy-rlp" "ruint/alloy-rlp") ("rand" "dep:rand" "getrandom" "ruint/rand") ("postgres" "std" "dep:postgres-types" "ruint/postgres") ("k256" "dep:k256") ("getrandom" "dep:getrandom") ("asm-keccak" "dep:keccak-asm") ("arbitrary" "std" "dep:arbitrary" "dep:derive_arbitrary" "dep:proptest" "dep:proptest-derive" "ruint/arbitrary" "ruint/proptest" "ethereum_ssz?/arbitrary") ("allocative" "dep:allocative")))) (r "1.65")))

