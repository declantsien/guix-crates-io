(define-module (crates-io li ne linera-sdk) #:use-module (crates-io))

(define-public crate-linera-sdk-0.0.1 (c (n "linera-sdk") (v "0.0.1") (h "118xvyfa5k8aykdv10s29k776xp5f7zvdk3fgg95fpmwivb8wlfp") (y #t)))

(define-public crate-linera-sdk-0.1.0 (c (n "linera-sdk") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "=0.1.58") (d #t) (k 0)) (d (n "bcs") (r "^0.1.3") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.15.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "custom_debug_derive") (r "^0.5.1") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.24") (d #t) (k 0)) (d (n "linera-base") (r "^0.1.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.1.0") (f (quote ("test"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.1.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-storage") (r "^0.1.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.1.0") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1.25.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "0dc93a45mw57wpgi7q9j40np6qpn5pm74av96ijlm1a9da92ns5h") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test")))) (y #t)))

(define-public crate-linera-sdk-0.2.0 (c (n "linera-sdk") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^5.0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "=0.1.58") (d #t) (k 0)) (d (n "bcs") (r "^0.1.3") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.15.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.24") (d #t) (k 0)) (d (n "linera-base") (r "^0.2.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.2.0") (f (quote ("test"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.2.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-storage") (r "^0.2.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.2.0") (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.25.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "0ri1bavfds6jlfhnvld90vaqysqfm1i5r4789p6ycwnxc035yhwl") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test")))) (y #t)))

(define-public crate-linera-sdk-0.3.0 (c (n "linera-sdk") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^5.0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "=0.1.58") (d #t) (k 0)) (d (n "bcs") (r "^0.1.3") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.15.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.24") (d #t) (k 0)) (d (n "linera-base") (r "^0.3.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.3.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.3.0") (f (quote ("test"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.3.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-storage") (r "^0.3.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.3.0") (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.25.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "1np22f6jghzzinrkcsfass1r4vhlj4zsfkfzjva29fxdcmkhwabv") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test")))) (y #t)))

(define-public crate-linera-sdk-0.4.0 (c (n "linera-sdk") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^5.0.7") (d #t) (k 0)) (d (n "async-graphql") (r "^5.0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "=0.1.58") (d #t) (k 0)) (d (n "bcs") (r "^0.1.3") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.15.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.24") (d #t) (k 0)) (d (n "linera-base") (r "^0.4.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.4.0") (f (quote ("test"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.4.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "linera-storage") (r "^0.4.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.4.0") (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.25.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "0jawji4jbzi08a8xrhmd0357z3rlkw728j4jmcclbp8mw62wfih6") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test")))) (y #t)))

(define-public crate-linera-sdk-0.4.1 (c (n "linera-sdk") (v "0.4.1") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^5.0.7") (d #t) (k 0)) (d (n "async-graphql") (r "^5.0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "=0.1.58") (d #t) (k 0)) (d (n "bcs") (r "^0.1.3") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.15.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.24") (d #t) (k 0)) (d (n "linera-base") (r "^0.4.1") (d #t) (k 0)) (d (n "linera-base") (r "^0.4.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.4.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.4.1") (f (quote ("test"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.4.1") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.4.1") (d #t) (k 0)) (d (n "linera-storage") (r "^0.4.1") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.4.1") (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.25.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "0y7f8h5ijznsivl7b7l7ry5ypc7xdbqnddw559ivhxzyhjr7j3mm") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test"))))))

(define-public crate-linera-sdk-0.5.0 (c (n "linera-sdk") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^5.0.7") (d #t) (k 0)) (d (n "async-graphql") (r "^5.0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "=0.1.58") (d #t) (k 0)) (d (n "bcs") (r "^0.1.3") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.15.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.4.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.24") (d #t) (k 0)) (d (n "linera-base") (r "^0.5.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.5.0") (f (quote ("test"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.5.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.5.0") (d #t) (k 0)) (d (n "linera-storage") (r "^0.5.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.5.0") (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "structopt") (r "^0.3.23") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.25.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "1shi9wddbr19jmyrnjk1ywjcxk575pgxq21c9jph1kqfvkmbaky2") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test"))))))

(define-public crate-linera-sdk-0.6.0 (c (n "linera-sdk") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^5.0.10") (d #t) (k 0)) (d (n "async-graphql") (r "^5.0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.15.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 0)) (d (n "linera-base") (r "^0.6.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.6.0") (f (quote ("test"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.6.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.6.0") (d #t) (k 0)) (d (n "linera-storage") (r "^0.6.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.6.0") (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "serde") (r "^1.0.190") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "03xpgwdwci1c1n70wqi75hl5lyxzbbisd9g9rk5rff9r47b10fz1") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test"))))))

(define-public crate-linera-sdk-0.7.1 (c (n "linera-sdk") (v "0.7.1") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^5.0.10") (d #t) (k 0)) (d (n "async-graphql") (r "^5.0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.15.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 0)) (d (n "linera-base") (r "^0.7.1") (d #t) (k 0)) (d (n "linera-base") (r "^0.7.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.7.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.7.1") (f (quote ("test"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.7.1") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.7.1") (d #t) (k 0)) (d (n "linera-storage") (r "^0.7.1") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.7.1") (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "serde") (r "^1.0.190") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "11yn10mq8dndi9sry70v2grmyd8flj7p19vf7c35kn8v48bh09nq") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test"))))))

(define-public crate-linera-sdk-0.8.0 (c (n "linera-sdk") (v "0.8.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^5.0.10") (d #t) (k 0)) (d (n "async-graphql") (r "^5.0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.15.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 0)) (d (n "linera-base") (r "^0.8.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.8.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.8.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.8.0") (f (quote ("test"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.8.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.8.0") (d #t) (k 0)) (d (n "linera-storage") (r "^0.8.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-version") (r "^0.8.0") (d #t) (k 0)) (d (n "linera-views") (r "^0.8.0") (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "serde") (r "^1.0.190") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "1ymdki9a2pgnnq5mvwxs583jyzxka313m4pd127f7k3q12dn8v4n") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test"))))))

(define-public crate-linera-sdk-0.9.0 (c (n "linera-sdk") (v "0.9.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^5.0.10") (d #t) (k 0)) (d (n "async-graphql") (r "^5.0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.15.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 0)) (d (n "linera-base") (r "^0.9.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.9.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.9.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.9.0") (f (quote ("test"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.9.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.9.0") (d #t) (k 0)) (d (n "linera-storage") (r "^0.9.0") (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-version") (r "^0.9.0") (d #t) (k 0)) (d (n "linera-views") (r "^0.9.0") (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "serde") (r "^1.0.190") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "1l6vb7cq2ynqhxma6kpfdqpbyqh67cv9yilj1ip8in07r8i7ngyh") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test"))))))

(define-public crate-linera-sdk-0.10.0 (c (n "linera-sdk") (v "0.10.0") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^7.0.2") (d #t) (k 0)) (d (n "async-graphql") (r "^7.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.77") (d #t) (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.19.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.0") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.10.0") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.10.0") (f (quote ("test" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.10.0") (f (quote ("fs" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.10.0") (d #t) (k 0)) (d (n "linera-storage") (r "^0.10.0") (f (quote ("metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-version") (r "^0.10.0") (d #t) (k 0)) (d (n "linera-views") (r "^0.10.0") (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "13qc786nsqlp5jirjn9b1fq719p8hz4xmj2fkz269g0b11wd53ah") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test" "linera-base/test"))))))

(define-public crate-linera-sdk-0.10.1 (c (n "linera-sdk") (v "0.10.1") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^7.0.2") (d #t) (k 0)) (d (n "async-graphql") (r "^7.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.77") (d #t) (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.19.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.1") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.1") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.10.1") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.10.1") (f (quote ("test" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.10.1") (f (quote ("fs" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.10.1") (d #t) (k 0)) (d (n "linera-storage") (r "^0.10.1") (f (quote ("metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-version") (r "^0.10.1") (d #t) (k 0)) (d (n "linera-views") (r "^0.10.1") (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "1pa2kiw0l17abvlpn1ijl103ck3v54rd04kyplmx1y2866swsvim") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test" "linera-base/test"))))))

(define-public crate-linera-sdk-0.11.0 (c (n "linera-sdk") (v "0.11.0") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "^7.0.2") (d #t) (k 0)) (d (n "async-graphql") (r "^7.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.77") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.19.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ethers") (r "^2.0.14") (f (quote ("solc"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "linera-base") (r "^0.11.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.11.0") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.11.0") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.11.0") (f (quote ("test" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.11.0") (f (quote ("fs" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.11.0") (d #t) (k 0)) (d (n "linera-storage") (r "^0.11.0") (f (quote ("metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.11.0") (k 0)) (d (n "linera-witty") (r "^0.11.0") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen") (r "^0.24.0") (d #t) (k 0)))) (h "1xx4kb064kcfdb1vps61jhsam8x88xhsy3bd40dqpxwwvf5rd149") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime" "linera-witty/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer" "linera-witty/wasmer") ("test" "linera-base/test") ("ethereum" "async-trait" "ethers"))))))

(define-public crate-linera-sdk-0.10.2 (c (n "linera-sdk") (v "0.10.2") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.77") (d #t) (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.19.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.2") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.2") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.10.2") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.10.2") (f (quote ("test" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.10.2") (f (quote ("fs" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.10.2") (d #t) (k 0)) (d (n "linera-storage") (r "^0.10.2") (f (quote ("metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-version") (r "^0.10.2") (d #t) (k 0)) (d (n "linera-views") (r "^0.10.2") (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "165n51bwb1j7ii5k6c7v9n7qgs7agvg2qfdzr2c4hwhgfa81lynv") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test" "linera-base/test"))))))

(define-public crate-linera-sdk-0.10.3 (c (n "linera-sdk") (v "0.10.3") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.77") (d #t) (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.19.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.3") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.3") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.10.3") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.10.3") (f (quote ("test" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.10.3") (f (quote ("fs" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.10.3") (d #t) (k 0)) (d (n "linera-storage") (r "^0.10.3") (f (quote ("metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-version") (r "^0.10.3") (d #t) (k 0)) (d (n "linera-views") (r "^0.10.3") (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "0r2ailk7vdllxqz7w10hj4npm39ardyrdzilrvglbkkydxn1yq4q") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test" "linera-base/test"))))))

(define-public crate-linera-sdk-0.11.1 (c (n "linera-sdk") (v "0.11.1") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.77") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.19.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ethers") (r "^2.0.14") (f (quote ("solc"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "linera-base") (r "^0.11.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.11.0") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.11.0") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.11.0") (f (quote ("test" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.11.0") (f (quote ("fs" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.11.0") (d #t) (k 0)) (d (n "linera-storage") (r "^0.11.0") (f (quote ("metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.11.0") (k 0)) (d (n "linera-witty") (r "^0.11.0") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen") (r "^0.24.0") (d #t) (k 0)))) (h "0hx82k3rcyhz2iz4bb3yaf88l0zpy3xdxj2rr5cd20cg5i7qg2n4") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime" "linera-witty/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer" "linera-witty/wasmer") ("test" "linera-base/test") ("ethereum" "async-trait" "ethers"))))))

(define-public crate-linera-sdk-0.10.4 (c (n "linera-sdk") (v "0.10.4") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.77") (d #t) (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.19.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.4") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.4") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.10.4") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.10.4") (f (quote ("test" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.10.4") (f (quote ("fs" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.10.4") (d #t) (k 0)) (d (n "linera-storage") (r "^0.10.4") (f (quote ("metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-version") (r "^0.10.4") (d #t) (k 0)) (d (n "linera-views") (r "^0.10.4") (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "1kkd7gzi7w6d4a2mpp70kfjz9aqnmjk1j6fwxzn2arar7rcjfzk2") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test" "linera-base/test"))))))

(define-public crate-linera-sdk-0.11.2 (c (n "linera-sdk") (v "0.11.2") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.77") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.19.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ethers") (r "^2.0.14") (f (quote ("solc"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "linera-base") (r "^0.11.0") (d #t) (k 0)) (d (n "linera-base") (r "^0.11.0") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.11.0") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.11.0") (f (quote ("test" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.11.0") (f (quote ("fs" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.11.0") (d #t) (k 0)) (d (n "linera-storage") (r "^0.11.0") (f (quote ("metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.11.0") (k 0)) (d (n "linera-witty") (r "^0.11.0") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen") (r "^0.24.0") (d #t) (k 0)))) (h "0h8s9r6w79z2bjqx0n2w0hs6yc4winjg91xfjvdwzz7xli7vncxl") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime" "linera-witty/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer" "linera-witty/wasmer") ("test" "linera-base/test") ("ethereum" "async-trait" "ethers"))))))

(define-public crate-linera-sdk-0.11.3 (c (n "linera-sdk") (v "0.11.3") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.77") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.19.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ethers") (r "^2.0.14") (f (quote ("solc"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "linera-base") (r "^0.11.3") (d #t) (k 0)) (d (n "linera-base") (r "^0.11.3") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.11.3") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.11.3") (f (quote ("test" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.11.3") (f (quote ("fs" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.11.3") (d #t) (k 0)) (d (n "linera-storage") (r "^0.11.3") (f (quote ("metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-views") (r "^0.11.3") (k 0)) (d (n "linera-witty") (r "^0.11.3") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen") (r "^0.24.0") (d #t) (k 0)))) (h "06wgvv886kalbr2dxvyng5c1banywlkkhmf7h4r11bj7mnp79a6n") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime" "linera-witty/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer" "linera-witty/wasmer") ("test" "linera-base/test") ("ethereum" "async-trait" "ethers"))))))

(define-public crate-linera-sdk-0.10.5 (c (n "linera-sdk") (v "0.10.5") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (k 0)) (d (n "async-graphql") (r "=7.0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-trait") (r "^0.1.77") (d #t) (k 0)) (d (n "bcs") (r "^0.1.6") (d #t) (k 0)) (d (n "cargo_toml") (r "^0.19.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "clap") (r "^4") (f (quote ("cargo" "derive" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.5.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.5") (d #t) (k 0)) (d (n "linera-base") (r "^0.10.5") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-chain") (r "^0.10.5") (f (quote ("metrics"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-core") (r "^0.10.5") (f (quote ("test" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-execution") (r "^0.10.5") (f (quote ("fs" "metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-sdk-derive") (r "^0.10.5") (d #t) (k 0)) (d (n "linera-storage") (r "^0.10.5") (f (quote ("metrics" "wasmer"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "linera-version") (r "^0.10.5") (d #t) (k 0)) (d (n "linera-views") (r "^0.10.5") (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasmtime") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wit-bindgen-guest-rust") (r "^0.2.0") (d #t) (k 0) (p "linera-wit-bindgen-guest-rust")) (d (n "wit-bindgen-host-wasmtime-rust") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "linera-wit-bindgen-host-wasmtime-rust")))) (h "186fa7hldiv0y76ypi25i8xg13ngyi0sjasl37h8n6l5dyzdb4sb") (f (quote (("wasmtime" "linera-core/wasmtime" "linera-execution/wasmtime" "linera-storage/wasmtime") ("wasmer" "linera-core/wasmer" "linera-execution/wasmer" "linera-storage/wasmer") ("test" "linera-base/test"))))))

