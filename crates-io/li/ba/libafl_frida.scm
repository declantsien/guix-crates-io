(define-module (crates-io li ba libafl_frida) #:use-module (crates-io))

(define-public crate-libafl_frida-0.1.0 (c (n "libafl_frida") (v "0.1.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.8.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.4.0") (f (quote ("auto-download" "backtrace" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.2.4") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "gothook") (r "^0.1") (d #t) (t "cfg(unix)") (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.1.0") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.1.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.92") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.20.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "1474bxzv0yanzsykf2w33h9lsd5zzlvfp8ja6xx8kbxwf350krv3")))

(define-public crate-libafl_frida-0.2.0 (c (n "libafl_frida") (v "0.2.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.8.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.4.0") (f (quote ("auto-download" "backtrace" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.2.4") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "gothook") (r "^0.1") (d #t) (t "cfg(unix)") (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.2.0") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.1.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.92") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.20.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "0kn928swb69grdl94b57igjzh46vcw2k5id057x5j0zbhxlqynza")))

(define-public crate-libafl_frida-0.2.1 (c (n "libafl_frida") (v "0.2.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.8.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.4.0") (f (quote ("auto-download" "backtrace" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.2.4") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "gothook") (r "^0.1") (d #t) (t "cfg(unix)") (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.2.1") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.2.1") (d #t) (k 0)) (d (n "libc") (r "^0.2.92") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.20.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "1h8h34m6s1z880ci0adz7zcvaiiw5z4261595m23b14sb5dfy8gv")))

(define-public crate-libafl_frida-0.3.0 (c (n "libafl_frida") (v "0.3.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.8.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.4.1") (f (quote ("auto-download" "backtrace" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.2.4") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "gothook") (r "^0.1") (d #t) (t "cfg(unix)") (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.3.0") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.3.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.92") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.20.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "0jpbnna7bfpxi0j3xgawg3cvfhp7s8rgqrgh0cvim5w88czgaq3y")))

(define-public crate-libafl_frida-0.3.1 (c (n "libafl_frida") (v "0.3.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.8.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.4.1") (f (quote ("auto-download" "backtrace" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.2.4") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "gothook") (r "^0.1") (d #t) (t "cfg(unix)") (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.3.1") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.3.1") (d #t) (k 0)) (d (n "libc") (r "^0.2.92") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.20.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "0pxrhcd89f0hd9kbwpxhk6kr9q75cixajszn63ip5577klzgmkxq")))

(define-public crate-libafl_frida-0.3.2 (c (n "libafl_frida") (v "0.3.2") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.8.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.4.1") (f (quote ("auto-download" "backtrace" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.2.4") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "gothook") (r "^0.1") (d #t) (t "cfg(unix)") (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.3.1") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.3.2") (d #t) (k 0)) (d (n "libc") (r "^0.2.92") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.20.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "082dnir85rizhhjdwb2azin8cv2i5nflrja2ap725p3vsx5fgjyl")))

(define-public crate-libafl_frida-0.4.0 (c (n "libafl_frida") (v "0.4.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.8.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.5.2") (f (quote ("auto-download" "backtrace" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.3") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.4.0") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.4.0") (f (quote ("sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.92") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.20.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "05jgz8w7fbqh3hrmfgvqcy49h66j5xxkg2cxdgbva7hn0klzr778") (f (quote (("default") ("cmplog"))))))

(define-public crate-libafl_frida-0.5.0 (c (n "libafl_frida") (v "0.5.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.8.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.5.2") (f (quote ("auto-download" "backtrace" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.3") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.5.0") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.5.0") (f (quote ("sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.92") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.20.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "0xyv5prd8zbj9q06x1hmnhy6k5jvrb04hzpzwzzzlq13pk6046vk") (f (quote (("default") ("cmplog"))))))

(define-public crate-libafl_frida-0.6.0 (c (n "libafl_frida") (v "0.6.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.8.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.5.2") (f (quote ("auto-download" "backtrace" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.3") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.6.0") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.6.0") (f (quote ("sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.92") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.20.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "0s9jz7m5081ygg99z8frnav1jhd9yn39qc3y12z35q2bb785v903") (f (quote (("default") ("cmplog"))))))

(define-public crate-libafl_frida-0.6.1 (c (n "libafl_frida") (v "0.6.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.8.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.5.2") (f (quote ("auto-download" "backtrace" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.3") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.6.1") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.6.1") (f (quote ("sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.92") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.20.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "0l6cnz439wxrmi4mkai57mv8rddqxn0wya9rc6gx1r6wx4k9pvf5") (f (quote (("default") ("cmplog"))))))

(define-public crate-libafl_frida-0.7.0 (c (n "libafl_frida") (v "0.7.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.10.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 0)) (d (n "dynasmrt") (r "^1.0.1") (d #t) (k 0)) (d (n "frida-gum") (r "^0.6.1") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.3") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.7.0") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.7.0") (f (quote ("std" "sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libloading") (r "^0.7.0") (d #t) (k 0)) (d (n "nix") (r "^0.23.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^0.1.10") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "1hf1flag7clzx39jsfqdlyf7i286n6qywgzfhysc13lss41kmwvl") (f (quote (("default") ("cmplog"))))))

(define-public crate-libafl_frida-0.7.1 (c (n "libafl_frida") (v "0.7.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.58") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.10.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 0)) (d (n "dynasmrt") (r "^1.2") (d #t) (k 0)) (d (n "frida-gum") (r "^0.6.3") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.3") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.7.1") (f (quote ("std" "libafl_derive"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.7.1") (f (quote ("std" "sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libloading") (r "^0.7") (d #t) (k 0)) (d (n "nix") (r "^0.23") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^0.1") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "10zca28bnjca4sjnagcdcnq816psr7vbd9si3241bdp1v3jnaxdk") (f (quote (("default") ("cmplog"))))))

(define-public crate-libafl_frida-0.8.0 (c (n "libafl_frida") (v "0.8.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.10.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^1.2") (d #t) (k 0)) (d (n "frida-gum") (r "^0.6.3") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.3") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "libafl") (r "^0.8.0") (f (quote ("std" "libafl_derive" "frida_cli"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.8.0") (f (quote ("std" "sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libloading") (r "^0.7") (d #t) (k 0)) (d (n "nix") (r "^0.23") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^0.1") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.2") (d #t) (k 0)))) (h "1r6i2yysk89d7z17ir2lhhwr9yxc03978ij1fywhd09i7cnq17i8") (f (quote (("default") ("cmplog"))))))

(define-public crate-libafl_frida-0.8.1 (c (n "libafl_frida") (v "0.8.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.11.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^1.2") (d #t) (k 0)) (d (n "frida-gum") (r "^0.7.1") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.3") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "libafl") (r "^0.8.1") (f (quote ("std" "libafl_derive" "frida_cli"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.8.1") (f (quote ("std" "sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libloading") (r "^0.7") (d #t) (k 0)) (d (n "nix") (r "^0.24") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.3") (d #t) (k 0)))) (h "133wv3bb9mb9qimq0bp4rg77j2l4jcfxqlqp18lsprq25vpfq3w7") (f (quote (("default") ("cmplog"))))))

(define-public crate-libafl_frida-0.8.2 (c (n "libafl_frida") (v "0.8.2") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.11.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^1.2") (d #t) (k 0)) (d (n "frida-gum") (r "^0.8.1") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.4.1") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "libafl") (r "^0.8.2") (f (quote ("std" "libafl_derive" "frida_cli"))) (d #t) (k 0)) (d (n "libafl_targets") (r "^0.8.2") (f (quote ("std" "sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libloading") (r "^0.7") (d #t) (k 0)) (d (n "nix") (r "^0.24") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "termcolor") (r "^1.1.3") (d #t) (k 0)))) (h "05gy30ba84kgpqnh9ydk8kajalsnwn4m4g36v6pchzsmxp6sbkrz") (f (quote (("default") ("cmplog"))))))

(define-public crate-libafl_frida-0.9.0 (c (n "libafl_frida") (v "0.9.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "backtrace") (r "^0.3") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.11.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^1.2") (d #t) (k 0)) (d (n "frida-gum") (r "^0.8.1") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.4.1") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "libafl") (r "^0.9.0") (f (quote ("std" "libafl_derive" "frida_cli"))) (k 0)) (d (n "libafl_targets") (r "^0.9.0") (f (quote ("std" "sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libloading") (r "^0.7") (d #t) (k 0)) (d (n "nix") (r "^0.25") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serial_test") (r "^1") (d #t) (k 2)) (d (n "termcolor") (r "^1.1.3") (d #t) (k 0)))) (h "1zpj9zhj53ph520ckyscyvyx3d7yylkazwawxyvmf28xjmqqycrk") (f (quote (("default") ("cmplog"))))))

(define-public crate-libafl_frida-0.11.0 (c (n "libafl_frida") (v "0.11.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "backtrace") (r "^0.3") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.11.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^2") (d #t) (k 0)) (d (n "frida-gum") (r "^0.13.2") (f (quote ("auto-download" "event-sink" "invocation-listener" "module-names"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.8.1") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "libafl") (r "^0.11.0") (f (quote ("std" "derive" "frida_cli"))) (k 0)) (d (n "libafl_bolts") (r "^0.11.0") (f (quote ("std" "derive" "frida_cli"))) (k 0)) (d (n "libafl_targets") (r "^0.11.0") (f (quote ("std" "sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "nix") (r "^0.26") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serial_test") (r "^2") (f (quote ("logging"))) (k 2)) (d (n "termcolor") (r "^1.1.3") (d #t) (k 0)))) (h "0flx23ap9mfzvyzwsjn30rzx120hhmnalrf88lm6mq5b2fa3139g") (f (quote (("serdeany_autoreg" "libafl_bolts/serdeany_autoreg") ("default" "serdeany_autoreg") ("cmplog"))))))

(define-public crate-libafl_frida-0.11.1 (c (n "libafl_frida") (v "0.11.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "backtrace") (r "^0.3") (f (quote ("std" "serde"))) (k 0)) (d (n "capstone") (r "^0.11.0") (d #t) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.5") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^2") (d #t) (k 0)) (d (n "frida-gum") (r "^0.13.2") (f (quote ("auto-download" "event-sink" "invocation-listener" "module-names"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.8.1") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "libafl") (r "^0.11.1") (f (quote ("std" "derive" "frida_cli"))) (k 0)) (d (n "libafl_bolts") (r "^0.11.1") (f (quote ("std" "derive" "frida_cli"))) (k 0)) (d (n "libafl_targets") (r "^0.11.1") (f (quote ("std" "sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "nix") (r "^0.26") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serial_test") (r "^2") (f (quote ("logging"))) (k 2)) (d (n "termcolor") (r "^1.1.3") (d #t) (k 0)))) (h "0lgb67dwn332l5ps6skk7bc8w9pgwp62k051psxivfnhiw4458ym") (f (quote (("serdeany_autoreg" "libafl_bolts/serdeany_autoreg") ("default" "serdeany_autoreg") ("cmplog"))))))

(define-public crate-libafl_frida-0.11.2 (c (n "libafl_frida") (v "0.11.2") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "backtrace") (r "^0.3") (f (quote ("std" "serde"))) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "color-backtrace") (r "^0.6") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^2") (d #t) (k 0)) (d (n "frida-gum") (r "^0.13.2") (f (quote ("auto-download" "event-sink" "invocation-listener" "module-names"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.8.1") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "libafl") (r "^0.11.2") (f (quote ("std" "derive" "frida_cli"))) (k 0)) (d (n "libafl_bolts") (r "^0.11.2") (f (quote ("std" "derive" "frida_cli"))) (k 0)) (d (n "libafl_targets") (r "^0.11.2") (f (quote ("std" "sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "mmap-rs") (r "^0.6.0") (d #t) (k 0)) (d (n "nix") (r "^0.26") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serial_test") (r "^2") (f (quote ("logging"))) (k 2)) (d (n "termcolor") (r "^1.1.3") (d #t) (k 0)) (d (n "yaxpeax-arch") (r "^0.2.7") (d #t) (k 0)) (d (n "yaxpeax-arm") (r "^0.2.4") (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "yaxpeax-x86") (r "^1.2.2") (d #t) (t "cfg(target_arch = \"x86_64\")") (k 0)))) (h "0gav7gizlw77kslp42v8bvzkay9n7g9ip5as0l52xz8bbd59f0fl") (f (quote (("serdeany_autoreg" "libafl_bolts/serdeany_autoreg") ("default" "serdeany_autoreg") ("cmplog"))))))

(define-public crate-libafl_frida-0.12.0 (c (n "libafl_frida") (v "0.12.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "backtrace") (r "^0.3") (f (quote ("std" "serde"))) (k 0)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "clap") (r "^4.5") (f (quote ("derive"))) (d #t) (k 2)) (d (n "color-backtrace") (r "^0.6") (f (quote ("resolve-modules"))) (d #t) (k 0)) (d (n "dynasmrt") (r "^2") (d #t) (k 0)) (d (n "frida-gum") (r "^0.13.6") (f (quote ("auto-download" "event-sink" "invocation-listener" "module-names"))) (d #t) (k 0)) (d (n "frida-gum-sys") (r "^0.13.6") (f (quote ("auto-download" "event-sink" "invocation-listener"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "iced-x86") (r "^1.20.0") (f (quote ("code_asm"))) (o #t) (d #t) (t "cfg(target_arch = \"x86_64\")") (k 0)) (d (n "libafl") (r "^0.12.0") (f (quote ("std" "derive" "frida_cli"))) (k 0)) (d (n "libafl_bolts") (r "^0.12.0") (f (quote ("std" "derive" "frida_cli"))) (k 0)) (d (n "libafl_targets") (r "^0.12.0") (f (quote ("std" "sancov_cmplog"))) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libloading") (r "^0.7") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "mmap-rs") (r "^0.6.0") (d #t) (k 0)) (d (n "nix") (r "^0.27") (f (quote ("mman"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rangemap") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serial_test") (r "^2") (f (quote ("logging"))) (k 2)) (d (n "termcolor") (r "^1.1.3") (d #t) (k 0)) (d (n "yaxpeax-arch") (r "^0.2.7") (d #t) (k 0)) (d (n "yaxpeax-arm") (r "^0.2.4") (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "yaxpeax-x86") (r "^1.2.2") (d #t) (t "cfg(target_arch = \"x86_64\")") (k 0)))) (h "1jfa22rf0qmm3ncnwgpnh22ljg21hy5snhpfcajxvj5350y5d7n8") (f (quote (("serdeany_autoreg" "libafl_bolts/serdeany_autoreg") ("default" "serdeany_autoreg") ("cmplog" "iced-x86"))))))

