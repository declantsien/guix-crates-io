(define-module (crates-io li nf linfa-clustering) #:use-module (crates-io))

(define-public crate-linfa-clustering-0.1.0 (c (n "linfa-clustering") (v "0.1.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "ndarray") (r "^0.13") (f (quote ("rayon" "serde" "approx"))) (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.5") (k 2)) (d (n "ndarray-rand") (r "^0.11") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.3") (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)))) (h "06d5jag43x208nac84wd9z00zgk0cdga8wjd3b3kz7wn7ciw3hz1")))

(define-public crate-linfa-clustering-0.2.1 (c (n "linfa-clustering") (v "0.2.1") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "linfa") (r "^0.2.1") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("rayon" "approx"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.5") (k 2)) (d (n "ndarray-rand") (r "^0.11") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.1.32") (d #t) (k 0)) (d (n "openblas-src") (r "^0.9") (f (quote ("system"))) (k 2)) (d (n "rand_isaac") (r "^0.2.0") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sprs") (r "^0.7") (d #t) (k 0)))) (h "0iqqalcbm83jpjyv11qixhr149kjsl7qgj6sdf15ni4hj521df13") (f (quote (("serde" "ndarray/serde"))))))

(define-public crate-linfa-clustering-0.3.0 (c (n "linfa-clustering") (v "0.3.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "linfa") (r "^0.3.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("rayon" "approx"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.5") (k 2)) (d (n "ndarray-rand") (r "^0.11") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.1.32") (d #t) (k 0)) (d (n "partitions") (r "^0.2.4") (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2.0") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("std" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sprs") (r "^0.7") (d #t) (k 0)))) (h "0paz6zvlpc2n6n980kqjp3sr6cd9g0rv14g2gc4xdcrk7ffw6nsl") (f (quote (("serde" "serde_crate" "ndarray/serde") ("default"))))))

(define-public crate-linfa-clustering-0.3.1 (c (n "linfa-clustering") (v "0.3.1") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "linfa") (r "^0.3.1") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("rayon" "approx"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.5") (k 2)) (d (n "ndarray-rand") (r "^0.11") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.1.32") (d #t) (k 0)) (d (n "partitions") (r "^0.2.4") (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2.0") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("std" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sprs") (r "^0.7") (d #t) (k 0)))) (h "0zkra7yngz0jl8hggpzzdx3skyvlajj29sp6ynqbhni192indfpc") (f (quote (("serde" "serde_crate" "ndarray/serde") ("default"))))))

(define-public crate-linfa-clustering-0.4.0 (c (n "linfa-clustering") (v "0.4.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "lax") (r "^0.1.0") (d #t) (k 2)) (d (n "linfa") (r "^0.4.0") (f (quote ("ndarray-linalg"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.14") (f (quote ("rayon" "approx"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.13") (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.7") (k 2)) (d (n "ndarray-rand") (r "^0.13") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "partitions") (r "^0.2.4") (d #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("std" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0bln2ahayahhnnsipxznxx4f927nh21cs2lcnzqa9nbirhyf9v80") (f (quote (("serde" "serde_crate" "ndarray/serde") ("default"))))))

(define-public crate-linfa-clustering-0.5.0 (c (n "linfa-clustering") (v "0.5.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "lax") (r "^0.2.0") (d #t) (k 2)) (d (n "linfa") (r "^0.5.0") (f (quote ("ndarray-linalg"))) (d #t) (k 0)) (d (n "linfa-nn") (r "^0.5.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("rayon" "approx"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.8") (k 2)) (d (n "ndarray-rand") (r "^0.14") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.5") (d #t) (k 0)) (d (n "noisy_float") (r "^0.2.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "partitions") (r "^0.2.4") (d #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("std" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "space") (r "^0.12") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "17dmpmvlncjy819fbrx39b5icviacxdqzwarqqpq0x280sfv2x9x") (f (quote (("serde" "serde_crate" "ndarray/serde" "linfa-nn/serde") ("default"))))))

(define-public crate-linfa-clustering-0.5.1 (c (n "linfa-clustering") (v "0.5.1") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "lax") (r "^0.2.0") (d #t) (k 2)) (d (n "linfa") (r "^0.5.1") (f (quote ("ndarray-linalg"))) (d #t) (k 0)) (d (n "linfa-nn") (r "^0.5.1") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("rayon" "approx"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.8") (k 2)) (d (n "ndarray-rand") (r "^0.14") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.5") (d #t) (k 0)) (d (n "noisy_float") (r "^0.2.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "partitions") (r "^0.2.4") (d #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("std" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "space") (r "^0.12") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1k9c668fddrrhw1zqwc1brx2bm2pvra3nzw91mp37aygsx1hd2q4") (f (quote (("serde" "serde_crate" "ndarray/serde" "linfa-nn/serde") ("default"))))))

(define-public crate-linfa-clustering-0.6.0 (c (n "linfa-clustering") (v "0.6.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "lax") (r "^0.2.0") (d #t) (k 2)) (d (n "linfa") (r "^0.6.0") (d #t) (k 0)) (d (n "linfa-datasets") (r "^0.6.0") (f (quote ("generate"))) (d #t) (k 2)) (d (n "linfa-linalg") (r "^0.1") (k 0)) (d (n "linfa-nn") (r "^0.6.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("rayon" "approx"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.8") (k 2)) (d (n "ndarray-rand") (r "^0.14") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.5") (d #t) (k 0)) (d (n "noisy_float") (r "^0.2.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "partitions") (r "^0.2.4") (d #t) (k 0)) (d (n "rand_xoshiro") (r "^0.6") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("std" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "space") (r "^0.12") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0mz3f73q4ifpdh68jkms8pcvmbywxhy7sqvxgsg2dpapfppdsdsv") (f (quote (("serde" "serde_crate" "ndarray/serde" "linfa-nn/serde") ("default") ("blas" "ndarray-linalg" "linfa/ndarray-linalg"))))))

(define-public crate-linfa-clustering-0.6.1 (c (n "linfa-clustering") (v "0.6.1") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "lax") (r "^0.15.0") (d #t) (k 2)) (d (n "linfa") (r "^0.6.1") (d #t) (k 0)) (d (n "linfa-datasets") (r "^0.6.1") (f (quote ("generate"))) (d #t) (k 2)) (d (n "linfa-linalg") (r "^0.1") (k 0)) (d (n "linfa-nn") (r "^0.6.1") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("rayon" "approx"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.8") (k 2)) (d (n "ndarray-rand") (r "^0.14") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.5") (d #t) (k 0)) (d (n "noisy_float") (r "^0.2.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "partitions") (r "^0.2.4") (d #t) (k 0)) (d (n "rand_xoshiro") (r "^0.6") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("std" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "space") (r "^0.12") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0c5vmprpk33b9l44cq4p56sglimfb7snsy2kid71h83x6i9r34dd") (f (quote (("serde" "serde_crate" "ndarray/serde" "linfa-nn/serde") ("default") ("blas" "ndarray-linalg" "linfa/ndarray-linalg"))))))

(define-public crate-linfa-clustering-0.7.0 (c (n "linfa-clustering") (v "0.7.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "lax") (r "^0.15.0") (d #t) (k 2)) (d (n "linfa") (r "^0.7.0") (d #t) (k 0)) (d (n "linfa") (r "^0.7.0") (f (quote ("benchmarks"))) (d #t) (k 2)) (d (n "linfa-datasets") (r "^0.7.0") (f (quote ("generate"))) (d #t) (k 2)) (d (n "linfa-linalg") (r "^0.1") (k 0)) (d (n "linfa-nn") (r "^0.7.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("rayon" "approx"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.8") (k 2)) (d (n "ndarray-rand") (r "^0.14") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.5") (d #t) (k 0)) (d (n "noisy_float") (r "^0.2.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand_xoshiro") (r "^0.6") (d #t) (k 0)) (d (n "serde_crate") (r "^1.0") (f (quote ("std" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "space") (r "^0.12") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "12s3yjfbyfb0vicb6iaji7wnyvfyslvbpf3qm00m7kz86fj2ivva") (f (quote (("serde" "serde_crate" "ndarray/serde" "linfa-nn/serde") ("default"))))))

