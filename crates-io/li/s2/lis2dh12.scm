(define-module (crates-io li s2 lis2dh12) #:use-module (crates-io))

(define-public crate-lis2dh12-0.1.0 (c (n "lis2dh12") (v "0.1.0") (d (list (d (n "accelerometer") (r "^0.6") (d #t) (k 0)) (d (n "cast") (r "^0.2") (k 0)) (d (n "embedded-hal") (r "^0.2") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7") (d #t) (k 2)))) (h "1q8gi1y8701qfg95r7f5r82ylrr47w29bcxipx4ngaa0rl3ax40f") (f (quote (("out_f32") ("default"))))))

(define-public crate-lis2dh12-0.1.2 (c (n "lis2dh12") (v "0.1.2") (d (list (d (n "accelerometer") (r "^0.6") (d #t) (k 0)) (d (n "cast") (r "^0.2") (k 0)) (d (n "embedded-hal") (r "^0.2") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7") (d #t) (k 2)))) (h "0pk97xjrpkaijfbmjjglm742ira0a38c2kz5q2m35ps3278dzsa5") (f (quote (("out_f32") ("default"))))))

(define-public crate-lis2dh12-0.2.0 (c (n "lis2dh12") (v "0.2.0") (d (list (d (n "accelerometer") (r "^0.7") (d #t) (k 0)) (d (n "cast") (r "^0.2") (k 0)) (d (n "embedded-hal") (r "^0.2") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7") (d #t) (k 2)))) (h "0rcaq00b4lfd355ybhp9w9wfp31lbsfw09y69b2rqzjpi5w31301") (f (quote (("out_f32") ("default"))))))

(define-public crate-lis2dh12-0.3.0 (c (n "lis2dh12") (v "0.3.0") (d (list (d (n "accelerometer") (r "^0.8") (d #t) (k 0)) (d (n "cast") (r "^0.2") (k 0)) (d (n "embedded-hal") (r "^0.2") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7") (d #t) (k 2)))) (h "12dwb6fr9b76sqv4678x8pf1dkncrinr1m9b4h7zymj29vqvc8av") (f (quote (("out_f32") ("default"))))))

(define-public crate-lis2dh12-0.4.0 (c (n "lis2dh12") (v "0.4.0") (d (list (d (n "accelerometer") (r "^0.10") (d #t) (k 0)) (d (n "cast") (r "^0.2") (k 0)) (d (n "embedded-hal") (r "^0.2") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7") (d #t) (k 2)))) (h "0ql0l1fwmgdgjk0xlw37lffwqcf9q6q0ad0pprp99ba1l6kjkq0w") (f (quote (("out_f32") ("default"))))))

(define-public crate-lis2dh12-0.5.0 (c (n "lis2dh12") (v "0.5.0") (d (list (d (n "accelerometer") (r "^0.11.0") (d #t) (k 0)) (d (n "cast") (r "^0.2.3") (k 0)) (d (n "embedded-hal") (r "^0.2.3") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7.1") (d #t) (k 2)) (d (n "num-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.11") (o #t) (d #t) (k 0)))) (h "04x14wi3ypnwb4zaiyjh53cvqawlw0gz6pbg3hki1c4vh4d5rsn5") (f (quote (("out_f32" "num-traits" "num-derive") ("default"))))))

(define-public crate-lis2dh12-0.6.0 (c (n "lis2dh12") (v "0.6.0") (d (list (d (n "accelerometer") (r "^0.12.0") (d #t) (k 0)) (d (n "cast") (r "^0.2.3") (k 0)) (d (n "embedded-hal") (r "^0.2.4") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7.2") (d #t) (k 2)) (d (n "num-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (o #t) (d #t) (k 0)))) (h "1ysvx2lq17g1ay4cv06xcbqjzyndzkpvnhmpyvm366h8ikc8hhiw") (f (quote (("out_f32" "num-traits" "num-derive") ("default"))))))

(define-public crate-lis2dh12-0.6.2 (c (n "lis2dh12") (v "0.6.2") (d (list (d (n "accelerometer") (r "^0.12.0") (d #t) (k 0)) (d (n "cast") (r "^0.2.5") (k 0)) (d (n "embedded-hal") (r "^0.2.4") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7.2") (d #t) (k 2)) (d (n "num-derive") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (o #t) (d #t) (k 0)))) (h "0h24igfsgkssg7967csrx65pi4z0j7vdwdf4pr55l9zsd15fd2zf") (f (quote (("out_f32" "num-traits" "num-derive") ("default"))))))

(define-public crate-lis2dh12-0.6.4 (c (n "lis2dh12") (v "0.6.4") (d (list (d (n "accelerometer") (r "^0.12.0") (d #t) (k 0)) (d (n "cast") (r "^0.2.5") (k 0)) (d (n "embedded-hal") (r "^0.2.5") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7.2") (d #t) (k 2)) (d (n "num-derive") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (o #t) (d #t) (k 0)))) (h "0kps7akv9mjm1l580yl1d9a7pvhdapg96ydn7p0sc3f3p7icvl12") (f (quote (("out_f32" "num-traits" "num-derive") ("default"))))))

(define-public crate-lis2dh12-0.6.5 (c (n "lis2dh12") (v "0.6.5") (d (list (d (n "accelerometer") (r "^0.12.0") (d #t) (k 0)) (d (n "cast") (r "^0.2.7") (k 0)) (d (n "embedded-hal") (r "^0.2.5") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7.2") (d #t) (k 2)) (d (n "num-derive") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (o #t) (k 0)))) (h "0k1bk0935skyvi21g800n77hq7ldsq0nv4x20d3aaqmijy08ih8j") (f (quote (("out_f32" "num-traits" "num-derive") ("default"))))))

(define-public crate-lis2dh12-0.6.6 (c (n "lis2dh12") (v "0.6.6") (d (list (d (n "accelerometer") (r "^0.12.0") (d #t) (k 0)) (d (n "cast") (r "^0.3.0") (k 0)) (d (n "embedded-hal") (r "^0.2.6") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.8.0") (d #t) (k 2)) (d (n "num-derive") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (o #t) (k 0)))) (h "16jw0cfdgyfpm9g75p1zzh17b6dbdj2j3mbga4987w5lj6ybq4fs") (f (quote (("out_f32" "num-traits" "num-derive") ("default"))))))

(define-public crate-lis2dh12-0.6.7 (c (n "lis2dh12") (v "0.6.7") (d (list (d (n "accelerometer") (r "^0.12.0") (d #t) (k 0)) (d (n "cast") (r "^0.3.0") (k 0)) (d (n "embedded-hal") (r "^0.2.6") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.8.0") (d #t) (k 2)) (d (n "num-derive") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (o #t) (k 0)))) (h "1l1xicz7wq7cnhj3f76j86lkj66qk5405bmi87j8rqlqc7h9c9n4") (f (quote (("out_f32" "num-traits" "num-derive") ("default"))))))

(define-public crate-lis2dh12-0.6.8 (c (n "lis2dh12") (v "0.6.8") (d (list (d (n "accelerometer") (r "^0.12.0") (d #t) (k 0)) (d (n "cast") (r "^0.3.0") (k 0)) (d (n "embedded-hal") (r "^0.2.7") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.9.0") (d #t) (k 2)) (d (n "num-derive") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (k 0)))) (h "12wick6kr9bf0fhpb5vgic8c28cy7bdjmnqpd361s5ybwdzagwbn") (f (quote (("out_f32" "num-traits" "num-derive") ("default"))))))

(define-public crate-lis2dh12-0.6.9 (c (n "lis2dh12") (v "0.6.9") (d (list (d (n "accelerometer") (r "^0.12.0") (d #t) (k 0)) (d (n "cast") (r "^0.3.0") (k 0)) (d (n "embedded-hal") (r "^0.2.7") (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.9.0") (d #t) (k 2)) (d (n "num-derive") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (o #t) (k 0)))) (h "1pmakmm8dfcdmnhwdnbcza9l6sv7imqixvvf85z846brnxnj0nvn") (f (quote (("out_f32" "num-traits" "num-derive") ("default"))))))

